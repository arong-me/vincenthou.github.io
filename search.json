[{"title":"后端系统问题排查案例","url":"https://vincenthou.github.io/2017/07/28/后端系统问题排查案例/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.cnblogs.com/succour/p/6305574.html\" target=\"_blank\" rel=\"external\">记一次线上由nginx upstream keepalive与http协议”协作”引起的接口报错率飙高事件</a></li>\n</ul>\n","categories":[],"tags":["backend","debug"]},{"title":"后端系统设计方案","url":"https://vincenthou.github.io/2017/07/27/后端系统设计方案/","content":"<h1 id=\"综合\"><a href=\"#综合\" class=\"headerlink\" title=\"综合\"></a>综合</h1><ul>\n<li><a href=\"https://github.com/donnemartin/system-design-primer\" target=\"_blank\" rel=\"external\">系统设计入门</a></li>\n<li><a href=\"http://jxy.me/2017/06/03/distributed-mess/\" target=\"_blank\" rel=\"external\">分布式大杂烩</a></li>\n</ul>\n<h1 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h1><ul>\n<li><a href=\"http://www.linkedkeeper.com/detail/blog.action?bid=1016\" target=\"_blank\" rel=\"external\">浅谈分布式消息技术 Kafka</a></li>\n</ul>\n","categories":[],"tags":["collection","backend","architecture"]},{"title":"grpc协议和工具","url":"https://vincenthou.github.io/2017/07/27/grpc协议和工具/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/grpc-ecosystem/go-grpc-middleware\" target=\"_blank\" rel=\"external\">grpc常用中间件实现</a></li>\n<li><a href=\"https://github.com/grpc-ecosystem/grpc-gateway\" target=\"_blank\" rel=\"external\">grpc的restful API反向代理代码生成器</a></li>\n<li><a href=\"https://github.com/njpatel/grpcc\" target=\"_blank\" rel=\"external\">grpcc 命令行尝试工具</a></li>\n<li><a href=\"https://pingcap.com/blog-grpc-zh\" target=\"_blank\" rel=\"external\">深入了解 gRPC：协议</a></li>\n</ul>\n","categories":[],"tags":["backend"]},{"title":"动态追踪技术","url":"https://vincenthou.github.io/2017/07/27/动态追踪技术/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://pingcap.com/blog-tangliu-tool-%7C-zh\" target=\"_blank\" rel=\"external\">工欲性能调优，必先利其器(1) - 定位追踪工具</a></li>\n<li><a href=\"https://pingcap.com/blog-tangliu-tool-%7C%7C-zh\" target=\"_blank\" rel=\"external\">工欲性能调优，必先利其器(2) - 火焰图</a></li>\n<li><a href=\"https://openresty.org/posts/dynamic-tracing/\" target=\"_blank\" rel=\"external\">动态追踪技术漫谈 - 章亦春</a></li>\n</ul>\n","categories":[],"tags":["collection","backend","pefermance"]},{"title":"整理性能优化的方案和思路","url":"https://vincenthou.github.io/2017/07/22/整理性能优化的方案和思路/","content":"","categories":[],"tags":["blog","todo","pefermance","architecture"]},{"title":"【JS之美】异步和回调","url":"https://vincenthou.github.io/2017/06/27/【JS之美】异步和回调/","content":"<p>林林总总接触了不少语言，慢慢发现其实没有所谓最好的语言，每种语言都有自己的诞生背景和适用场景，结合工程的实践最适用的语言才是最好的。也正因为这样其实对于语言的偏执也渐渐淡了许多，但是总还有几个语言是比较偏好的，JS便是一个。既然提到应用场景或者说语言特色，想来想去，虽然近几年的ES标准的普及和推进，JS也渐渐吸收了很多其他语言的特性，变得不那么 <code>JS</code> 了，但总还有些特性是骨子里面能够跟其他语言区分开来的，异步就是最有代表性的一点。</p>\n<h1 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h1><h1 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h1><h1 id=\"回调梦魇\"><a href=\"#回调梦魇\" class=\"headerlink\" title=\"回调梦魇\"></a>回调梦魇</h1><h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><h1 id=\"Asyc-Await\"><a href=\"#Asyc-Await\" class=\"headerlink\" title=\"Asyc/Await\"></a>Asyc/Await</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"external\">You-Dont-Know-JS</a></li>\n<li><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"external\">The Node.js Event Loop, Timers, and process.nextTick()</a></li>\n<li><a href=\"https://vimeo.com/96425312\" target=\"_blank\" rel=\"external\">Help, I’m stuck in an event-loop</a></li>\n</ul>\n","categories":[],"tags":["blog","javascript","todo"]},{"title":"高并发系统设计思路","url":"https://vincenthou.github.io/2017/06/23/高并发系统设计思路/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://wetest.qq.com/lab/view/316.html\" target=\"_blank\" rel=\"external\">多“维”优化——前端高并发策略的更深层思考</a></li>\n<li><a href=\"http://wetest.qq.com/lab/view/80.html\" target=\"_blank\" rel=\"external\">高性能服务器架构思路</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=3&amp;timestamp=1498231642&amp;ver=1&amp;signature=FHY4wL84qIJCB2wujEFzOe3wp*ah1dBnHxaWazOT4c4Lis*gafSrZm2Nsc4fJAB9WUz65VuB*O8Z4xvsbWz6GFFhbbLciiK0InEy3fPJRhWT0ZxN6AU8NfVNNMhZnHaEnQHrlRsXM5o0GHmFTz*3am88BPB950sJqvWj3XV4tpk=\" target=\"_blank\" rel=\"external\">去哪儿网机票搜索系统的高并发架构设计</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=3&amp;timestamp=1498231642&amp;ver=1&amp;signature=wz0C0rOE4hyEHQTWtOplUTyZH1CHKoIewuP9cgQC2EF2VaiUX5UpIDXUjAu5qRefPPLm9XDtSNNemCJrosryNcsnC4Cjl3uFSvU8vAPvEFmcSpDJ5GJ8xL9szkCw*Z426cR*bxcNgI6fL-qkwjpvKDJUhREU17C5RuvmIuVBtbM=\" target=\"_blank\" rel=\"external\">微信高并发资金交易系统设计方案——百亿红包背后的技术支撑</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=3&amp;timestamp=1498231642&amp;ver=1&amp;signature=ifj0PRCsXKHVPiVcl-dNxhSlKKKcX6hwO1rz-hbipIqYvRJcuTZvBp-aaLfpBP4sN3YHf7Fx6nt686NDwdMitb6Z9KBWkbni1bTsz-LI*NazsswYjwBQVL8BJvrLIbvuA2ARXrcmI1W3inKiSeFAt*Wtb*l1P9MKhZ8yD5BxKsE=\" target=\"_blank\" rel=\"external\">架构学习之路——高可用高并发系统设计原则</a></li>\n</ul>\n","categories":[],"tags":["pefermance","architecture"]},{"title":"基于containerpilot的服务注册与发现","url":"https://vincenthou.github.io/2017/06/19/基于containerpilot的服务注册与发现/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/joyent/containerpilot\" target=\"_blank\" rel=\"external\">https://github.com/joyent/containerpilot</a></li>\n<li><a href=\"https://www.joyent.com/blog/applications-on-autopilot\" target=\"_blank\" rel=\"external\">https://www.joyent.com/blog/applications-on-autopilot</a></li>\n</ul>\n","categories":[],"tags":["backend","todo","architecture"]},{"title":"前端的数据和状态管理","url":"https://vincenthou.github.io/2017/06/18/前端的数据和状态管理/","content":"<p>TODO</p>\n","categories":[],"tags":["frontend","todo"]},{"title":"【翻译】有帮助的柯里化","url":"https://vincenthou.github.io/2017/06/17/【翻译】有帮助的柯里化/","content":"<p>原文地址: <a href=\"http://fr.umio.us/favoring-curry/\" target=\"_blank\" rel=\"external\">http://fr.umio.us/favoring-curry/</a></p>\n","categories":[],"tags":["javascript","todo","translation"]},{"title":"ES6编程cheat sheet","url":"https://vincenthou.github.io/2017/01/24/ES6编程cheat-sheet/","content":"<p>原文查看<a href=\"https://github.com/DrkSephy/es6-cheatsheet/blob/master/README_zhCn.md\" target=\"_blank\" rel=\"external\">这里</a>，根据最近的使用在原文基础上扩展了一些有用的技巧。</p>\n<h1 id=\"es6-cheatsheet\"><a href=\"#es6-cheatsheet\" class=\"headerlink\" title=\"es6-cheatsheet\"></a>es6-cheatsheet</h1><p>这是一个 ES2015(ES6) 的Cheatsheet，其中包括提示、小技巧、最佳实践和一些代码片段，帮助你<br>完成日复一日的开发工作。</p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><ul>\n<li><a href=\"#var-versus-let--const\">var 与 let / const 声明</a></li>\n<li><a href=\"#replacing-iifes-with-blocks\">代码执行块替换立即执行函数</a></li>\n<li><a href=\"#arrow-functions\">箭头函数</a></li>\n<li><a href=\"#strings\">字符串</a></li>\n<li><a href=\"#destructuring\">解构</a></li>\n<li><a href=\"#modules\">模块</a></li>\n<li><a href=\"#parameters\">参数</a></li>\n<li><a href=\"#classes\">类</a></li>\n<li><a href=\"#symbols\">Symbols</a></li>\n<li><a href=\"#maps\">Maps</a></li>\n<li><a href=\"#weakmaps\">WeakMaps</a></li>\n<li><a href=\"#promises\">Promises</a></li>\n<li><a href=\"#generators\">Generators</a></li>\n<li><a href=\"#async-await\">Async Await</a></li>\n</ul>\n<h2 id=\"var-versus-let-const\"><a href=\"#var-versus-let-const\" class=\"headerlink\" title=\"var versus let / const\"></a>var versus let / const</h2><blockquote>\n<p>除了 <code>var</code> 以外，我们现在多了两个新的标识符来声明变量的存储，它们就是 <code>let</code> 和 <code>const</code>。<br>不同于 <code>var</code> ，<code>let</code> 和 <code>const</code> 语句不会造成声明提升。</p>\n</blockquote>\n<p>一个 <code>var</code> 的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> snack = <span class=\"string\">'Meow Mix'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFood</span>(<span class=\"params\">food</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (food) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> snack = <span class=\"string\">'Friskies'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> snack;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> snack;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getFood(<span class=\"literal\">false</span>); <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>让我们再观察下面语句中，使用 <code>let</code> 替换了 <code>var</code> 后的表现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> snack = <span class=\"string\">'Meow Mix'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFood</span>(<span class=\"params\">food</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (food) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> snack = <span class=\"string\">'Friskies'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> snack;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> snack;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getFood(<span class=\"literal\">false</span>); <span class=\"comment\">// 'Meow Mix'</span></div></pre></td></tr></table></figure>\n<p>当我们重构使用 <code>var</code> 的老代码时，一定要注意这种变化。盲目使用 <code>let</code> 替换 <code>var</code> 后可能会导致预期意外的结果。</p>\n<blockquote>\n<p><strong>注意</strong>：<code>let</code> 和 <code>const</code> 是块级作用域语句。所以在语句块以外引用这些变量时，会造成引用错误 <code>ReferenceError</code>。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'hi'</span>; <span class=\"comment\">// ReferenceError: x is not defined</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>最佳实践</strong>: 在重构老代码时，<code>var</code> 声明需要格外的注意。在创建一个新项目时，使用 <code>let</code> 声明一个变量，使用 <code>const</code> 来声明一个不可改变的常量。</p>\n</blockquote>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Replacing-IIFEs-with-Blocks\"><a href=\"#Replacing-IIFEs-with-Blocks\" class=\"headerlink\" title=\"Replacing IIFEs with Blocks\"></a>Replacing IIFEs with Blocks</h2><p>我们以往创建一个 <strong>立即执行函数</strong> 时，一般是在函数最外层包裹一层括号。<br>ES6支持块级作用域（更贴近其他语言），我们现在可以通过创建一个代码块（Block）来实现，不必通过创建一个函数来实现，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> food = <span class=\"string\">'Meow Mix'</span>;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(food); <span class=\"comment\">// Reference Error</span></div></pre></td></tr></table></figure>\n<p>使用支持块级作用域的ES6的版本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> food = <span class=\"string\">'Meow Mix'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(food); <span class=\"comment\">// Reference Error</span></div></pre></td></tr></table></figure>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Arrow-Functions\"><a href=\"#Arrow-Functions\" class=\"headerlink\" title=\"Arrow Functions\"></a>Arrow Functions</h2><p>一些时候，我们在函数嵌套中需要访问上下文中的 <code>this</code>。比如下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">character</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + character; <span class=\"comment\">// Cannot read property 'name' of undefined</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>一种通用的方式是把上下文中的 <code>this</code> 保存在一个变量里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// Store the context of this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">character</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.name + character;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们也可以把 <code>this</code> 通过属性传进去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">character</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + character;</div><div class=\"line\">    &#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>还可以直接使用 <code>bind</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">character</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + character;</div><div class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>使用 <strong>箭头函数</strong>，<code>this</code> 的值不用我们再做如上几段代码的特殊处理，直接使用即可。<br>上面的代码可以重写为下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"params\">character</span> =&gt;</span> <span class=\"keyword\">this</span>.name + character);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>最佳实践</strong>：使用箭头函数，再也不用考虑 <code>this</code> 的问题了。</p>\n</blockquote>\n<p>当我们编写只返回一个表达式值的简单函数时，也可以使用箭头函数，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> squares = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x &#125;); <span class=\"comment\">// Function Expression</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> squares = arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x); <span class=\"comment\">// Arrow Function for terser implementation</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>最佳实践</strong>：尽可能地多使用 <strong>箭头函数</strong>。</p>\n</blockquote>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><p>在ES6中，标准库也被同样增强了，像字符串对象就新增了 <code>.includes()</code> 和 <code>.repeat()</code> 方法。</p>\n<h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\".includes( )\"></a>.includes( )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">'food'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> substring = <span class=\"string\">'foo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(string.indexOf(substring) &gt; <span class=\"number\">-1</span>);</div></pre></td></tr></table></figure>\n<p>现在，我们可以使用 <code>.inclues()</code> 方法，替代以往判断内容 <code>&gt; -1</code> 的方式。<br><code>.includes()</code> 方法会极简地返回一个布尔值结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> string = <span class=\"string\">'food'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> substring = <span class=\"string\">'foo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(string.includes(substring)); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\".repeat( )\"></a>.repeat( )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">string, count</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> strings = [];</div><div class=\"line\">    <span class=\"keyword\">while</span>(strings.length &lt; count) &#123;</div><div class=\"line\">        strings.push(string);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> strings.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在ES6中，我们可以使用一个极简的方法来实现重复字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// String.repeat(numberOfRepetitions)</span></div><div class=\"line\"><span class=\"string\">'meow'</span>.repeat(<span class=\"number\">3</span>); <span class=\"comment\">// 'meowmeowmeow'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-Literals\"><a href=\"#Template-Literals\" class=\"headerlink\" title=\"Template Literals\"></a>Template Literals</h3><p>使用 <strong>字符串模板字面量</strong>，我可以在字符串中直接使用特殊字符，而不用转义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"This string contains \\\"double quotes\\\" which are escaped.\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">`This string contains \"double quotes\" which don't need to be escaped anymore.`</span>;</div></pre></td></tr></table></figure>\n<p><strong>字符串模板字面量</strong> 还支持直接插入变量，可以实现字符串与变量的直接连接输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Tiger'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">13</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'My cat is named '</span> + name + <span class=\"string\">' and is '</span> + age + <span class=\"string\">' years old.'</span>);</div></pre></td></tr></table></figure>\n<p>更简单的版本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Tiger'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">13</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`My cat is named <span class=\"subst\">$&#123;name&#125;</span> and is <span class=\"subst\">$&#123;age&#125;</span> years old.`</span>);</div></pre></td></tr></table></figure>\n<p>ES5中，我们要这样生成多行文本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> text = (</div><div class=\"line\">    <span class=\"string\">'cat\\n'</span> +</div><div class=\"line\">    <span class=\"string\">'dog\\n'</span> +</div><div class=\"line\">    <span class=\"string\">'nickelodeon'</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> text = [</div><div class=\"line\">    <span class=\"string\">'cat'</span>,</div><div class=\"line\">    <span class=\"string\">'dog'</span>,</div><div class=\"line\">    <span class=\"string\">'nickelodeon'</span></div><div class=\"line\">].join(<span class=\"string\">'\\n'</span>);</div></pre></td></tr></table></figure>\n<p><strong>字符串模板字面量</strong> 让我们不必特别关注多行字符串中的换行转义符号，直接换行即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> text = ( <span class=\"string\">`cat</span></div><div class=\"line\"><span class=\"string\">dog</span></div><div class=\"line\"><span class=\"string\">nickelodeon`</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p><strong>字符串模板字面量</strong> 内部可以使用表达式，像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">`The time and date is <span class=\"subst\">$&#123;today.toLocaleString()&#125;</span>`</span>;</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Destructuring\"><a href=\"#Destructuring\" class=\"headerlink\" title=\"Destructuring\"></a>Destructuring</h2><p>解构让我们可以使用非常便捷的语法，直接将数组或者对象中的值直接分别导出到多个变量中，</p>\n<h3 id=\"Destructuring-Arrays\"><a href=\"#Destructuring-Arrays\" class=\"headerlink\" title=\"Destructuring Arrays\"></a>Destructuring Arrays</h3><p><strong>解构数组</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a = arr[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = arr[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> c = arr[<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> d = arr[<span class=\"number\">3</span>];</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<h3 id=\"Destructuring-Objects\"><a href=\"#Destructuring-Objects\" class=\"headerlink\" title=\"Destructuring Objects\"></a>Destructuring Objects</h3><p><strong>解构对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> luke = &#123; <span class=\"attr\">occupation</span>: <span class=\"string\">'jedi'</span>, <span class=\"attr\">father</span>: <span class=\"string\">'anakin'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> occupation = luke.occupation; <span class=\"comment\">// 'jedi'</span></div><div class=\"line\"><span class=\"keyword\">var</span> father = luke.father; <span class=\"comment\">// 'anakin'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> luke = &#123; <span class=\"attr\">occupation</span>: <span class=\"string\">'jedi'</span>, <span class=\"attr\">father</span>: <span class=\"string\">'anakin'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;occupation, father&#125; = luke;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(occupation); <span class=\"comment\">// 'jedi'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(father); <span class=\"comment\">// 'anakin'</span></div></pre></td></tr></table></figure>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>ES6之前，浏览器端的模块化代码，我们使用像<a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">Browserify</a>这样的库，<br>在 <strong>Node.js</strong> 中，我们则使用 <a href=\"https://nodejs.org/api/modules.html#modules_module_require_id\" target=\"_blank\" rel=\"external\">require</a>。<br>在ES6中，我们现在可以直接使用AMD 和 CommonJS这些模块了。</p>\n<h3 id=\"Exporting-in-CommonJS\"><a href=\"#Exporting-in-CommonJS\" class=\"headerlink\" title=\"Exporting in CommonJS\"></a>Exporting in CommonJS</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>];</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"Exporting-in-ES6\"><a href=\"#Exporting-in-ES6\" class=\"headerlink\" title=\"Exporting in ES6\"></a>Exporting in ES6</h3><p>在ES6中，提供了多种设置模块出口的方式，比如我们要导出一个变量，那么使用 <strong>变量名</strong> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> name = <span class=\"string\">'David'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> age  = <span class=\"number\">25</span>;​​</div></pre></td></tr></table></figure>\n<p>还可以为对象 <strong>导出一个列表</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumTwo</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumThree</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; sumTwo, sumThree &#125;;</div></pre></td></tr></table></figure>\n<p>我们也可以使用简单的一个 <code>export</code> 关键字来导出一个结果值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumTwo</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumThree</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后，我们可以 <strong>导出一个默认出口</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumTwo</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumThree</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> api = &#123;</div><div class=\"line\">    sumTwo,</div><div class=\"line\">    sumThree</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> api;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * 与以下的语句是对等的:</span></div><div class=\"line\"><span class=\"comment\"> * export &#123; api as default &#125;;</span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>最佳实践</strong>：总是在模块的 <strong>最后</strong> 使用 <code>export default</code> 方法。<br>它让模块的出口更清晰明了，节省了阅读整个模块来寻找出口的时间。<br>更多的是，在大量CommonJS模块中，通用的习惯是设置一个出口值或者出口对象。<br>坚持这个规则，可以让我们的代码更易读，且更方便的联合使用CommonJS和ES6模块。</p>\n</blockquote>\n<h3 id=\"Importing-in-ES6\"><a href=\"#Importing-in-ES6\" class=\"headerlink\" title=\"Importing in ES6\"></a>Importing in ES6</h3><p>ES6提供了好几种模块的导入方式。我们可以单独引入一个文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'underscore'</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意的是， <strong>整个文件的引入方式会执行该文件内的最上层代码</strong>。</p>\n</blockquote>\n<p>就像Python一样，我们还可以命名引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; sumTwo, sumThree &#125; <span class=\"keyword\">from</span> <span class=\"string\">'math/addition'</span>;</div></pre></td></tr></table></figure>\n<p>我们甚至可以使用 <code>as</code> 给这些模块重命名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    sumTwo <span class=\"keyword\">as</span> addTwoNumbers,</div><div class=\"line\">    sumThree <span class=\"keyword\">as</span> sumThreeNumbers</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'math/addition'</span>;</div></pre></td></tr></table></figure>\n<p>另外，我们能 <strong>引入所有的东西（原文：import all the things）</strong> （也称为命名空间引入）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> util <span class=\"keyword\">from</span> <span class=\"string\">'math/addition'</span>;</div></pre></td></tr></table></figure>\n<p>最后，我们能可以从一个模块的众多值中引入一个列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> additionUtil <span class=\"keyword\">from</span> <span class=\"string\">'math/addtion'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; sumTwo, sumThree &#125; = additionUtil;</div></pre></td></tr></table></figure>\n<p>像这样引用默认对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> api <span class=\"keyword\">from</span> <span class=\"string\">'math/addition'</span>;</div><div class=\"line\"><span class=\"comment\">// Same as: import &#123; default as api &#125; from 'math/addition';</span></div></pre></td></tr></table></figure>\n<p>我们建议一个模块导出的值应该越简洁越好，不过有时候有必要的话命名引用和默认引用可以混着用。如果一个模块是这样导出的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// foos.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; foo <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>, foo1, foo2 &#125;;</div></pre></td></tr></table></figure>\n<p>那我们可以如此导入这个模块的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import foo, &#123; foo1, foo2 &#125; from &apos;foos&apos;;</div></pre></td></tr></table></figure>\n<p>我们还可以导入commonjs模块，例如React：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; Component, PropTypes &#125; = React;</div></pre></td></tr></table></figure>\n<p>更简化版本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, PropTypes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>：被导出的值是被 <strong>绑定的（原文：bingdings）</strong>，而不是引用。<br>所以，改变一个模块中的值的话，会影响其他引用本模块的代码，一定要避免此种改动发生。</p>\n</blockquote>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h2><p>在ES5中，许多种方法来处理函数的 <strong>参数默认值（default values）</strong>，<strong>参数数量（indefinite arguments）</strong>，<strong>参数命名（named parameters）</strong>。<br>ES6中，我们可以使用非常简洁的语法来处理上面提到的集中情况。</p>\n<h3 id=\"Default-Parameters\"><a href=\"#Default-Parameters\" class=\"headerlink\" title=\"Default Parameters\"></a>Default Parameters</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumbers</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    x = x || <span class=\"number\">0</span>;</div><div class=\"line\">    y = y || <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES6中，我们可以简单为函数参数启用默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumbers</span>(<span class=\"params\">x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">addTwoNumbers(<span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 6</span></div><div class=\"line\">addTwoNumbers(<span class=\"number\">2</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">addTwoNumbers(); <span class=\"comment\">// 0</span></div></pre></td></tr></table></figure>\n<h3 id=\"Rest-Parameters\"><a href=\"#Rest-Parameters\" class=\"headerlink\" title=\"Rest Parameters\"></a>Rest Parameters</h3><p>ES5中，遇到参数数量不确定时，我们只能如此处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArguments</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 <strong>rest</strong> 操作符，我们可以给函数传入一个不确定数量的参数列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArguments</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> arg <span class=\"keyword\">of</span> args) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(arg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Named-Parameters\"><a href=\"#Named-Parameters\" class=\"headerlink\" title=\"Named Parameters\"></a>Named Parameters</h3><p>命名函数<br>ES5中，当我们要处理多个 <strong>命名参数</strong> 时，通常会传入一个 <strong>选项对象</strong> 的方式，这种方式被jQuery采用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> height = options.height || <span class=\"number\">600</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> width  = options.width  || <span class=\"number\">400</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> lineStroke = options.lineStroke || <span class=\"string\">'black'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以利用上面提到的新特性 <strong>解构</strong> ，来完成与上面同样功能的函数：<br>We can achieve the same functionality using destructuring as a formal parameter<br>to a function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\"></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">    &#123; height=<span class=\"number\">600</span>, width=<span class=\"number\">400</span>, lineStroke=<span class=\"string\">'black'</span>&#125;</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Use variables height, width, lineStroke here</span></div></pre></td></tr></table></figure>\n<p>如果我们需要把这个参数变为可选的，那么只要把该参数解构为一个空对象就好了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\"></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">    &#123; height=<span class=\"number\">600</span>, width=<span class=\"number\">400</span>, lineStroke=<span class=\"string\">'black'</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Spread-Operator\"><a href=\"#Spread-Operator\" class=\"headerlink\" title=\"Spread Operator\"></a>Spread Operator</h3><p>我们可以利用展开操作符（Spread Operator）来把一组数组的值，当作参数传入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">-1</span>, <span class=\"number\">100</span>, <span class=\"number\">9001</span>, <span class=\"number\">-32</span>]); <span class=\"comment\">// 9001</span></div></pre></td></tr></table></figure>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><p>在ES6以前，我们实现一个类的功能的话，需要首先创建一个构造函数，然后扩展这个函数的原型方法，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, gender</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name   = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age    = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.incrementAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>继承父类的子类需要这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Personal</span>(<span class=\"params\">name, age, gender, occupation, hobby</span>) </span>&#123;</div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name, age, gender);</div><div class=\"line\">    <span class=\"keyword\">this</span>.occupation = occupation;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hobby = hobby;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Personal.prototype = <span class=\"built_in\">Object</span>.create(Person.prototype);</div><div class=\"line\">Personal.prototype.constructor = Personal;</div><div class=\"line\">Personal.prototype.incrementAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Person.prototype.incrementAge.call(<span class=\"keyword\">this</span>) += <span class=\"number\">20</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>ES6提供了一些语法糖来实现上面的功能，我们可以直接创建一个类：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name, age, gender) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name   = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age    = age;</div><div class=\"line\">        <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    incrementAge() &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.age += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承父类的子类只要简单的使用 <code>extends</code> 关键字就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Personal</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name, age, gender, occupation, hobby) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name, age, gender);</div><div class=\"line\">        <span class=\"keyword\">this</span>.occupation = occupation;</div><div class=\"line\">        <span class=\"keyword\">this</span>.hobby = hobby;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    incrementAge() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.incrementAge();</div><div class=\"line\">        <span class=\"keyword\">this</span>.age += <span class=\"number\">20</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>最佳实践</strong>：ES6新的类语法把我们从晦涩难懂的实现和原型操作中解救出来，这是个非常适合初学者的功能，而且能让我们写出更干净整洁的代码。</p>\n</blockquote>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Symbols\"><a href=\"#Symbols\" class=\"headerlink\" title=\"Symbols\"></a>Symbols</h2><p>Symbols在ES6版本之前就已经存在了，但现在我们拥有一个公共的接口来直接使用它们。<br>Symbols是不可更改的（immutable）并且唯一的（unique），它可用作任何hash数据类型中的键。</p>\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol( )\"></a>Symbol( )</h3><p>调用 <code>Symbol()</code> 或者 <code>Symbol(描述文本)</code> 会创建一个唯一的、在全局中不可以访问的Symbol对象。<br>一个 <code>Symbol()</code> 的应用场景是：在自己的项目中使用第三方代码库，且你需要给他们的对象或者命名空间打补丁代码，又不想改动或升级第三方原有代码的时候。<br>例如，如果你想给 <code>React.Component</code> 这个类添加一个 <code>refreshComponent</code> 方法，但又确定不了这个方法会不会在下个版本中加入，你可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> refreshComponent = <span class=\"built_in\">Symbol</span>();</div><div class=\"line\"></div><div class=\"line\">React.Component.prototype[refreshComponent] = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Symbol-for-key\"><a href=\"#Symbol-for-key\" class=\"headerlink\" title=\"Symbol.for(key)\"></a>Symbol.for(key)</h3><p>使用 <code>Symbol.for(key)</code> 也是会创建一个不可改变的Symbol对象，但区别于上面的创建方法，这个对象是在全局中可以被访问到的。<br>两次相同的 <code>Symbol.for(key)</code> 调用会返回相同的Symbol实例。</p>\n<p><strong>提示</strong>：这并不同于 <code>Symbol(description)</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>) === <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>Symbols常用的一个使用场景，尤其是使用 <code>Symbol.for(key)</code> 方法，是用于实现代码间的互操作。<br>在你的代码中，通过在包含一些已知接口的第三方库的对象参数中查找Symbol成员，你可以实现这种互操作。<br>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reader</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> specialRead = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'specialRead'</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj[specialRead]) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> reader = obj[specialRead]();</div><div class=\"line\">        <span class=\"comment\">// do something with reader</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'object cannot be read'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后在另一个库中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> specialRead = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'specialRead'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeReadableType</span> </span>&#123;</div><div class=\"line\">    [specialRead]() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> reader = createSomeReaderFrom(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> reader;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>：关于Symbol互操作的使用，一个值得一提的例子是<code>Symbol.iterable</code> 。<code>Symbol.iterable</code>存在ES6的所有可枚举对象中：数组（Arrays）、<br>字符串（strings）、生成器（Generators）等等。当它作为一个方法被调用时，它将会返回一个带有枚举接口的对象。</p>\n</blockquote>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Maps\"><a href=\"#Maps\" class=\"headerlink\" title=\"Maps\"></a>Maps</h2><p><strong>Maps</strong> 是一个JavaScript中很重要（迫切需要）的数据结构。<br>在ES6之前，我们创建一个 <strong>hash</strong> 通常是使用一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">map[key1] = <span class=\"string\">'value1'</span>;</div><div class=\"line\">map[key2] = <span class=\"string\">'value2'</span>;</div></pre></td></tr></table></figure>\n<p>但是，这样的代码无法避免函数被特别的属性名覆盖的意外情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; getOwnProperty(&#123; <span class=\"attr\">hasOwnProperty</span>: <span class=\"string\">'Hah, overwritten'</span>&#125;, <span class=\"string\">'Pwned'</span>);</div><div class=\"line\">&gt; <span class=\"built_in\">TypeError</span>: Property <span class=\"string\">'hasOwnProperty'</span> is not a <span class=\"function\"><span class=\"keyword\">function</span></span></div></pre></td></tr></table></figure>\n<p><strong>Maps</strong> 让我们使用 <code>set</code>，<code>get</code> 和 <code>search</code> 操作数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">&gt; map.set(<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>);</div><div class=\"line\">&gt; map.get(<span class=\"string\">'name'</span>); <span class=\"comment\">// david</span></div><div class=\"line\">&gt; map.has(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>Maps最强大的地方在于我们不必只能使用字符串来做key了，现在可以使用任何类型来当作key，而且key不会被强制类型转换为字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</div><div class=\"line\">    [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</div><div class=\"line\">    [<span class=\"literal\">true</span>, <span class=\"string\">'false'</span>],</div><div class=\"line\">    [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</div><div class=\"line\">    [&#123;&#125;, <span class=\"string\">'object'</span>],</div><div class=\"line\">    [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'function'</span>]</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys()) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> key);</div><div class=\"line\">    <span class=\"comment\">// &gt; string, boolean, number, object, function</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>提示</strong>：当使用 <code>map.get()</code> 判断值是否相等时，非基础类型比如一个函数或者对象，将不会正常工作。<br>有鉴于此，还是建议使用字符串，布尔和数字类型的数据类型。</p>\n</blockquote>\n<p>我们还可以使用 <code>.entries()</code> 方法来遍历整个map对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"WeakMaps\"><a href=\"#WeakMaps\" class=\"headerlink\" title=\"WeakMaps\"></a>WeakMaps</h2><p>在ES5之前的版本，我们为了存储私有数据，有好几种方法。像使用这种下划线命名约定：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(age) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _incrementAge() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._age += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在一个开源项目中，命名规则很难维持得一直很好，这样经常会造成一些困扰。<br>此时，我们可以选择使用WeakMaps来替代Maps来存储我们的数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> _age = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(age) &#123;</div><div class=\"line\">        _age.set(<span class=\"keyword\">this</span>, age);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    incrementAge() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> age = _age.get(<span class=\"keyword\">this</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">        _age.set(<span class=\"keyword\">this</span>, age);</div><div class=\"line\">        <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">50</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Midlife crisis'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用WeakMaps来保存我们私有数据的理由之一是不会暴露出属性名，就像下面的例子中的 <code>Reflect.ownKeys()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(<span class=\"number\">50</span>);</div><div class=\"line\">&gt; person.incrementAge(); <span class=\"comment\">// 'Midlife crisis'</span></div><div class=\"line\">&gt; <span class=\"built_in\">Reflect</span>.ownKeys(person); <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<p>一个使用WeakMaps存储数据更实际的例子，是存储与DOM元素相关联的数据，而这不会对DOM元素本身产生污染：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</div><div class=\"line\"><span class=\"keyword\">let</span> el  = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someElement'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Store a weak reference to the element with a key</span></div><div class=\"line\">map.set(el, <span class=\"string\">'reference'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Access the value of the element</span></div><div class=\"line\"><span class=\"keyword\">let</span> value = map.get(el); <span class=\"comment\">// 'reference'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Remove the reference</span></div><div class=\"line\">el.parentNode.removeChild(el);</div><div class=\"line\">el = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">value = map.get(el); <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>上面的例子中，一旦对象被垃圾回收器给销毁了，WeakMaps会自动的把这个对象所对应的键值对数据同时销毁。</p>\n<blockquote>\n<p><strong>提示</strong>：结合这个例子，再考虑下jQuery是如何实现缓存带有引用的DOM元素这个功能的。使用WeakMaps的话，当被缓存的DOM元素被移除的时，jQuery可以自动释放相应元素的内存。<br>通常情况下，在涉及DOM元素存储和缓存的情况下，使用WeakMaps是非常有效的。</p>\n</blockquote>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h2><p>Promises让我们把多缩进难看的代码（回调地狱）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">func1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">    func2(value1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">        func3(value2, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">            func4(value3, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">                func5(value4, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value5</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// Do something with value 5</span></div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>写成这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">func1(value1)</div><div class=\"line\">    .then(func2)</div><div class=\"line\">    .then(func3)</div><div class=\"line\">    .then(func4)</div><div class=\"line\">    .then(func5, value5 =&gt; &#123;</div><div class=\"line\">        <span class=\"comment\">// Do something with value 5</span></div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>在ES6之前，我们使用<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"external\">bluebird</a> 或者<br><a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a>。现在我们有了原生版本的 Promises：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span></div><div class=\"line\">    reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Failed to fulfill Promise'</span>)))</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"built_in\">console</span>.log(reason));</div></pre></td></tr></table></figure>\n<p>这里有两个处理函数，<strong>resolve</strong>（当Promise执行成功完毕时调用的回调函数） 和 <strong>reject</strong> （当Promise执行不接受时调用的回调函数）</p>\n<blockquote>\n<p><strong>Promises的好处</strong>：大量嵌套错误处理回调函数会使代码变得难以阅读理解。<br>使用Promises，我们可以通过清晰的路径将错误事件让上传递，并且适当地处理它们。<br>此外，Promise处理后的值，无论是解决（resolved）还是拒绝（rejected）的结果值，都是不可改变的。</p>\n</blockquote>\n<p>下面是一些使用Promises的实际例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  request.get(url, (error, response, body) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (body) &#123;</div><div class=\"line\">        resolve(<span class=\"built_in\">JSON</span>.parse(body));</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resolve(&#123;&#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们还可以使用 <code>Promise.all()</code> 来 <strong>并行化</strong> 的处理一组异步的操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urls = [</div><div class=\"line\">  <span class=\"string\">'/api/commits'</span>,</div><div class=\"line\">  <span class=\"string\">'/api/issues/opened'</span>,</div><div class=\"line\">  <span class=\"string\">'/api/issues/assigned'</span>,</div><div class=\"line\">  <span class=\"string\">'/api/issues/completed'</span>,</div><div class=\"line\">  <span class=\"string\">'/api/issues/comments'</span>,</div><div class=\"line\">  <span class=\"string\">'/api/pullrequests'</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> promises = urls.map(<span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    $.ajax(&#123; <span class=\"attr\">url</span>: url &#125;)</div><div class=\"line\">      .done(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</div><div class=\"line\">        resolve(data);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all(promises)</div><div class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">results</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with results of all our promises</span></div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>就像<a href=\"https://github.com/DrkSephy/es6-cheatsheet#promises\" target=\"_blank\" rel=\"external\">Promises</a>如何让我们避免<a href=\"http://callbackhell.com/\" target=\"_blank\" rel=\"external\">回调地狱</a>一样，Generators也可以使我们的代码扁平化，同时给予我们开发者像开发同步代码一样的感觉来写异步代码。Generators本质上是一种支持的函数，随后返回表达式的值。<br>Generators实际上是支持<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\" target=\"_blank\" rel=\"external\">暂停运行</a>，随后根据上一步的返回值再继续运行的一种函数。</p>\n<p>下面代码是一个使用generators函数的简单例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">sillyGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> generator = sillyGenerator();</div><div class=\"line\">&gt; <span class=\"built_in\">console</span>.log(generator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\">&gt; <span class=\"built_in\">console</span>.log(generator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></div><div class=\"line\">&gt; <span class=\"built_in\">console</span>.log(generator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></div><div class=\"line\">&gt; <span class=\"built_in\">console</span>.log(generator.next()); <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></div></pre></td></tr></table></figure>\n<p>就像上面的例子，当<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\" target=\"_blank\" rel=\"external\">next</a>运行时，它会把我们的generator向前“推动”，同时执行新的表达式。<br>我们能利用Generators来像书写同步代码一样书写异步代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Hiding asynchronousity with Generators</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    getJSON(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        generator.next(response);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们写个generator函数将要返回我们的数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> entry1 = <span class=\"keyword\">yield</span> request(<span class=\"string\">'http://some_api/item1'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> data1  = <span class=\"built_in\">JSON</span>.parse(entry1);</div><div class=\"line\">    <span class=\"keyword\">var</span> entry2 = <span class=\"keyword\">yield</span> request(<span class=\"string\">'http://some_api/item2'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> data2  = <span class=\"built_in\">JSON</span>.parse(entry2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>借助于 <code>yield</code>，我们可以保证 <code>entry1</code> 确实拿到数据并转换后再赋值给 <code>data1</code>。</p>\n<p>当我们使用generators来像书写同步代码一样书写我们的异步代码逻辑时，没有一种清晰简单的方式来处理期间可能会产生的错误或者异常。在这种情况下，我们可以在我们的generator中引入Promises来处理，就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        getJSON(url, resolve);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们再写一个函数，其中使用 <code>next</code> 来步进我们的generator的同事，再利用我们上面的 <code>request</code> 方法来产生（yield）一个Promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterateGenerator</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> generator = gen();</div><div class=\"line\">    <span class=\"keyword\">var</span> ret;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterate</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        ret = generator.next();</div><div class=\"line\">        <span class=\"keyword\">if</span>(!ret.done) &#123;</div><div class=\"line\">            ret.value.then(iterate);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Generator中引入了Promises后，我们就可以通过Promise的 <code>.catch</code> 和 <code>reject</code> 来捕捉和处理错误了。<br>使用了我们新版的Generator后，新版的调用就像老版本一样简单可读（译者注：有微调）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">iterateGenerator(<span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> entry1 = <span class=\"keyword\">yield</span> request(<span class=\"string\">'http://some_api/item1'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> data1  = <span class=\"built_in\">JSON</span>.parse(entry1);</div><div class=\"line\">    <span class=\"keyword\">var</span> entry2 = <span class=\"keyword\">yield</span> request(<span class=\"string\">'http://some_api/item2'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> data2  = <span class=\"built_in\">JSON</span>.parse(entry2);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在使用Generator后，我们可以重用我们的老版本代码实现，以此展示了Generator的力量。<br>当使用Generators和Promises后，我们可以像书写同步代码一样书写异步代码的同时优雅地解决了错误处理问题。<br>此后，我们实际上可以开始利用更简单的一种方式了，它就是<a href=\"https://github.com/DrkSephy/es6-cheatsheet#async-await\" target=\"_blank\" rel=\"external\">async-await</a>。</p>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n<h2 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async Await\"></a>Async Await</h2><p><code>async await</code> 随着ES2016版本就要发布了，它给我们提供了一种更轻松的、更简单的可以替代的实现上面 Generators 配合 Promises 组合代码的一种编码方式，让我们来看看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getJSON</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    request(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, body</span>) </span>&#123;</div><div class=\"line\">      resolve(body);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">await</span> getJSON();</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// NOT undefined!</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">main();</div></pre></td></tr></table></figure>\n<p>它们看上去和Generators很像。我（作者）强烈推荐使用 <code>async await</code> 来替代Generators + Promises的写法。<br><a href=\"http://masnun.com/2015/11/11/using-es7-asyncawait-today-with-babel.html\" target=\"_blank\" rel=\"external\">这里</a>是个很好的学习资源，让我们学习和使用这项ES7中的新功能。</p>\n<p><sup><a href=\"#table-of-contents\">(回到目录)</a></sup></p>\n","categories":[],"tags":["collection","javascript"]},{"title":"Shell编程cheat sheet","url":"https://vincenthou.github.io/2016/11/24/Shell编程cheat-sheet/","content":"<p>原文查看<a href=\"https://github.com/adambard/learnxinyminutes-docs/blob/master/zh-cn/bash-cn.html.markdown\" target=\"_blank\" rel=\"external\">这里</a>，根据最近的使用在原文基础上扩展了一些有用的技巧。</p>\n<h1 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h1><p>Bash 是一个为 GNU 计划编写的 Unix shell，是 Linux 和 Mac OS X 下的默认 shell。<br>以下大多数例子可以作为脚本的一部分运行，也可直接在 shell 下交互执行。</p>\n<p><a href=\"http://www.gnu.org/software/bash/manual/bashref.html\" target=\"_blank\" rel=\"external\">更多信息</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># 脚本的第一行叫 shebang，用来告知系统如何执行该脚本:</span></div><div class=\"line\"><span class=\"comment\"># 参见： http://en.wikipedia.org/wiki/Shebang_(Unix)</span></div><div class=\"line\"><span class=\"comment\"># 如你所见，注释以 # 开头，shebang 也是注释。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 出错就退出</span></div><div class=\"line\"><span class=\"built_in\">set</span> -e <span class=\"comment\"># Or `trap exit ERR`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示 “Hello world!”</span></div><div class=\"line\"><span class=\"built_in\">echo</span> Hello world!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 每一句指令以换行或分号隔开：</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'This is the first line'</span>; <span class=\"built_in\">echo</span> <span class=\"string\">'This is the second line'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 声明一个变量：</span></div><div class=\"line\">Variable=<span class=\"string\">\"Some string\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 下面是错误的做法：</span></div><div class=\"line\">Variable = <span class=\"string\">\"Some string\"</span></div><div class=\"line\"><span class=\"comment\"># Bash 会把 Variable 当做一个指令，由于找不到该指令，因此这里会报错。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 也不可以这样：</span></div><div class=\"line\">Variable= <span class=\"string\">'Some string'</span></div><div class=\"line\"><span class=\"comment\"># Bash 会认为 'Some string' 是一条指令，由于找不到该指令，这里再次报错。</span></div><div class=\"line\"><span class=\"comment\"># （这个例子中 'Variable=' 这部分会被当作仅对 'Some string' 起作用的赋值。）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用变量：</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$Variable</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$Variable</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$Variable'</span></div><div class=\"line\"><span class=\"comment\"># 当你赋值 (assign) 、导出 (export)，或者以其他方式使用变量时，变量名前不加 $。</span></div><div class=\"line\"><span class=\"comment\"># 如果要使用变量的值， 则要加 $。</span></div><div class=\"line\"><span class=\"comment\"># 注意： ' (单引号) 不会展开变量（即会屏蔽掉变量）。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在变量内部进行字符串代换</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;Variable/Some/A&#125;</span></div><div class=\"line\"><span class=\"comment\"># 会把 Variable 中首次出现的 \"some\" 替换成 “A”。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 变量的截取</span></div><div class=\"line\">Length=7</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;Variable:0:Length&#125;</span></div><div class=\"line\"><span class=\"comment\"># 这样会仅返回变量值的前7个字符</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 变量的默认值</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;Foo:-\"DefaultValueIfFooIsMissingOrEmpty\"&#125;</span></div><div class=\"line\"><span class=\"comment\"># 对 null (Foo=) 和空串 (Foo=\"\") 起作用； 零（Foo=0）时返回0</span></div><div class=\"line\"><span class=\"comment\"># 注意这仅返回默认值而不是改变变量的值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 内置变量：</span></div><div class=\"line\"><span class=\"comment\"># 下面的内置变量很有用</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Last program return value: $?\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Script's PID: $$\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Number of arguments: <span class=\"variable\">$#</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Scripts arguments: <span class=\"variable\">$@</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Scripts arguments separated in different variables: <span class=\"variable\">$1</span> <span class=\"variable\">$2</span>...\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 读取输入：</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"What's your name?\"</span></div><div class=\"line\"><span class=\"built_in\">read</span> Name <span class=\"comment\"># 这里不需要声明新变量</span></div><div class=\"line\"><span class=\"built_in\">echo</span> Hello, <span class=\"variable\">$Name</span>!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 通常的 if 结构看起来像这样：</span></div><div class=\"line\"><span class=\"comment\"># 'man test' 可查看更多的信息</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$Name</span> -ne <span class=\"variable\">$USER</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Your name isn't your username\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Your name is your username\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 根据上一个指令执行结果决定是否执行下一个指令</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Always executed\"</span> || <span class=\"built_in\">echo</span> <span class=\"string\">\"Only executed if first command fails\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Always executed\"</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"Only executed if first command does NOT fail\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在 if 语句中使用 &amp;&amp; 和 || 需要多对方括号</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$Name</span> == <span class=\"string\">\"Steve\"</span> ] &amp;&amp; [ <span class=\"variable\">$Age</span> -eq 15 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"This will run if <span class=\"variable\">$Name</span> is Steve AND <span class=\"variable\">$Age</span> is 15.\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$Name</span> == <span class=\"string\">\"Daniya\"</span> ] || [ <span class=\"variable\">$Name</span> == <span class=\"string\">\"Zach\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"This will run if <span class=\"variable\">$Name</span> is Daniya OR Zach.\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 表达式的格式如下:</span></div><div class=\"line\"><span class=\"built_in\">echo</span> $(( 10 + 5 ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 与其他编程语言不同的是，bash 运行时依赖上下文。比如，使用 ls 时，列出当前目录。</span></div><div class=\"line\">ls</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 指令可以带有选项：</span></div><div class=\"line\">ls -l <span class=\"comment\"># 列出文件和目录的详细信息</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 前一个指令的输出可以当作后一个指令的输入。grep 用来匹配字符串。</span></div><div class=\"line\"><span class=\"comment\"># 用下面的指令列出当前目录下所有的 txt 文件：</span></div><div class=\"line\">ls -l | grep <span class=\"string\">\"\\.txt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重定向输入和输出（标准输入，标准输出，标准错误）。</span></div><div class=\"line\"><span class=\"comment\"># 以 ^EOF$ 作为结束标记从标准输入读取数据并覆盖 hello.py :</span></div><div class=\"line\">cat &gt; hello.py &lt;&lt; EOF</div><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\">from __future__ import print_function</div><div class=\"line\">import sys</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"#stdout\"</span>, file=sys.stdout)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"#stderr\"</span>, file=sys.stderr)</div><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">    <span class=\"built_in\">print</span>(line, file=sys.stdout)</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重定向可以到输出，输入和错误输出。</span></div><div class=\"line\">python hello.py &lt; <span class=\"string\">\"input.in\"</span></div><div class=\"line\">python hello.py &gt; <span class=\"string\">\"output.out\"</span></div><div class=\"line\">python hello.py 2&gt; <span class=\"string\">\"error.err\"</span></div><div class=\"line\">python hello.py &gt; <span class=\"string\">\"output-and-error.log\"</span> 2&gt;&amp;1</div><div class=\"line\">python hello.py &gt; /dev/null 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\"># &gt; 会覆盖已存在的文件， &gt;&gt; 会以累加的方式输出文件中。</span></div><div class=\"line\">python hello.py &gt;&gt; <span class=\"string\">\"output.out\"</span> 2&gt;&gt; <span class=\"string\">\"error.err\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 丢弃错误和标准输出，0 stdin, 1 stdout, 2 stderr</span></div><div class=\"line\">python hello.py &gt; /dev/null &gt; 2&gt;&amp;1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 覆盖 output.out , 追加 error.err 并统计行数</span></div><div class=\"line\">info bash <span class=\"string\">'Basic Shell Features'</span> <span class=\"string\">'Redirections'</span> &gt; output.out 2&gt;&gt; error.err</div><div class=\"line\">wc -l output.out error.err</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 运行指令并打印文件描述符 （比如 /dev/fd/123）</span></div><div class=\"line\"><span class=\"comment\"># 具体可查看： man fd</span></div><div class=\"line\"><span class=\"built_in\">echo</span> &lt;(<span class=\"built_in\">echo</span> <span class=\"string\">\"#helloworld\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 以 \"#helloworld\" 覆盖 output.out:</span></div><div class=\"line\">cat &gt; output.out &lt;(<span class=\"built_in\">echo</span> <span class=\"string\">\"#helloworld\"</span>)</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"#helloworld\"</span> &gt; output.out</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"#helloworld\"</span> | cat &gt; output.out</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"#helloworld\"</span> | tee output.out &gt;/dev/null</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 清理临时文件并显示详情（增加 '-i' 选项启用交互模式）</span></div><div class=\"line\">rm -v output.out error.err output-and-error.log</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 一个指令可用 $( ) 嵌套在另一个指令内部：</span></div><div class=\"line\"><span class=\"comment\"># 以下的指令会打印当前目录下的目录和文件总数</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"There are <span class=\"variable\">$(ls | wc -l)</span> items here.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 反引号 `` 起相同作用，但不允许嵌套</span></div><div class=\"line\"><span class=\"comment\"># 优先使用 $(  ).</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"There are `ls | wc -l` items here.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Bash 的 case 语句与 Java 和 C++ 中的 switch 语句类似:</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$Variable</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"comment\"># 列出需要匹配的字符串</span></div><div class=\"line\">    0) <span class=\"built_in\">echo</span> <span class=\"string\">\"There is a zero.\"</span>;;</div><div class=\"line\">    1) <span class=\"built_in\">echo</span> <span class=\"string\">\"There is a one.\"</span>;;</div><div class=\"line\">    *) <span class=\"built_in\">echo</span> <span class=\"string\">\"It is not null.\"</span>;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 循环遍历数组元素</span></div><div class=\"line\">Arr=(1 2 3)</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;Arr[*]&#125;</span> <span class=\"comment\">#或者是 Arr[@]</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$item</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 判断包含数组中元素</span></div><div class=\"line\">Arr=(1 2 3)</div><div class=\"line\">[[ <span class=\"variable\">$Arr</span>[@] =~ 2 ]] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"2 is in the array\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 你也可以遍历用空格分割的字符串列表</span></div><div class=\"line\">Str=<span class=\"string\">'name1 name2 name3'</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;Str[*]&#125;</span> <span class=\"comment\">#或者是 Str[@]</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$item</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 循环遍历给定的参数序列:</span></div><div class=\"line\"><span class=\"comment\"># 变量$Variable 的值会被打印 3 次。</span></div><div class=\"line\"><span class=\"keyword\">for</span> Variable <span class=\"keyword\">in</span> &#123;1..3&#125;</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$Variable</span>\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 或传统的 “for循环” ：</span></div><div class=\"line\"><span class=\"keyword\">for</span> ((a=1; a &lt;= 3; a++))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 也可以用于文件</span></div><div class=\"line\"><span class=\"comment\"># 用 cat 输出 file1 和 file2 内容</span></div><div class=\"line\"><span class=\"keyword\">for</span> Variable <span class=\"keyword\">in</span> file1 file2</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    cat <span class=\"string\">\"<span class=\"variable\">$Variable</span>\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 或作用于其他命令的输出</span></div><div class=\"line\"><span class=\"comment\"># 对 ls 输出的文件执行 cat 指令。</span></div><div class=\"line\"><span class=\"keyword\">for</span> Output <span class=\"keyword\">in</span> $(ls)</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    cat <span class=\"string\">\"<span class=\"variable\">$Output</span>\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># while 循环：</span></div><div class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"literal\">true</span> ]</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"loop body here...\"</span></div><div class=\"line\">    <span class=\"built_in\">break</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 你也可以使用函数</span></div><div class=\"line\"><span class=\"comment\"># 定义函数：</span></div><div class=\"line\"><span class=\"keyword\">function</span> foo ()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Arguments work just like script arguments: <span class=\"variable\">$@</span>\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"And: <span class=\"variable\">$1</span> <span class=\"variable\">$2</span>...\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"This is a function\"</span></div><div class=\"line\">    <span class=\"built_in\">return</span> 0</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更简单的方法</span></div><div class=\"line\">bar ()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Another way to declare functions!\"</span></div><div class=\"line\">    <span class=\"built_in\">return</span> 0</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 调用函数</span></div><div class=\"line\">foo <span class=\"string\">\"My name is\"</span> <span class=\"variable\">$Name</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 有很多有用的指令需要学习:</span></div><div class=\"line\"><span class=\"comment\"># 打印 file.txt 的最后 10 行</span></div><div class=\"line\">tail -n 10 file.txt</div><div class=\"line\"><span class=\"comment\"># 打印 file.txt 的前 10 行</span></div><div class=\"line\">head -n 10 file.txt</div><div class=\"line\"><span class=\"comment\"># 将 file.txt 按行排序</span></div><div class=\"line\">sort file.txt</div><div class=\"line\"><span class=\"comment\"># 报告或忽略重复的行，用选项 -d 打印重复的行</span></div><div class=\"line\">uniq -d file.txt</div><div class=\"line\"><span class=\"comment\"># 打印每行中 ',' 之前内容</span></div><div class=\"line\">cut -d <span class=\"string\">','</span> -f 1 file.txt</div><div class=\"line\"><span class=\"comment\"># 将 file.txt 文件所有 'okay' 替换为 'great', （兼容正则表达式）</span></div><div class=\"line\">sed -i <span class=\"string\">'s/okay/great/g'</span> file.txt</div><div class=\"line\"><span class=\"comment\"># 将 file.txt 中匹配正则的行打印到标准输出</span></div><div class=\"line\"><span class=\"comment\"># 这里打印以 \"foo\" 开头, \"bar\" 结尾的行</span></div><div class=\"line\">grep <span class=\"string\">\"^foo.*bar$\"</span> file.txt</div><div class=\"line\"><span class=\"comment\"># 使用选项 \"-c\" 统计行数</span></div><div class=\"line\">grep -c <span class=\"string\">\"^foo.*bar$\"</span> file.txt</div><div class=\"line\"><span class=\"comment\"># 如果只是要按字面形式搜索字符串而不是按正则表达式，使用 fgrep (或 grep -F)</span></div><div class=\"line\">fgrep <span class=\"string\">\"^foo.*bar$\"</span> file.txt </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 以 bash 内建的 'help' 指令阅读 Bash 自带文档：</span></div><div class=\"line\"><span class=\"built_in\">help</span></div><div class=\"line\"><span class=\"built_in\">help</span> <span class=\"built_in\">help</span></div><div class=\"line\"><span class=\"built_in\">help</span> <span class=\"keyword\">for</span></div><div class=\"line\"><span class=\"built_in\">help</span> <span class=\"built_in\">return</span></div><div class=\"line\"><span class=\"built_in\">help</span> <span class=\"built_in\">source</span></div><div class=\"line\"><span class=\"built_in\">help</span> .</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用 man 指令阅读相关的 Bash 手册</span></div><div class=\"line\">apropos bash</div><div class=\"line\">man 1 bash</div><div class=\"line\">man bash</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用 info 指令查阅命令的 info 文档 （info 中按 ? 显示帮助信息）</span></div><div class=\"line\">apropos info | grep <span class=\"string\">'^info.*('</span></div><div class=\"line\">man info</div><div class=\"line\">info info</div><div class=\"line\">info 5 info</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 阅读 Bash 的 info 文档：</span></div><div class=\"line\">info bash</div><div class=\"line\">info bash <span class=\"string\">'Bash Features'</span></div><div class=\"line\">info bash 6</div><div class=\"line\">info --apropos bash</div></pre></td></tr></table></figure>\n<h1 id=\"调试技巧\"><a href=\"#调试技巧\" class=\"headerlink\" title=\"调试技巧\"></a>调试技巧</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用xtrace选项在运行中打印执行命令（命令前面带+更清楚）</span></div><div class=\"line\"><span class=\"built_in\">set</span> -x</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'see me'</span></div><div class=\"line\"><span class=\"built_in\">set</span> +x</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'command is not printed'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 捕获调试信号量</span></div><div class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">'echo \"[CMD] $BASH_COMMAND\"'</span> DEBUG</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 甚至可以单步调试</span></div><div class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">'(read -p \"[$0 : $LINENO] $BASH_COMMAND ?\")'</span> DEBUG</div></pre></td></tr></table></figure>","categories":[],"tags":["collection","linux"]},{"title":"不折腾会死前端系列（一）：拂晓","url":"https://vincenthou.github.io/2016/11/13/不折腾会死前端系列（一）：拂晓/","content":"<p>最近决定立下了个目标，看能坚持周更文章多久，上周回家就搁置了一周，这周接上，感觉写文章有人看，还能给点个赞还是件蛮有成就感的事情，感谢 @CraryPrimitiveMan 同学 :smile: 。其实对自己所了解知识也是很好的反刍过程。恢复单身狗之后有更多的时间思考和学习，开始学习摄影，捡起来绘画，感觉其实也是一件满惬意的事情。毕竟生活是自己的，你选择把她过成什么样子，她就会是什么样子。最近做后端的事情比较多，觉得梳理自己对前端的认知和思考，也是对自己之前积累的阶段性总结吧。当然第一篇就先水一下，主要是定一个大纲出来，主要是这几个方面吧:</p>\n<ul>\n<li>我整理的开发书单</li>\n<li>主流构建工具</li>\n<li>主流开发框架</li>\n<li>开发规范的思考</li>\n<li>模块化开发</li>\n<li>常用模式</li>\n<li>脸蛋和用户体验</li>\n<li>前端的图形开发能力</li>\n<li>绚丽的动画</li>\n<li>手机页面开发</li>\n<li>跨端开发的手段</li>\n<li>开发调试的思路和技巧</li>\n<li>自动化测试</li>\n<li>安全概念和防范</li>\n<li>性能优化</li>\n<li>监控系统</li>\n<li>SEO和语义化</li>\n<li>持续集成的方案</li>\n<li>前后端集成解决方案</li>\n<li>nodejs和所谓全栈</li>\n<li>前端团队的管理</li>\n</ul>\n<p>这里说明下，没感觉自己在前端方面有多么厉害，其实上面的每一点单独拿出来都能长篇大论，但这不是我的初衷，只是希望通过这样的方式，整理一些资料也梳理下自己的思路，如果你不巧看到这些文章，我自知总有挂一漏万之处，但请勿喷，如果只言片语能激荡出你的一些思考和讨论，我会感觉荣幸之至～</p>\n<p>刚进公司大概半年接触到前端的概念，也知道了有FE这种方向，当时还是很新的理念（大概4年多前），前端这个职位在大公司刚刚形成，在其他公司里还没有那么明确的划分。当时最火的算是AJAX的概念，google的gmail是被拿出来说的最典型的案例了，当时还是jquery为王的时代，用它你可以把DOM把玩的666，前端的工作被大家包括很多开发理解为切页面的简单工作（现在这种误解尚存），上海还是有一万一平米的房子的… :sweat_smile: </p>\n<p>由于大学是学电信的，用的最多的是C, C++，觉得hello world真的蛮简单的，简单的几行代码感觉就解锁了一个全新的世界，后来工作原因也接触了其他语言，但感觉只有前端的hello worl是简单的。你只需要打开一个文本编辑器，写下hello world，然后存为<code>.html</code>后缀的文件，双击打开就看到那句咒语一样的文字。当然后来你会慢慢知道，应该写<code>html</code>,<code>head</code>,<code>body</code>，现代浏览器帮你加上这些才让你那鲁莽的问候展示出来。你可以在不刷新浏览器的情况下，通过开发者工具把百度首页给改成个人主页，满足下自己的虚荣心 :joy:。你也可以用JS操纵个方块飞来飞去就感觉自己棒棒嗒。</p>\n<p>前端是离用户最近的一层，它的所见即所得的体验把不少大好青年坑进来，他们有的是工作需要，他们有的是兴趣使然，很庆幸自己是兼而有之。所谓一入侯门深似海，进去了才知道水有多深，其实在当时前端的工作不被重视也是情有可原的，当时的前端工作主要集中在做静态页面，页面特效，表单提交，兼容各个浏览器特性，很多时候需求都是由开发工程师直接实现的，不存在什么前端的工作。我觉的<strong>社会分工的形成意味着一个职业方向的专业化</strong>，随着这几年前端的快速发展，前端的内涵和外延都在惊人的发生着变革。很多人都感慨几个月不做前端就感觉自己不会做前端了，前一段比较火的<a href=\"http://www.tuicool.com/articles/R3uEJ3r\" target=\"_blank\" rel=\"external\">这篇文章</a>，把这种体验描绘得淋漓尽致。其实这是生态繁荣的一种表现，所谓天下大势分久必合，合久必分，百家争鸣最终会让标准化落地，但是想我为这个系列想的题目一样，前端真的是一个积极的社区（不折腾会死），各种框架和工具层出不穷，大家喜欢重复的造轮子和弃轮子，总是有新的东西出来，总是有更好的思路和方法为我们的开发带来便利。</p>\n<p>前端工作地位的提升有一部分也要感谢后端开发的复杂性提升，为什么这么说呢？现在很多前端做的事情原来是由后端来做的，所以在jquery时代之后出现了backbone这样的MVC框架就是从后端思路的借鉴，也是说后端复杂度的提升，让他们放权给前端包揽了所有展示层的工作，后端只是提供数据接口，他们跑去研究CAP, ACID, BASE…等等来保证数据接口的稳定和快速响应。由于前端最主要的编程语言是JS，这些年端能力的拓展给了JS实现各种平台开发的可能性，记得那句话是</p>\n<blockquote>\n<p>所有能用JS完成的程序最终都会用JS重写</p>\n</blockquote>\n<p>世界上最好的语言已经不是PHP咯 :grimacing: 你如果能够熟练掌握JS，再加上平台开发工具的掌握，就可以自诩为一个所谓的<code>全栈工程师</code>了。最近用知乎比较多，总会被人问一些诸如<code>怎样快速速成前端</code>,<code>前端工作是不是已经饱和</code>,<code>前端为什么不受重视</code>这些问题，每次想吐槽都压了压还是耐心得解答一番。其实感觉我们很多时候产生的迷茫来源于不自知，我们自己的定位局限了自己的眼界和思路。一个优秀的前端工程师首先还是应该把自己定位为一个合格的工程师，没有谁应该无条件的仰视你，所谓尊重都是自己给的，你能快速高效解决问题，自然别人会高看一眼，你掌握解决问题的方法和能力越纯熟，饱和的市场永远有你的一席之地。</p>\n<p>前端是个欣欣向荣的行业，很多思想流进来，因为这个行业还年轻，大量的借鉴传统的开发经验裁剪变通都汇流入海变成了看到前端现在的样子，什么时候我们这个职业有大量的思想流出去，才是前端真正成熟的时候。很荣幸在这个最好的时代也是最坏的时代，见证了前端的潮起潮落，也让我遇见一样热爱前端的你们。最后当然希望这个系列不会无疾而终吧，加油!</p>\n","categories":[],"tags":["blog","frontend"]},{"title":"yarn尝鲜和一些想法","url":"https://vincenthou.github.io/2016/10/23/yarn尝鲜和一些想法/","content":"<p>最近前端圈最火的事情莫过于yarn的横空出世了，从10.11号知道了这个事情看着事情升温和<a href=\"https://github.com/yarnpkg/yarn\" target=\"_blank\" rel=\"external\">这个库</a>的star被刷上万，不得不说yarn产品做的好，不如FB广告做的好，有这么一个亲爹背书，这关注度和流行度真的是妥妥的。</p>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><p>言归正传，这么一个新东西出来肯定是要解决问题的，从官网上宣传上来看，主要集中在这三点:</p>\n<ul>\n<li><strong>超快:</strong> 下过的包直接从本地拷贝</li>\n<li><strong>超安全:</strong> 安装一个包之前会先用 checksums 来验证</li>\n<li><strong>超可靠:</strong> 默认的lock机制，实现一次lock到处安装</li>\n</ul>\n<p>其实最有吸引力和解决工程痛点的莫过于速度和可靠性了。一般工程开发都会把node_modules忽略提交(当然出于加速部署的角度，会做出妥协)，每次部署会重新从网络安装所有的包。这些依赖的包由于可能使用了宽泛的版本控制声明(大多数情况还都是这样)，每次重新安装都可能会生成不一样的结果，这种不一样的结果可能是好的结果(修复bug或者引入新特性)，也可能是不好的结果(新的bug或者不向前兼容的改动)。这两点在工程实施中是大家都会遇到的头疼问题，也衍生出来各自的解决方案。</p>\n<ul>\n<li>我们会把node_modules提交，只有加入新的包或者版本更新的时候才会增量下载，之前安装过的包直接使用版本控制系统中的包。</li>\n<li>使用个淘宝镜像，使用npm shrinkwrap或者<a href=\"https://github.com/uber/npm-shrinkwrap\" target=\"_blank\" rel=\"external\">uber npm-shrinkwrap</a>锁定版本。</li>\n<li>因为cnpm不支持shrinkwrap，所以不适用于一致性的思路，安装真的很快，但是也有不锁包的观点下面有提到</li>\n</ul>\n<p>个人觉得之所以yarn这么收到推崇，从纯工具意义上来说是因为它集中解决了这两个痛点，提供出来简单易用的命令，不用你操心这些细节。同时这个工具带来的意义我感觉可以用函数式编程中的纯函数的概念来表达，就是同样的输入可以高效的产生一致性的输出。看起来一切都很好，可是真的是这样吗？</p>\n<h1 id=\"不一样的声音\"><a href=\"#不一样的声音\" class=\"headerlink\" title=\"不一样的声音\"></a>不一样的声音</h1><p>首先从快这个角度来看，单纯比较yarn和npm，yarn是真的块，没有开发上的历史包袱，利用缓存的效用没得说。然而，有个叫<a href=\"https://github.com/cnpm/cnpm\" target=\"_blank\" rel=\"external\">cnpm</a>的工具被默默的忽略了，yarn跟cnpm的安装包速度不论算不算缓存，cnpm都略胜一筹，可以参考下面贺老在知乎上的回答，本地亲测带有编译行为的项目，稳定性上cnpm还更强一点，换了淘宝镜像yarn重新安装几次重试才能成功，而cnpm每次都可以稳定安装而且速度较快。</p>\n<p>其次从一致性的角度来看，诚然使用npm shrinkwrap强制要求开发每次加包都同步是不靠谱的，但是我们真的需要完全的强一致性吗？给我们带来问题的其实是非一致性的负面，其实我们有时候也是需要其正面的部分，比如小版本bug修复和新功能增加，这样也不至于我们在需要大版本号升级的时候更加痛苦。消除其负面部分死马提出的观点是加强人工干预，也就是提高依赖包的审核力度，保证依赖链的健康性，当然实际落地需要所有开发者有比较高的素养和判断力，在跨团队情况下也有其局限性和实际操作的尴尬。</p>\n<h1 id=\"实际体验\"><a href=\"#实际体验\" class=\"headerlink\" title=\"实际体验\"></a>实际体验</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>从npm迁移成使用yarn，直接用npm安装(保证你的nodejs是较新的版本)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yarn</div><div class=\"line\">yarn --version</div></pre></td></tr></table></figure>\n<p>如果连npm都没有，yarn也提供了各种平台直接的<a href=\"https://yarnpkg.com/en/docs/install\" target=\"_blank\" rel=\"external\">安装方式</a></p>\n<h2 id=\"设置镜像\"><a href=\"#设置镜像\" class=\"headerlink\" title=\"设置镜像\"></a>设置镜像</h2><p>在国内没代理就必须要靠镜像了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn config set registry &apos;https://registry.npm.taobao.org&apos;</div></pre></td></tr></table></figure>\n<h2 id=\"常用命令对应关系\"><a href=\"#常用命令对应关系\" class=\"headerlink\" title=\"常用命令对应关系\"></a>常用命令对应关系</h2><ul>\n<li>yarn / yarn install -&gt; npm install</li>\n<li>yarn add -&gt; npm install –save</li>\n<li>yarn remove -&gt; npm uninstall –save</li>\n<li>yarn add –dev -&gt; npm install –save-dev</li>\n<li>yarn upgrade -&gt; npm update –save</li>\n<li>yarn global add -&gt; npm install -g<h2 id=\"一些小优化\"><a href=\"#一些小优化\" class=\"headerlink\" title=\"一些小优化\"></a>一些小优化</h2></li>\n<li>交互界面更加清新友好，加了很多emoji的icon，报错信息更加清楚</li>\n<li>提供了yarn why命令查看某个模块被依赖的关系和占用空间信息</li>\n<li>yarn run命令提供了交互式命令方式，在没有指定run哪条命令的时候列出可运行命令让你选择</li>\n<li>yarn ls可以清晰列出项目的依赖关系树<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1></li>\n</ul>\n<p>yarn结合工程痛点重写了npm的功能并根据实际需要做了扩展，所谓不破不立，积重难返，作为一致性思路的工具真的解决了很多npm的问题，作为不代理环境的安装只是改变了registry，对于依赖于国外源包的编译需求不能很好的解决(也许淘宝会fork一个跟cnpm一样的思路加上各种镜像源)。所以要使用一方面是接受一致性的思路和这种思路下的负面: 忽略小版本优化和bug修复，一方面最好是有代理。由于构建的加速依赖于缓存，如果使用docker部署需要设置好共享的volume。个人项目使用cnpm更方便，结合一些特殊方案消除版本失控影响也可以用于生产环境(提交node_modules或者提高一级依赖包质量)。yarn还处于初期，还有各种问题需要解决，这几天issue就上300多了，还有待发展，只能说前途是光明的，道路是曲折的，在前进中有曲折，在曲折中向前进，前端会越来越好！</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22892675\" target=\"_blank\" rel=\"external\">yarn, 不是又一个 npm 第三方客户端</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4NjE3MDg4OQ==&amp;mid=2650963709&amp;idx=1&amp;sn=db49ef1793610c178792785bd7d5241f&amp;chksm=843a129bb34d9b8d3316343c60e9b3fd0f6da3d5c36da639d3d3b9f98362497689b413a5211a&amp;mpshare=1&amp;scene=1&amp;srcid=1022htBPlVk3boobjgWA3HZ6&amp;key=c3acc508db720376541159bb6b3a5280a5d4ece0269dd592d76564d31639a178c48858c75c334bb04639b31a5df33cac&amp;ascene=0&amp;uin=MjQ4MjAyNTY0MQ%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.10.5+build%2814F27%29&amp;version=11020012&amp;pass_ticket=s2NY74QF%2ByBCzsX7cAwZKBL3Usgfs6BoJilNyFpO7iKndv%2BOjsOS%2BpnRYUfJwpCa\" target=\"_blank\" rel=\"external\">Facebook推出新的JavaScript模块管理器：Yarn</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22967139\" target=\"_blank\" rel=\"external\">新的 js 包管理工具 yarn 解决了什么问题？</a></li>\n<li><a href=\"http://www.zhihu.com/question/51502849/answer/126133407\" target=\"_blank\" rel=\"external\">如何评价Facebook推出的JavaScript模块管理器yarn - 贺师俊的回答</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22934066\" target=\"_blank\" rel=\"external\">为什么我不使用 shrinkwrap（lock）</a></li>\n</ul>\n","categories":[],"tags":["blog","frontend","build"]},{"title":"docker 常用命令收集","url":"https://vincenthou.github.io/2016/09/12/docker-常用命令收集/","content":"<ul>\n<li>列出所有container (包括运行中和停止的)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps -a</div></pre></td></tr></table></figure>\n<ul>\n<li>进入一个运行中容器的bash</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it container bash</div></pre></td></tr></table></figure>\n<ul>\n<li>直接启动或者停止一个container</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker start container</div><div class=\"line\">docker stop container</div></pre></td></tr></table></figure>\n<ul>\n<li>加载docker image实例化一个container并且打开一个container的交互式命令行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it image bash</div></pre></td></tr></table></figure>\n<ul>\n<li>加载docker image实例化一个container映射宿主机8081端口到container的80端口</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8081:80 image</div></pre></td></tr></table></figure>\n<ul>\n<li>在运行中的container里面执行命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec container command</div></pre></td></tr></table></figure>\n<ul>\n<li>依附到一个通过 -d 参数运行的容器上</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker attach container</div></pre></td></tr></table></figure>\n<ul>\n<li>查询docker内部端口号对应的host端口号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker port container inner_port_number</div></pre></td></tr></table></figure>\n<ul>\n<li>使用尾部追加的方式查看docker在daemon模式下控制台输出的日志</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker logs -f container</div></pre></td></tr></table></figure>\n<ul>\n<li>查看容器中运行的进程信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker top container</div></pre></td></tr></table></figure>\n<ul>\n<li>使用template展示容器和镜像的配置信息和运行状态信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect -f &apos;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&apos; container</div></pre></td></tr></table></figure>\n<ul>\n<li>之前启动过的容器会根据名字留下记录，可以重新启动（重新实例化容器的时候如果指定了名称参数，因此会因为同名而报错，需要手动rm）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker start old_container</div></pre></td></tr></table></figure>\n<ul>\n<li>强制删除运行中的容器，相当于先stop再remove</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rm -f container</div></pre></td></tr></table></figure>\n<ul>\n<li>通过当前文件夹下Dockerfile构建image并且打上一个tag</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t tag_name .</div></pre></td></tr></table></figure>\n<ul>\n<li>拉取某个digest的image</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull image/name@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf</div></pre></td></tr></table></figure>\n<ul>\n<li>为一个运行中的容器添加新的网络连接（可以把一个容器连接到多个自定义网络，默认是default的bridge模式）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker network connect my-bridge-network container</div></pre></td></tr></table></figure>\n<ul>\n<li>从主机上文件系统路径映射到容器中文件系统中（通过覆盖不删除的方式仿mount的行为）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</div></pre></td></tr></table></figure>\n<ul>\n<li>查看由于删除的容器的时候没有指定 -v 参数导致悬挂的volume</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker volume ls -f dangling=true</div></pre></td></tr></table></figure>\n<ul>\n<li>删除悬挂的容器volume</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker volume rm valume_name</div></pre></td></tr></table></figure>\n<ul>\n<li>挂载dbstore镜像，将/dbdata的数据打包放在backup目录下面（也就是当前目录下面），完成后删除镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker create -v /dbdata --name dbstore training/postgres /bin/true</div><div class=\"line\">docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</div></pre></td></tr></table></figure>\n<ul>\n<li>解压到新的dbstore2对应的volume容器中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c &quot;cd /dbdata &amp;&amp; tar xvf /backup/backup.tar --strip 1&quot;</div></pre></td></tr></table></figure>\n","categories":[],"tags":["collection","linux","docker"]},{"title":"前后台集成开发方案的一些思考","url":"https://vincenthou.github.io/2015/12/22/前后台集成开发方案的一些思考/","content":"<p>首先自我检讨一下，最近一直忙于业务开发（都是借口 :no_good: ）已经有好长时间没有写文章了，现在团队里面为了提高开发的效率，也是提高大家技术深度上的积累，采用了前后端分离的开发方式。这本不是什么新鲜的模式：前端使用AJAX异步跟服务器进行数据交互，后端开发专注于业务逻辑的实现，负责产生业务model，前后端的集成通过RESTful API实现。在实践开发中遇到了些问题，通过搜索找到些通用的解决方案，再此整理下。</p>\n<h1 id=\"前后端集成的石器时代\"><a href=\"#前后端集成的石器时代\" class=\"headerlink\" title=\"前后端集成的石器时代\"></a>前后端集成的石器时代</h1><p>现在项目里面开发的一般流程会是这样，在拿到产品团队给出的story，我会拆分成可实现的细粒度前后端任务，根据情况分配给前后端开发的同事实现。在开发实际功能时，会要求后端开发的同事提供API定义的文档（无文档不编程），前端的同事在这个间隙后去拆解页面结构，实现静态页面的实现。在后端开发的同事完成API文档之后，前端的同事根据文档自己在开发页面的时候在代码里mock静态的JSON对象，同时后端的同事开始实现实际的业务代码。如果没有变化一切看上去都还很美好，但是这个世界上唯一不变的东西就是变化了~</p>\n<h1 id=\"前端开发的痛点\"><a href=\"#前端开发的痛点\" class=\"headerlink\" title=\"前端开发的痛点\"></a>前端开发的痛点</h1><ol>\n<li>在后端开发完成API文档定义之后需要手动mock实际生产环境不需要的假数据</li>\n<li>如果后端开发尚未基本完成前，如果后端有字段结构的调整，前端开发都需要重新更改mock的数据</li>\n<li>在后端开发完成后，如果有需求上的变动，前端开发都需要很被动的等待后端业务代码实际调整后（或者口头约定后）才能集成调试业务调整后的前端数据结构<h1 id=\"后端开发的痛点\"><a href=\"#后端开发的痛点\" class=\"headerlink\" title=\"后端开发的痛点\"></a>后端开发的痛点</h1></li>\n<li>需要认真主动维护代码和文档的同步，经常由于两者的不同步又没有及时通知给前端，会导致功能挂掉而负担责任</li>\n<li>对于自己开发的业务代码没有把控，需要在自己的postman工具中收集一堆的接口调试用例，完成后通过人工测试的方式容易出错</li>\n<li>一些通用的测试用例仍然需要自己手动编写测试脚本，复杂的业务测试不好实施（现在这块做的不好，测试完全靠人工 :disappointed: ）<h1 id=\"理想的集成方案\"><a href=\"#理想的集成方案\" class=\"headerlink\" title=\"理想的集成方案\"></a>理想的集成方案</h1></li>\n</ol>\n<p>后端开发只需要维护一份文档（markdown, yml或者JSON），这份文档的作用跟之前写的文档没有差别，可能只是格式或者语义上的转换，但这份文档应该是对前端开发和后端开发都有额外产出的：</p>\n<ul>\n<li>前端开发：应该能够使用命令行工具打开一个本地的mock服务器，在前端统一的AJAX请求拦截器里面能够根据临时配置（例如一个debug的bool值）切换对接服务器的域名（本地就是localhost, 线上就是实际的域名），数据接口的路径不变。</li>\n<li>后端开发：应该能够使用命令行工具根据文档自动生成通用的自动化测试用例，差异化的自动化测试用例支持手工编写（更好的是能集成进git的pre-commit，test不过不能提交或者合并），工具可以在实际部署的时候生成在线文档并且能够在线调试（省的还要自己维护一堆的postman接口）。<h1 id=\"一些开源技术方案的收集\"><a href=\"#一些开源技术方案的收集\" class=\"headerlink\" title=\"一些开源技术方案的收集\"></a>一些开源技术方案的收集</h1><h2 id=\"API-设计\"><a href=\"#API-设计\" class=\"headerlink\" title=\"API 设计\"></a>API 设计</h2></li>\n<li><a href=\"https://github.com/interagent/http-api-design\" target=\"_blank\" rel=\"external\">HTTP API design</a></li>\n<li><a href=\"https://github.com/ZhangBohan/http-api-design-ZH_CN\" target=\"_blank\" rel=\"external\">HTTP API design chinese</a></li>\n<li><a href=\"https://github.com/bolasblack/http-api-guide\" target=\"_blank\" rel=\"external\">HTTP API guide</a><h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2></li>\n<li><a href=\"https://github.com/json-api/json-api\" target=\"_blank\" rel=\"external\">JSON API</a></li>\n<li><a href=\"https://github.com/mikekelly/hal_specification\" target=\"_blank\" rel=\"external\">HAL spec</a><h2 id=\"文档定义\"><a href=\"#文档定义\" class=\"headerlink\" title=\"文档定义\"></a>文档定义</h2></li>\n<li><a href=\"https://github.com/apiaryio/api-blueprint\" target=\"_blank\" rel=\"external\">api-blueprint</a></li>\n<li><a href=\"https://github.com/apidoc/apidoc\" target=\"_blank\" rel=\"external\">apidoc</a></li>\n<li><a href=\"https://github.com/interagent/prmd\" target=\"_blank\" rel=\"external\">prmd</a><h2 id=\"Mock-数据\"><a href=\"#Mock-数据\" class=\"headerlink\" title=\"Mock 数据\"></a>Mock 数据</h2></li>\n<li><a href=\"https://github.com/nuysoft/Mock\" target=\"_blank\" rel=\"external\">Mock</a></li>\n<li><a href=\"https://github.com/Marak/faker.js\" target=\"_blank\" rel=\"external\">fake.js</a><h2 id=\"JSON-server\"><a href=\"#JSON-server\" class=\"headerlink\" title=\"JSON server\"></a>JSON server</h2></li>\n<li><a href=\"https://github.com/typicode/jsonplaceholder\" target=\"_blank\" rel=\"external\">jsonplaceholder</a></li>\n<li><a href=\"https://github.com/typicode/json-server\" target=\"_blank\" rel=\"external\">JSON server</a><h2 id=\"现成的集成方案\"><a href=\"#现成的集成方案\" class=\"headerlink\" title=\"现成的集成方案\"></a>现成的集成方案</h2></li>\n<li><a href=\"https://github.com/swagger-api\" target=\"_blank\" rel=\"external\">swagger</a></li>\n<li><a href=\"https://github.com/thx/RAP\" target=\"_blank\" rel=\"external\">RAP</a></li>\n<li><a href=\"http://nordicapis.com/top-specification-formats-for-rest-apis/\" target=\"_blank\" rel=\"external\">几种主流API定义方式对比</a><h2 id=\"基于文档的测试框架\"><a href=\"#基于文档的测试框架\" class=\"headerlink\" title=\"基于文档的测试框架\"></a>基于文档的测试框架</h2></li>\n<li><a href=\"https://github.com/apiaryio/dredd\" target=\"_blank\" rel=\"external\">dredd 配合 api-blueprint</a><h2 id=\"性能测试框架\"><a href=\"#性能测试框架\" class=\"headerlink\" title=\"性能测试框架\"></a>性能测试框架</h2></li>\n<li><a href=\"https://github.com/jeffbski/bench-rest\" target=\"_blank\" rel=\"external\">Bench REST</a></li>\n<li><a href=\"https://github.com/tsenart/vegeta\" target=\"_blank\" rel=\"external\">Go vegeta</a><h1 id=\"几种流行的API定义方式\"><a href=\"#几种流行的API定义方式\" class=\"headerlink\" title=\"几种流行的API定义方式\"></a>几种流行的API定义方式</h1><h2 id=\"RAML-0-8-1-0\"><a href=\"#RAML-0-8-1-0\" class=\"headerlink\" title=\"RAML (0.8, 1.0)\"></a>RAML (0.8, 1.0)</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3></li>\n</ul>\n<p>最早的RAML项目开发开始于2013年9月，规范是由多家公司共同提议出来的，还成立了工作组，其中包括Box, Paypal, Cisco等公司的技术负责人。有意思的是，在github上基于RAML比较活跃的组织Mulesoft，最开始的时候是使用swagger的，但是觉得swagger更适合从头定义新的API，不适合定义现有的API就放弃了swagger。</p>\n<h3 id=\"定义方式\"><a href=\"#定义方式\" class=\"headerlink\" title=\"定义方式\"></a>定义方式</h3><ul>\n<li>语言支持：支持YAML定义</li>\n<li>授权方式：使用securitySchemes定义授权方式，在securedBy属性中添加需要的权限类型数组，再通过把securedBy属性全局添加或者添加到资源上来控制API的授权方式</li>\n<li>有用的特性：高度的抽象能力和复用能力是RAML定义的最大特色了</li>\n<li>抽象方式：通过层级化的定义方式来对资源进行分组，顶级的资源名称作为分组名称（影响到文档生成的展现），提供了对于模型定义的抽象机制，包括resourceTypes和traits, 文档中定义的很多实体支持拆分成独立的文件（docs, examples, resourceTypes, schemas, securitySchemes, traits），在主文档中通过include引入，方便抽象重复的行为， <strong>适合于大型工程的API定义</strong><h3 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h3></li>\n<li>文档编辑工具：<a href=\"http://apiworkbench.com/\" target=\"_blank\" rel=\"external\">API Workbench</a> <a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">ATOM</a>插件，支持0.8和1.0版本，支持生成脚手架，语法高亮，自动补全，错误提示（外链文档会产生不必要的错误提示，应该是都当成单一文档定义方式处理了），离线预览API Console（文档工具）。<a href=\"https://github.com/mulesoft/api-designer\" target=\"_blank\" rel=\"external\">API designer</a>在本地运行一个web based的文档编辑器，仅支持0.8版本的语法。</li>\n<li>文档生成工具：<a href=\"https://github.com/mulesoft/api-console\" target=\"_blank\" rel=\"external\">API Console</a>能够生成在线可交互的文档，使用angluar框架实现，支持作为directive引用，也支持作为iframe内嵌，可以直接调用线上服务测试（类swagger-ui的try it）。<a href=\"https://github.com/raml2html/raml2html\" target=\"_blank\" rel=\"external\">raml2html</a> 简洁清新，但是功能略简单，仅仅支持文档的查看，但是可以自己定义模板</li>\n<li>代码生成工具：貌似暂时没有官方统一的代码生成工具，找到写社区的，例如<a href=\"https://github.com/EconomistDigitalSolutions/ramlapi\" target=\"_blank\" rel=\"external\">go</a>，还可以使用<a href=\"https://github.com/mulesoft/osprey\" target=\"_blank\" rel=\"external\">osprey</a>这种工具把RAML定义的规则作为中间件引入</li>\n<li>接口验证工具：<a href=\"https://github.com/cybertk/abao/\" target=\"_blank\" rel=\"external\">abao</a>基于在文档中定义的schema部分来验证待测试API的有效性，在单个请求前后的有hook，在全部测试的前后也有hook，支持指定运行若干满足文件名定义规则的hook</li>\n<li>接口模拟工具：<a href=\"https://github.com/RePoChO/raml-mocker\" target=\"_blank\" rel=\"external\">raml-mocker</a>支持正常基于定义的mock，同时也支持使用format定义自定义类型（有点像swagger文档定义的类型扩展，但更灵活些）<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3></li>\n<li><a href=\"http://raml.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"https://github.com/raml-org/raml-spec/blob/master/raml-0.8.md\" target=\"_blank\" rel=\"external\">0.8 定义规范</a></li>\n<li><a href=\"http://docs.raml.org/specs/1.0/\" target=\"_blank\" rel=\"external\">1.0 定义规范</a> 刚出，工具链支持不完善</li>\n<li><a href=\"https://github.com/raml-apis\" target=\"_blank\" rel=\"external\">Raml APIs samples</a></li>\n<li><a href=\"http://raml.org/projects/projects\" target=\"_blank\" rel=\"external\">社区工具集</a></li>\n<li><a href=\"https://github.com/mulesoft\" target=\"_blank\" rel=\"external\">主要参与贡献组织 mulesoft</a><h2 id=\"Swagger-1-0-1-2-2-0\"><a href=\"#Swagger-1-0-1-2-2-0\" class=\"headerlink\" title=\"Swagger (1.0 - 1.2, 2.0)\"></a>Swagger (1.0 - 1.2, 2.0)</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3></li>\n</ul>\n<p>最早的swagger项目开发开始于2011年7月，规范和框架的实现来自于Wordnik自己的使用场景，后来变成了完全的开源项目，2016年初已经捐给了<a href=\"https://openapis.org/\" target=\"_blank\" rel=\"external\">Open API Initiative (OAI)</a>，改名叫OpenAPI Sepcification，有了更官方的组织，github上的关注度<a href=\"https://github.com/search?utf8=%E2%9C%93&amp;q=swagger&amp;type=Repositories&amp;ref=searchresults\" target=\"_blank\" rel=\"external\">相对比较高</a></p>\n<h3 id=\"定义方式-1\"><a href=\"#定义方式-1\" class=\"headerlink\" title=\"定义方式\"></a>定义方式</h3><ul>\n<li>语言支持：支持JSON和YAML定义</li>\n<li>授权方式：使用securityDefinitions定义授权方式，在编辑文档和渲染出的文档中应用，支持对于API级别使用security定义更细粒度的权限</li>\n<li>有用的特性：字段类型定义中除了正常支持JSON-schema之外还提供了format的修饰符表示<a href=\"http://swagger.io/specification/#dataTypeFormat\" target=\"_blank\" rel=\"external\">更具体的类型信息</a></li>\n<li>抽象方式：可以使用tag对operation对象进行分组（影响到文档生成的展现），支持通过在response里面使用$ref引用definitions里面定义的模型（#/definitions/Model），definition需要定义在JSON的root层级上才能使用这里说到$ref的语法引用到，在 <strong>测试和校验</strong> 的时候这点很重要。<h3 id=\"工具集-1\"><a href=\"#工具集-1\" class=\"headerlink\" title=\"工具集\"></a>工具集</h3></li>\n<li>文档编辑工具：<a href=\"http://editor.swagger.io/\" target=\"_blank\" rel=\"external\">Online Editor</a> 左侧编辑文档，右侧预览效果，还能直接根据文档中定义的线上地址发送请求测试线上实际返回效果，提供在线的client和server端口模板代码生成</li>\n<li>文档生成工具：<a href=\"https://github.com/swagger-api/swagger-ui\" target=\"_blank\" rel=\"external\">Swagger UI</a>能够生成在线可交互的文档，生成的效果看这里<a href=\"http://petstore.swagger.io/\" target=\"_blank\" rel=\"external\">Online Preview Demo</a></li>\n<li>代码生成工具：<a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\" rel=\"external\">Swagger Codegen</a>依赖于java的环境，根据你定义的规范生成模板代码，值得一提的是server端的模板代码支持在开发环境下mock服务数据。</li>\n<li>接口验证工具：没有完全自动化的工具，因为自动的代码生成是swagger的核心特色，自动生成代码对于参数的校验，在filter，middlewire或者hook层都做掉了，但是找到基于mocha的生成自动化测试模板文件的工具 <a href=\"https://github.com/apigee-127/swagger-test-templates\" target=\"_blank\" rel=\"external\">swagger-test-templates</a>，这里有个坑就是生成的模板文件使用z-schema校验json，但不支持format参数；<a href=\"https://github.com/Maks3w/SwaggerAssertions\" target=\"_blank\" rel=\"external\">另外一个</a>基本的CRUD都需要人工写很多的测试代码</li>\n<li>接口模拟工具：API如果是基于express的，可以用<a href=\"https://github.com/BigstickCarpet/swagger-express-middleware\" target=\"_blank\" rel=\"external\">swagger-express-middleware</a>，不仅仅是mock还包括在请求参数中带上元信息，自动的参数类型转换，参数的校验等；如果用了grunt和静态文件任务connect，用<a href=\"https://github.com/dzdrazil/swagger-mock-api\" target=\"_blank\" rel=\"external\">swagger-mock-api</a>会很方便。<h3 id=\"参考文档-1\"><a href=\"#参考文档-1\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3></li>\n<li><a href=\"http://swagger.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://swagger.io/specification/\" target=\"_blank\" rel=\"external\">定义规范</a> 实际就是2.0的规范</li>\n<li><a href=\"https://github.com/raml-apis\" target=\"_blank\" rel=\"external\">Raml APIs samples</a></li>\n<li><a href=\"http://swagger.io/tools/\" target=\"_blank\" rel=\"external\">社区工具集</a></li>\n<li><a href=\"https://github.com/swagger-api\" target=\"_blank\" rel=\"external\">主要参与贡献组织 swagger-api</a><h2 id=\"API-Blueprint-1A\"><a href=\"#API-Blueprint-1A\" class=\"headerlink\" title=\"API-Blueprint(1A)\"></a>API-Blueprint(1A)</h2><h3 id=\"定义方式-2\"><a href=\"#定义方式-2\" class=\"headerlink\" title=\"定义方式\"></a>定义方式</h3></li>\n<li>语言支持：基于markdown的规范扩展了自定义的语法</li>\n<li>授权方式：通过使用+ Authenticated定义一个区块来实现，但仍然处于<a href=\"https://github.com/apiaryio/api-blueprint-rfcs/blob/master/draft/0002-authentication.md\" target=\"_blank\" rel=\"external\">草案阶段</a></li>\n<li>有用的特性：可以在标题项中通过Group关键字来对资源分组，可以通过符号加占位符定义URI的模板</li>\n<li>抽象方式：可以在Data Structures部分定义model并且在Attributes里面引用<h3 id=\"工具集-2\"><a href=\"#工具集-2\" class=\"headerlink\" title=\"工具集\"></a>工具集</h3></li>\n</ul>\n<p>API blueprint的工具链主要依托于<a href=\"https://apiary.io/\" target=\"_blank\" rel=\"external\">apiary</a>提供的在线SAAS服务，可以很方便跟github的仓库集成，主要的工具说明官网说的<a href=\"https://docs.apiary.io/tools/\" target=\"_blank\" rel=\"external\">很详细</a>了。</p>\n<ul>\n<li>文档编辑工具：登录后使用在线的editor工具编辑，左侧编辑文档，右侧预览效果，直接调用在线的mock服务。</li>\n<li>文档生成工具：文档是在发布之后生成的，支持控制访问权限。</li>\n<li>代码生成工具：<a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\" rel=\"external\">Swagger Codegen</a>依赖于java的环境，根据你定义的规范生成模板代码，值得一提的是server端的模板代码支持在开发环境下mock服务数据。</li>\n<li>接口验证工具：<a href=\"https://github.com/apiaryio/dredd\" target=\"_blank\" rel=\"external\">dredd</a>，初始化的时候通过指定key，拉取你在apiary上定义的文档来进行测试。</li>\n<li>接口模拟工具：在文档发布后会生成一个mock地址，直接就是一个线上的mock服务，还可以通过inspector查看mock服务被调用的情况。<h3 id=\"参考文档-2\"><a href=\"#参考文档-2\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3></li>\n<li><a href=\"https://apiblueprint.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md\" target=\"_blank\" rel=\"external\">定义规范</a></li>\n<li><a href=\"https://github.com/apiaryio\" target=\"_blank\" rel=\"external\">主要参与贡献组织 apiary</a><h2 id=\"文档定义转化工具\"><a href=\"#文档定义转化工具\" class=\"headerlink\" title=\"文档定义转化工具\"></a>文档定义转化工具</h2></li>\n<li><a href=\"https://apitransformer.com\" target=\"_blank\" rel=\"external\">apitransformer</a></li>\n<li><a href=\"https://github.com/lucybot/api-spec-converter\" target=\"_blank\" rel=\"external\">api-sepc-converter</a> 暂时主要支持将各种定义方式转化为swagger2.0</li>\n</ul>\n<p><strong>这里先占个坑，等方案梳理落地后再进一步完善本文~~</strong></p>\n","categories":[],"tags":["blog","frontend"]},{"title":"【翻译】Go语言中的HTTP中间件","url":"https://vincenthou.github.io/2015/10/07/【翻译】Go语言中的HTTP中间件/","content":"<p>在web开发领域，“中间件”代表的是使用应用的一部分来包装原有应用程序，添加额外的功能。这个概念通常未收到充分的赏识，但是我认为还是很棒的。</p>\n<p>我认为一个好的中间件有单一的责任，它是可插拔的并且是自包含的。这意味着你可以把它在借口层次嵌入并且马上能用。它不会影响你的编码风格，它也不是一个框架，而仅仅是你请求处理流中的另外一层。没有必要重写你的代码，你决定用中间件，只需要把它加到公式里面，如果你反悔了，就去掉它，就是这么简单。</p>\n<p>反观Go语言中，HTTP中间件即使是在标准库里也是很普遍的。尽管开始看起来不是很明显，<code>net/http</code>包里面，像<a href=\"http://golang.org/pkg/net/http/#StripPrefix\" target=\"_blank\" rel=\"external\">StripPrefix</a>或者<a href=\"http://golang.org/pkg/net/http/#TimeoutHandler\" target=\"_blank\" rel=\"external\">TimeoutHandler</a>这些方法，就是我们期待中中间件的样子。它们包装了你的处理器，在处理请求和响应的时候加额外的步骤。</p>\n<p>我最近的Go包<a href=\"https://github.com/justinas/nosurf\" target=\"_blank\" rel=\"external\">nosurf</a>也是个中间价。我有意从最开始设计这个包。大部分情况，你不需要在应用程序层面注意到CSRF的检查：nosurf像其他合格的中间件一样，它是独立于系统的并且能够跟其他使用标准<code>net/http</code>接口的工具很好的协作。</p>\n<p>你也可以用中间件来：</p>\n<ul>\n<li>通过长度隐藏来减轻<a href=\"http://netsecurity.51cto.com/art/201308/406091.htm\" target=\"_blank\" rel=\"external\">BREACH 攻击</a></li>\n<li>请求速率控制</li>\n<li>抵挡恶意木马</li>\n<li>提供调试信息</li>\n<li>添加<a href=\"https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\" target=\"_blank\" rel=\"external\">HSTS</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\" target=\"_blank\" rel=\"external\">X-Frame-Options</a> 报头</li>\n<li>优雅地从panic中恢复</li>\n<li>…还有其他可能的功能<h1 id=\"写一个简单的中间件\"><a href=\"#写一个简单的中间件\" class=\"headerlink\" title=\"写一个简单的中间件\"></a>写一个简单的中间件</h1></li>\n</ul>\n<p>第一个例子我们来写个只允许用户在单一域名（在HTTP协议的Host报头中指定）下访问我们的网站的中间件。这样的中间件可以保护web应用免受<a href=\"http://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html\" target=\"_blank\" rel=\"external\">host欺骗</a>的攻击。</p>\n<h2 id=\"构造类型\"><a href=\"#构造类型\" class=\"headerlink\" title=\"构造类型\"></a>构造类型</h2><p>首先让我们来位这个中间件来定义一种类型，我们姑且叫它 <code>SingleHost</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> SingleHost <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    handler     http.Handler</div><div class=\"line\">    allowedHost <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它只包含了两个字段：</p>\n<ul>\n<li>被包装的处理器，我们会让带有合法Host的请求调用它</li>\n<li>被允许访问的host的值</li>\n</ul>\n<p>因为我们使用小写来定义字段名，让这些字段对于在我们的包里面是私有的，我们还需要给我们的类型定义一个构造器。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSingleHost</span><span class=\"params\">(handler http.Handler, allowedHost <span class=\"keyword\">string</span>)</span> *<span class=\"title\">SingleHost</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;SingleHost&#123;handler: handler, allowedHost: allowedHost&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"处理请求\"><a href=\"#处理请求\" class=\"headerlink\" title=\"处理请求\"></a>处理请求</h2><p>现在是实际的逻辑代码。为了实现 <code>http.Handler</code> 接口，我们的类型只需要有一个方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">        ServeHTTP(ResponseWriter, *Request)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *SingleHost)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    host := r.Host</div><div class=\"line\">    <span class=\"keyword\">if</span> host == s.allowedHost &#123;</div><div class=\"line\">        s.handler.ServeHTTP(w, r)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        w.WriteHeader(<span class=\"number\">403</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ServeHTTP</code> 方法仅仅检查请求中的Host报头：</p>\n<ul>\n<li>如果请求匹配构造函数中设置的<code>allowedHost</code>值，它就会调用被包装处理器上的<code>ServeHTTP</code>方法，这样处理请求的责任就传递下去了。</li>\n<li>如果不匹配，请求返回403（未授权）状态码，请求处理到此为止。</li>\n</ul>\n<p>在后面一种情况，原来处理器中的<code>ServeHTTP</code>方法永远不会被调用到，处理器甚至不知道有这么一个请求发出过。</p>\n<p>现在我们的中间件已经写完了。我们只需要把它嵌入应用。我们在中间件里包裹处理器，而不是直接把我们原来的处理器传递给<code>net/http</code>服务器。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">singleHosted = NewSingleHost(myHandler, <span class=\"string\">\"example.com\"</span>)</div><div class=\"line\">http.ListenAndServe(<span class=\"string\">\":8080\"</span>, singleHosted)</div></pre></td></tr></table></figure>\n<h2 id=\"另外一种方式\"><a href=\"#另外一种方式\" class=\"headerlink\" title=\"另外一种方式\"></a>另外一种方式</h2><p>我们上面实现的中间件真的很简单：它只有15行代码。写这种中间件，有一个用更少代码量模板来实现的方法。由于Go语言对于函数一等公民和闭包的支持，以及有简洁的<code>http.HandlerFunc</code>包装器，我们可以把这些逻辑作为一个简单的方法来实现而不是一个独立的结构体类型。下面是我们中间价的函数式版本完整实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SingleHost</span><span class=\"params\">(handler http.Handler, allowedHost <span class=\"keyword\">string</span>)</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</div><div class=\"line\">    ourFunc := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">        host := r.Host</div><div class=\"line\">        <span class=\"keyword\">if</span> host == allowedHost &#123;</div><div class=\"line\">            handler.ServeHTTP(w, r)</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            w.WriteHeader(<span class=\"number\">403</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> http.HandlerFunc(ourFunc)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们定义了一个简单的函数叫做<code>SingleHost</code>，这个函数可以接受一个需要被包装的处理器和被允许的Host名称。在方法里我们构造了一个和之前版本中<code>ServeHTTP</code>相似的方法。我们内部的方法实际是一个闭包，所以它能够访问外部的变量。最终，<code>HandlerFunc</code>让我们能够把这个方法作为一个<code>http.Handler</code>来使用。</p>\n<p>是使用<code>HandlerFunc</code>还是使用你自己的<code>http.Handler</code>类型最终是由你来决定的。对于基本的情况，一个方法就够了，如果你发现你的中间件越来越臃肿，你就会想要定义自己的结构体类型并且分离逻辑到多个方法中去。</p>\n<p>同时，标准库实际会用到上面两种方法来创造中间件。<code>StripPrefix</code>是一个返回<code>HandlerFunc</code>的方法，而<code>TimeoutHandler</code>虽然是个方法，但是返回的是个处理请求的自定义结构体类型。</p>\n<h1 id=\"一个更复杂的情况\"><a href=\"#一个更复杂的情况\" class=\"headerlink\" title=\"一个更复杂的情况\"></a>一个更复杂的情况</h1><p>我们的<code>SingleHost</code>中间件没啥实用价值：我们只是检查了请求中的某个属性然后把请求传递给原始的处理器，既没有再关注它也没有返回一个我们自己的响应，并且让原始的处理器获取到它。更不用说，有些情况是不光要基于请求来做出动作，我们的中间件还可能需要在原来的处理器写入响应之后再进一步通过某种方式处理返回给客户端的响应。</p>\n<h2 id=\"添加数据很简单\"><a href=\"#添加数据很简单\" class=\"headerlink\" title=\"添加数据很简单\"></a>添加数据很简单</h2><p>如果你想要在被包装的处理器已经写入响应之后再添加数据，你只需要在完成的时候调用<code>Write()</code>方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> AppendMiddleware <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    handler http.Handler</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">func (a *AppendMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</div><div class=\"line\">    a.handler.ServeHTTP(w, r)</div><div class=\"line\">    w.Write([]byte(&quot;Middleware says hello.&quot;))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在响应会在原有处理器输出的任何内容之后添加中间件输出的hello。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>处理其他类型的响应就有点麻烦了。假如我们想要在数据添加在放回响应的头里面。如果我们在原始的处理器前调用<code>Write()</code>方法就会对状态码和报头失去控制，因为第一次<code>Write()</code>调用立即将它们写入。</p>\n<p>通过其他任何方式（比如，替换字符串），改变某个响应的报头或者设置一个不同的状态码不会起作用，这是因为一个相似的原因：当被包装的处理器返回之后，上面这些内容已经被返回给客户端了。</p>\n<p>为了应对这种情况，我们需要一种特殊的<code>ResponseWriter</code>能够像缓冲区一样工作，手机响应并且为了之后使用保存数据（以及修改）。我们之后会把<code>ResponseWriter</code>缓存传递给原始的处理器而不是给它真实的RW，这样可以防止它直接讲响应返回。</p>\n<p>幸运的是，在Go的标准库中有这样的工具。<code>net/http/httptest</code>包中的<code>ResponseRecorder</code>做了所有我们需要的：它保存响应状态码，报头的映射表并且把报文积攒到缓冲流中。尽管它本来是用于测试的（就像包名表达的一样），但是正好也满足了我们的情况。</p>\n<p>为了内容的完整性，让我们来看个使用<code>ResponseRecorder</code>修改响应中东西的例子。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> ModifierMiddleware <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    handler http.Handler</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *ModifierMiddleware)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    rec := httptest.NewRecorder()</div><div class=\"line\">    <span class=\"comment\">// passing a ResponseRecorder instead of the original RW</span></div><div class=\"line\">    m.handler.ServeHTTP(rec, r)</div><div class=\"line\">    <span class=\"comment\">// after this finishes, we have the response recorded</span></div><div class=\"line\">    <span class=\"comment\">// and can modify it before copying it to the original RW</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// we copy the original headers first</span></div><div class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> rec.Header() &#123;</div><div class=\"line\">        w.Header()[k] = v</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// and set an additional one</span></div><div class=\"line\">    w.Header().Set(<span class=\"string\">\"X-We-Modified-This\"</span>, <span class=\"string\">\"Yup\"</span>)</div><div class=\"line\">    <span class=\"comment\">// only then the status code, as this call writes out the headers </span></div><div class=\"line\">    w.WriteHeader(<span class=\"number\">418</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The body hasn't been written (to the real RW) yet,</span></div><div class=\"line\">    <span class=\"comment\">// so we can prepend some data.</span></div><div class=\"line\">    data := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"Middleware says hello again. \"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// But the Content-Length might have been set already,</span></div><div class=\"line\">    <span class=\"comment\">// we should modify it by adding the length</span></div><div class=\"line\">    <span class=\"comment\">// of our own data.</span></div><div class=\"line\">    <span class=\"comment\">// Ignoring the error is fine here:</span></div><div class=\"line\">    <span class=\"comment\">// if Content-Length is empty or otherwise invalid,</span></div><div class=\"line\">    <span class=\"comment\">// Atoi() will return zero,</span></div><div class=\"line\">    <span class=\"comment\">// which is just what we'd want in that case.</span></div><div class=\"line\">    clen, _ := strconv.Atoi(r.Header.Get(<span class=\"string\">\"Content-Length\"</span>))</div><div class=\"line\">    clen += <span class=\"built_in\">len</span>(data)</div><div class=\"line\">    r.Header.Set(<span class=\"string\">\"Content-Length\"</span>, strconv.Itoa(clen))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// finally, write out our data</span></div><div class=\"line\">    w.Write(data)</div><div class=\"line\">    <span class=\"comment\">// then write out the original body</span></div><div class=\"line\">    w.Write(rec.Body.Bytes())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是我们通过中间件返回”Success!”包装过的处理器响应。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 418 I<span class=\"string\">'m a teapot</span></div><div class=\"line\"><span class=\"string\">X-We-Modified-This: Yup</span></div><div class=\"line\"><span class=\"string\">Content-Type: text/plain; charset=utf-8</span></div><div class=\"line\"><span class=\"string\">Content-Length: 37</span></div><div class=\"line\"><span class=\"string\">Date: Tue, 03 Sep 2013 18:41:39 GMT</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Middleware says hello again. Success!</span></div></pre></td></tr></table></figure>\n<p>这为我们开启了新的可能性。被包装的处理器完全掌握在我们手里：即使是在请求被处理完之后，我们也能以任何我们想要的方式操纵响应。</p>\n<h2 id=\"跟其他处理器共享数据\"><a href=\"#跟其他处理器共享数据\" class=\"headerlink\" title=\"跟其他处理器共享数据\"></a>跟其他处理器共享数据</h2><p>在很多情况下，你的中间件需要暴露某些信息给其他的中间件或者你自己的应用。举个例子，nosurf需要给用户提供访问CSRF token的方法和失败的理由（如果有的话）。</p>\n<p>一种优雅的方式是使用映射表，通常是存在一个隐藏在包内的全局变量里，用来映射<code>http.Request</code>指针和需要的数据片段，同时暴露包级别（或者处理器级别）的方法来访问数据。</p>\n<p>我在nosurf中也使用了这种模式。这里，我创建了一个全局的映射表。注意到这里需要一个互斥锁，因为Go语言的映射表默认不是线程安全的，参考<a href=\"http://blog.golang.org/go-maps-in-action#TOC_6.\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> csrfContext <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    token <span class=\"keyword\">string</span></div><div class=\"line\">    reason error</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">    contextMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[*http.Request]*csrfContext)</div><div class=\"line\">    cmMutex    = <span class=\"built_in\">new</span>(sync.RWMutex)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>数据在处理器中被设置进去，通过包导出的<code>Token()</code>方法把数据暴露出来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Token</span><span class=\"params\">(req *http.Request)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    cmMutex.RLock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> cmMutex.RUnlock()</div><div class=\"line\"></div><div class=\"line\">    ctx, ok := contextMap[req]</div><div class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.token</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以在nosurf库的<a href=\"https://github.com/justinas/nosurf/blob/master/context.go\" target=\"_blank\" rel=\"external\">context.go</a>中找到完成的实现代码。</p>\n<p>相比于我选择自己位nosurf自己造轮子，有个<a href=\"http://www.gorillatoolkit.org/pkg/context\" target=\"_blank\" rel=\"external\">gorilla/context</a>的包实现了一个通用的映射表来保存请求的信息。在大部分情况下，它能够满足你的需要，让你不需要自己实现一个共享的存储结构以及踩人家踩过的坑。它甚至提供在处理完之后清除请求数据的<a href=\"http://www.gorillatoolkit.org/pkg/context#ClearHandler\" target=\"_blank\" rel=\"external\">中间件</a>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章的目的是是给Go语言开发者描述中间件的概念并且展示一些基本的Go语言里面实现中间件的方式。作为一个相对年轻的语言，Go语言提供了非常好的标准HTTP接口。这也是让编写Go的中间件更加方便甚至有趣的因素。</p>\n<p>然而，仍然缺乏高质量的Go语言的HTTP工具。大部分但不是所有上面我提到关于Go的中间件的想法还没有实现。现在你知道怎么在Go语言中实现中间件了，为什么不自己整个呢？:-)</p>\n<p>P.S. 你可以在github的<a href=\"https://gist.github.com/justinas/7059324\" target=\"_blank\" rel=\"external\">gist</a>找到文中相关的实现代码。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>对于中间件的实现最常见的思路是使用<code>责任链</code>的方式，很多框架实现中都是以filter的概念提供，一级的事情做完传给下一级。最原始Go语言中使用<code>装饰器</code>来实现同样的效果，通过预先定义包装顺序来控制处理流程的顺序。通过在内存中提供公共内存区域来在不同的中间件之间共享数据。其实这种方法中间件逐渐增多之后会难以维护，你会看到这样的code：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Middleware1(Middleware2(Middleware3(App)))</div></pre></td></tr></table></figure>\n<p>本文的作者实现了一个简单的责任链式的<a href=\"https://github.com/justinas/alice\" target=\"_blank\" rel=\"external\">库</a>，也写<a href=\"https://justinas.org/alice-painless-middleware-chaining-for-go/\" target=\"_blank\" rel=\"external\">文章</a>讲解了下用例，将上面的代码转化为</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alice.New(Middleware1, Middleware2, Middleware3).Then(App).</div></pre></td></tr></table></figure>\n<p>本文只能说是简单介绍了Go语言中中间件实现的思路，未必是最好的实现，这个见仁见智把，最后，本文的英文原文看这里：<a href=\"https://justinas.org/writing-http-middleware-in-go/\" target=\"_blank\" rel=\"external\">传送门</a></p>\n","categories":[],"tags":["go","backend","translation"]},{"title":"Martini深入浅出系列 - 快速开始和基本概念","url":"https://vincenthou.github.io/2015/10/04/Martini深入浅出系列-快速开始和基本概念/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://martini.codegangsta.io/\" target=\"_blank\" rel=\"external\">官网</a><br><a href=\"https://github.com/go-martini/martini#getting-started\" target=\"_blank\" rel=\"external\">简单的例子</a><br><a href=\"https://github.com/go-martini/martini\" target=\"_blank\" rel=\"external\">项目地址</a><br><a href=\"https://godoc.org/github.com/go-martini/martini\" target=\"_blank\" rel=\"external\">API文档</a><br><a href=\"https://github.com/martini-contrib\" target=\"_blank\" rel=\"external\">中间件列表</a></p>\n","categories":[],"tags":[]},{"title":"几款h5应用生成工具技术方案对比","url":"https://vincenthou.github.io/2015/10/01/几款h5应用生成工具技术方案对比/","content":"<p>再留个坑</p>\n","categories":[],"tags":[]},{"title":"javascript中的函数式编程","url":"https://vincenthou.github.io/2015/09/30/javascript中的函数式编程/","content":"<p>又欠一笔账</p>\n","categories":[],"tags":[]},{"title":"静态资源的管理优化","url":"https://vincenthou.github.io/2015/09/23/静态资源的管理优化/","content":"<p>静态资源的管理在Web系统开发中经常被忽略的一个环节，但是当系统的规模逐渐扩大之后，或者在追求极致的用户体验目标下，静态资源管理的问题会变得越来越重要。</p>\n","categories":[],"tags":[]},{"title":"Nginx配置中一个斜杠引发的血案","url":"https://vincenthou.github.io/2015/09/21/Nginx配置中一个斜杠引发的血案/","content":"<p>Nginx经常被用来做前端的代理服务器，代理相关配置好之后，需要配置proxy_pass，最近因为一个”/“引发了一系列的问题，记录一下．</p>\n<p>proxy_pass用来配置代理后端的服务器地址，可以带上端口号，有两种写法</p>\n<ul>\n<li><strong>不带 <code>/</code> :</strong> 根路径<code>/</code>会被保留，也就是 <a href=\"http://localhost/test/page\" target=\"_blank\" rel=\"external\">http://localhost/test/page</a>, 后端获取到的是完整的路径<code>/test/page</code></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /<span class=\"built_in\">test</span> &#123;</div><div class=\"line\">    proxy_pass http://127.0.0.1:81</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>带 <code>/</code> :</strong> 根路径<code>/</code>会被吃掉，也就是 <a href=\"http://localhost/test/page\" target=\"_blank\" rel=\"external\">http://localhost/test/page</a>, 后端获取到的是完整的路径<code>/page</code></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /<span class=\"built_in\">test</span> &#123;</div><div class=\"line\">    proxy_pass http://127.0.0.1:81/</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大部分情况代理或者仅仅是做子站隔离的时候都是需要保留根路径的（特别是子站隔离很多时候就是用根路径的不同来区分的），所以第一种情况用的会更多一点，配置proxy_pass后根路径会被保留．</p>\n<h1 id=\"顺便一记\"><a href=\"#顺便一记\" class=\"headerlink\" title=\"顺便一记\"></a>顺便一记</h1><p>发现该问题是在使用Yii2.0项目开发出现的．一般我们都会配置urlManager, 正常配置一些rules，如下所示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'components'</span> =&gt; [</div><div class=\"line\">       ...</div><div class=\"line\">        <span class=\"string\">'urlManager'</span> =&gt; [</div><div class=\"line\">            <span class=\"string\">'enablePrettyUrl'</span> =&gt; <span class=\"keyword\">true</span>,</div><div class=\"line\">            <span class=\"string\">'enableStrictParsing'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"comment\">//注意这里</span></div><div class=\"line\">            <span class=\"string\">'showScriptName'</span> =&gt; <span class=\"keyword\">false</span>,</div><div class=\"line\">            <span class=\"string\">'rules'</span> =&gt; [</div><div class=\"line\">                <span class=\"string\">'webapp/&lt;module:\\w+&gt;/&lt;controller:[\\w-]+&gt;/&lt;action:[\\w-]+&gt;/&lt;id:[\\w\\d,]&#123;24&#125;(,[\\w\\d]&#123;24&#125;)*&gt;'</span>       =&gt; <span class=\"string\">'&lt;module&gt;/&lt;controller&gt;/&lt;action&gt;'</span>,</div><div class=\"line\">                <span class=\"string\">'webapp/&lt;module:\\w+&gt;/&lt;submodule:\\w+&gt;/&lt;controller:[\\w-]+&gt;/&lt;action:[\\w-]+&gt;/&lt;id:[\\w\\d,]&#123;24&#125;&gt;'</span>     =&gt; <span class=\"string\">'&lt;module&gt;/&lt;submodule&gt;/&lt;controller&gt;/&lt;action&gt;'</span>,</div><div class=\"line\">                <span class=\"string\">'webapp/&lt;module:\\w+&gt;/&lt;controller:[\\w-]+&gt;/&lt;action:[\\w-]+&gt;'</span>                                      =&gt; <span class=\"string\">'&lt;module&gt;/&lt;controller&gt;/&lt;action&gt;'</span>,</div><div class=\"line\">                <span class=\"string\">'webapp/&lt;module:\\w+&gt;/&lt;submodule:\\w+&gt;/&lt;controller:[\\w-]+&gt;/&lt;action:[\\w-]+&gt;'</span>                      =&gt; <span class=\"string\">'&lt;module&gt;/&lt;submodule&gt;/&lt;controller&gt;/&lt;action&gt;'</span>,</div><div class=\"line\">            ],</div><div class=\"line\">        ],</div><div class=\"line\">       ...</div></pre></td></tr></table></figure>\n<p>这里添加了<code>enableStrictParsing</code>的配置，如果设置为true则表示所有的路由匹配只能在rules的列表里面，这要不是列表中的配置项就返回404（其实也未可厚非），但关键是要能够匹配到啊！</p>\n<p>因为之前配置的问题，使用了上面提到的第二种配置方式，根路径被吃掉了．一个请求过来会先做路由解析，到<code>/yii2/web/Request.php</code>里面的<code>resolve</code>方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    $result = Yii::$app-&gt;getUrlManager()-&gt;parseRequest(<span class=\"keyword\">$this</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> ($result !== <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">list</span> ($route, $params) = $result;</div><div class=\"line\">        $_GET = array_merge($_GET, $params);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> [$route, $_GET];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundHttpException(Yii::t(<span class=\"string\">'yii'</span>, <span class=\"string\">'Page not found.'</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在解析路由中会使用我们之前配置的<code>urlManager</code>实例上的<code>parseRequest</code>方法，在<code>/yii2/web/UrlManager.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseRequest</span><span class=\"params\">($request)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;enablePrettyUrl) &#123;</div><div class=\"line\">        $pathInfo = $request-&gt;getPathInfo();</div><div class=\"line\">        <span class=\"comment\">/* <span class=\"doctag\">@var</span> $rule UrlRule */</span></div><div class=\"line\">       <span class=\"comment\">//这里匹配你自己配置的规则</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;rules <span class=\"keyword\">as</span> $rule) &#123;</div><div class=\"line\">            <span class=\"comment\">//这里调用了rule对象的parseRequest方法，后面会追到</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (($result = $rule-&gt;parseRequest(<span class=\"keyword\">$this</span>, $request)) !== <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $result;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">　　<span class=\"comment\">//这里是强制使用你自己配置生效的地方</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;enableStrictParsing) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Yii::trace(<span class=\"string\">'No matching URL rules. Using default URL parsing logic.'</span>, <span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">　　<span class=\"comment\">//这里是yii自己默认生成的规则</span></div><div class=\"line\">        $suffix = (string) <span class=\"keyword\">$this</span>-&gt;suffix;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($suffix !== <span class=\"string\">''</span> &amp;&amp; $pathInfo !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">            $n = strlen(<span class=\"keyword\">$this</span>-&gt;suffix);</div><div class=\"line\">            <span class=\"keyword\">if</span> (substr_compare($pathInfo, <span class=\"keyword\">$this</span>-&gt;suffix, -$n, $n) === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                $pathInfo = substr($pathInfo, <span class=\"number\">0</span>, -$n);</div><div class=\"line\">                <span class=\"keyword\">if</span> ($pathInfo === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// suffix alone is not allowed</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// suffix doesn't match</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> [$pathInfo, []];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Yii::trace(<span class=\"string\">'Pretty URL not enabled. Using default URL parsing logic.'</span>, <span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">        $route = $request-&gt;getQueryParam(<span class=\"keyword\">$this</span>-&gt;routeParam, <span class=\"string\">''</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (is_array($route)) &#123;</div><div class=\"line\">            $route = <span class=\"string\">''</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> [(string) $route, []];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调试发现就是我们配置的路由规则没有生效，继续往下找，话说这个rule对象是什么鬼？搜索后发现，rule列表是在init的时候生成的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">parent</span>::init();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">$this</span>-&gt;enablePrettyUrl || <span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;rules)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (is_string(<span class=\"keyword\">$this</span>-&gt;cache)) &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;cache = Yii::$app-&gt;get(<span class=\"keyword\">$this</span>-&gt;cache, <span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">　<span class=\"comment\">//根据是否配置了cache在cache里面也放一份</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;cache <span class=\"keyword\">instanceof</span> Cache) &#123;</div><div class=\"line\">        $cacheKey = <span class=\"keyword\">__CLASS__</span>;</div><div class=\"line\">        $hash = md5(json_encode(<span class=\"keyword\">$this</span>-&gt;rules));</div><div class=\"line\">        <span class=\"keyword\">if</span> (($data = <span class=\"keyword\">$this</span>-&gt;cache-&gt;get($cacheKey)) !== <span class=\"keyword\">false</span> &amp;&amp; <span class=\"keyword\">isset</span>($data[<span class=\"number\">1</span>]) &amp;&amp; $data[<span class=\"number\">1</span>] === $hash) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rules = $data[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rules = <span class=\"keyword\">$this</span>-&gt;buildRules(<span class=\"keyword\">$this</span>-&gt;rules);</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;cache-&gt;set($cacheKey, [<span class=\"keyword\">$this</span>-&gt;rules, $hash]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;rules = <span class=\"keyword\">$this</span>-&gt;buildRules(<span class=\"keyword\">$this</span>-&gt;rules);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要逻辑就是调用<code>buildRules</code>生成规则对象，继续看buildRules的实现，发现rule是使用yii的createObject方法，默认用<code>yii\\web\\UrlRule</code>生成规则对象</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildRules</span><span class=\"params\">($rules)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    $compiledRules = [];</div><div class=\"line\">    $verbs = <span class=\"string\">'GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS'</span>;</div><div class=\"line\">    <span class=\"keyword\">foreach</span> ($rules <span class=\"keyword\">as</span> $key =&gt; $rule) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is_string($rule)) &#123;</div><div class=\"line\">            $rule = [<span class=\"string\">'route'</span> =&gt; $rule];</div><div class=\"line\">            <span class=\"keyword\">if</span> (preg_match(<span class=\"string\">\"/^((?:($verbs),)*($verbs))\\\\s+(.*)$/\"</span>, $key, $matches)) &#123;</div><div class=\"line\">                $rule[<span class=\"string\">'verb'</span>] = explode(<span class=\"string\">','</span>, $matches[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!in_array(<span class=\"string\">'GET'</span>, $rule[<span class=\"string\">'verb'</span>])) &#123;</div><div class=\"line\">                    $rule[<span class=\"string\">'mode'</span>] = UrlRule::PARSING_ONLY;</div><div class=\"line\">                &#125;</div><div class=\"line\">                $key = $matches[<span class=\"number\">4</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">            $rule[<span class=\"string\">'pattern'</span>] = $key;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is_array($rule)) &#123;</div><div class=\"line\">　　　<span class=\"comment\">// ruleConfig的默认配置如下:</span></div><div class=\"line\">　　　<span class=\"comment\">// public $ruleConfig = ['class' =&gt; 'yii\\web\\UrlRule'];</span></div><div class=\"line\">            $rule = Yii::createObject(array_merge(<span class=\"keyword\">$this</span>-&gt;ruleConfig, $rule));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!$rule <span class=\"keyword\">instanceof</span> UrlRuleInterface) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidConfigException(<span class=\"string\">'URL rule class must implement UrlRuleInterface.'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        $compiledRules[] = $rule;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $compiledRules;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再看<code>yii\\web\\UrlRule</code>的<code>parseRequest</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseRequest</span><span class=\"params\">($manager, $request)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;mode === <span class=\"keyword\">self</span>::CREATION_ONLY) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;verb) &amp;&amp; !in_array($request-&gt;getMethod(), <span class=\"keyword\">$this</span>-&gt;verb, <span class=\"keyword\">true</span>)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $pathInfo = $request-&gt;getPathInfo();</div><div class=\"line\">    $suffix = (string) (<span class=\"keyword\">$this</span>-&gt;suffix === <span class=\"keyword\">null</span> ? $manager-&gt;suffix : <span class=\"keyword\">$this</span>-&gt;suffix);</div><div class=\"line\">    <span class=\"keyword\">if</span> ($suffix !== <span class=\"string\">''</span> &amp;&amp; $pathInfo !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        $n = strlen($suffix);</div><div class=\"line\">        <span class=\"keyword\">if</span> (substr_compare($pathInfo, $suffix, -$n, $n) === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            $pathInfo = substr($pathInfo, <span class=\"number\">0</span>, -$n);</div><div class=\"line\">            <span class=\"keyword\">if</span> ($pathInfo === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// suffix alone is not allowed</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;host !== <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        $pathInfo = strtolower($request-&gt;getHostInfo()) . ($pathInfo === <span class=\"string\">''</span> ? <span class=\"string\">''</span> : <span class=\"string\">'/'</span> . $pathInfo);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//主要看这里，将匹配规则和匹配项目打印出来</span></div><div class=\"line\">    <span class=\"comment\">// var_dump([$this-&gt;pattern, $pathInfo]); </span></div><div class=\"line\">    <span class=\"comment\">// echo '&lt;/br&gt;';</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!preg_match(<span class=\"keyword\">$this</span>-&gt;pattern, $pathInfo, $matches)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;defaults <span class=\"keyword\">as</span> $name =&gt; $value) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($matches[$name]) || $matches[$name] === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">            $matches[$name] = $value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $params = <span class=\"keyword\">$this</span>-&gt;defaults;</div><div class=\"line\">    $tr = [];</div><div class=\"line\">    <span class=\"keyword\">foreach</span> ($matches <span class=\"keyword\">as</span> $name =&gt; $value) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_routeParams[$name])) &#123;</div><div class=\"line\">            $tr[<span class=\"keyword\">$this</span>-&gt;_routeParams[$name]] = $value;</div><div class=\"line\">            <span class=\"keyword\">unset</span>($params[$name]);</div><div class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_paramRules[$name])) &#123;</div><div class=\"line\">            $params[$name] = $value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_routeRule !== <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        $route = strtr(<span class=\"keyword\">$this</span>-&gt;route, $tr);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $route = <span class=\"keyword\">$this</span>-&gt;route;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Yii::trace(<span class=\"string\">\"Request parsed with URL rule: &#123;$this-&gt;name&#125;\"</span>, <span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> [$route, $params];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将匹配时候的正则表达式和最终匹配结果打印出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">array(2) &#123; [0]=&gt; string(103) &quot;#^webapp/(?P\\w+)/(?P[\\w-]+)/(?P[\\w-]+)/(?P[\\w\\d,]&#123;24&#125;(,[\\w\\d]&#123;24&#125;)*)$#u&quot; [1]=&gt; string(25) &quot;/demo/default/index&quot; &#125; </div><div class=\"line\">array(2) &#123; [0]=&gt; string(108) &quot;#^webapp/(?P\\w+)/(?P\\w+)/(?P[\\w-]+)/(?P[\\w-]+)/(?P[\\w\\d,]&#123;24&#125;)$#u&quot; [1]=&gt; string(25) &quot;/demo/default/index&quot; &#125; </div><div class=\"line\">array(2) &#123; [0]=&gt; string(69) &quot;#^webapp/(?P\\w+)/(?P[\\w-]+)/(?P[\\w-]+)$#u&quot; [1]=&gt; string(25) &quot;/demo/default/index&quot; &#125;</div></pre></td></tr></table></figure>\n<p>可以看到<code>/webapp</code>都被吃掉了，这就是之前nginx配置引起的问题了，正则中还有<code>^webapp</code>，所以匹配到才怪了呢～</p>\n","categories":[],"tags":["blog","nginx"]},{"title":"Git项目依赖管理 - submodule和subtree","url":"https://vincenthou.github.io/2015/09/09/Git项目依赖管理-submodule和subtree/","content":"<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><h2 id=\"指定目录结构添加子模块\"><a href=\"#指定目录结构添加子模块\" class=\"headerlink\" title=\"指定目录结构添加子模块\"></a>指定目录结构添加子模块</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule add git@git.xxx.xxx:VincentHou/widget-slide.git widgets/slide</div></pre></td></tr></table></figure>\n<h2 id=\"根据目录结构删除子模块\"><a href=\"#根据目录结构删除子模块\" class=\"headerlink\" title=\"根据目录结构删除子模块\"></a>根据目录结构删除子模块</h2><ul>\n<li>删除git cache和物理文件夹</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm -r --cached widget/slide</div><div class=\"line\">rm -rf widget/slide</div></pre></td></tr></table></figure>\n<ul>\n<li>删除gitsubmodule文件中的内容</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[submodule &quot;widget/slide&quot;]</div><div class=\"line\">    url = /home/repo/path/widget/slide.git</div></pre></td></tr></table></figure>\n<h2 id=\"忽略-dirty-commit\"><a href=\"#忽略-dirty-commit\" class=\"headerlink\" title=\"忽略 dirty commit\"></a>忽略 dirty commit</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[submodule <span class=\"string\">\"cpp-iniparser\"</span>]</div><div class=\"line\">    path = cpp-iniparser</div><div class=\"line\">    url = https://github.com/zausiu/cpp-iniparser</div><div class=\"line\">    ignore = dirty</div></pre></td></tr></table></figure>\n<h2 id=\"更新项目中的所有子模块的commit-ID\"><a href=\"#更新项目中的所有子模块的commit-ID\" class=\"headerlink\" title=\"更新项目中的所有子模块的commit ID\"></a>更新项目中的所有子模块的commit ID</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule foreach git pull</div></pre></td></tr></table></figure>\n<h2 id=\"根据子模块远端的最新master分支代码更新子模块\"><a href=\"#根据子模块远端的最新master分支代码更新子模块\" class=\"headerlink\" title=\"根据子模块远端的最新master分支代码更新子模块\"></a>根据子模块远端的最新master分支代码更新子模块</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule init</div><div class=\"line\">git submodule update --remote</div></pre></td></tr></table></figure>\n<h2 id=\"新拉项目-包括所有的子模块\"><a href=\"#新拉项目-包括所有的子模块\" class=\"headerlink\" title=\"新拉项目(包括所有的子模块)\"></a>新拉项目(包括所有的子模块)</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> --recursive /path/to/repos/foo.git</div></pre></td></tr></table></figure>\n<h2 id=\"使用subtree管理项目依赖（不会生成依赖配置文件）\"><a href=\"#使用subtree管理项目依赖（不会生成依赖配置文件）\" class=\"headerlink\" title=\"使用subtree管理项目依赖（不会生成依赖配置文件）\"></a>使用subtree管理项目依赖（不会生成依赖配置文件）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git subtree add --prefix &lt;path&gt; &lt;repo path&gt; branch --squash</div><div class=\"line\">git subtree pull --prefix &lt;path&gt; &lt;repo path&gt; branch --squash</div><div class=\"line\">git subtree push --prefix &lt;path&gt; &lt;repo path&gt; branch --squash</div></pre></td></tr></table></figure>\n<h1 id=\"Submodule的参考\"><a href=\"#Submodule的参考\" class=\"headerlink\" title=\"Submodule的参考\"></a>Submodule的参考</h1><p><a href=\"http://git-scm.com/book/en/v2/Git-Tools-Submodules\" target=\"_blank\" rel=\"external\">Official Guide</a><br><a href=\"http://fiji.sc/Git_submodule_tutorial\" target=\"_blank\" rel=\"external\">Submodules in Fiji</a><br><a href=\"https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407\" target=\"_blank\" rel=\"external\">Mastering Git submodules</a><br><a href=\"http://www.kafeitu.me/git/2012/03/27/git-submodule.html\" target=\"_blank\" rel=\"external\">Git Submodule使用完整教程</a><br><a href=\"http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/\" target=\"_blank\" rel=\"external\">Git Submodule的坑</a><br><a href=\"https://github.com/75team/novaUI/blob/master/.gitmodules\" target=\"_blank\" rel=\"external\">75team novaUI submodules</a></p>\n<h1 id=\"Subtree的参考\"><a href=\"#Subtree的参考\" class=\"headerlink\" title=\"Subtree的参考\"></a>Subtree的参考</h1><p><a href=\"http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/\" target=\"_blank\" rel=\"external\">Alternatives to Git Submodule Git Subtree</a><br><a href=\"https://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/\" target=\"_blank\" rel=\"external\">the Power of Git Subtree</a></p>\n<h1 id=\"两者的对比\"><a href=\"#两者的对比\" class=\"headerlink\" title=\"两者的对比\"></a>两者的对比</h1><p><a href=\"http://efe.baidu.com/blog/git-submodule-vs-git-subtree/\" target=\"_blank\" rel=\"external\">Git Submodule vs Git Subtree</a></p>\n","categories":[],"tags":["collection","git"]},{"title":"峰值系统设计[整理]","url":"https://vincenthou.github.io/2015/05/19/峰值系统设计-整理/","content":"<p><a href=\"http://weibo.com/p/1001603862417250608209\" target=\"_blank\" rel=\"external\">微博原文地址</a></p>\n<p>本文一共分析了三个案例，分别介绍并发系统中的共享资源并发访问、计算型密集型任务缓存访问 、单一热点资源峰值流量问题和解决方案。</p>\n<p>Q1：订票系统，某车次只有一张火车票，假定有1w个人同时打开12306网站来订票，如何解决并发问题？</p>\n<p>A1： 首先介绍数据库层面的并发访问，解决的办法主要是乐观锁和悲观锁。</p>\n<h2 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h2><p>假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p>\n<p>乐观锁使用一个自增的字段表示数据的版本号（或者timestamp），更新的时候检查版本号是否一致，比如数据库中版本号为4，更新时版本号使用版本号version=5，与数据库中的版本号version+1=（5）做比较，如果相等，则可以更新，如果不相等，其他程序已更新该记录，返回错误。</p>\n<h2 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h2><p>假定会发生并发冲突，屏蔽一切可能违反数据完整行的操作。</p>\n<p>一般需要使用数据库的锁机制，比如MysqlInnoDB引擎的行级锁。</p>\n<p>结论：在实际生产环境中，如果并发量不大且不允许脏读（原始数据为5，AB两个事务，B其他事务更新数据为2，事务未提交时，A读取到的仍然为5），可以使用悲观锁。并发访问量大时，使用悲观锁有非常大的性能问题，可以选择乐观锁。</p>\n<h2 id=\"其次，介绍一下Memcached的CAS机制\"><a href=\"#其次，介绍一下Memcached的CAS机制\" class=\"headerlink\" title=\"其次，介绍一下Memcached的CAS机制\"></a>其次，介绍一下Memcached的CAS机制</h2><p>CAS，又称Compare-and-Swap，代表一种原子操作。</p>\n<p>Memcached的CAS机制解决的问题及其原理：</p>\n<ol>\n<li>实现了Check-and-Set原子操作功能；</li>\n<li>其使用方式为：首先使用gets指令一个key-value及key对应value的版本号；其次操作产生新的value值；最后使用cas指令重新提交key-value，并附带刚刚获得到的版本号；</li>\n<li>当服务端判断cas操作中的版本号不是最新的时，则认为改key的值已经被修改，本次cas操作失败。程序设计人员通过CAS机制可实现自增和自减的原子操作；</li>\n</ol>\n<p>可以看到MemCache的CAS机制和数据库的乐观锁实现原理非常类似。</p>\n<p>Q2：假设系统中图片存储在TFS（Taobao File System)中，接口提供缩略图服务，首先在缓存中查找是否有缩略图，如果没有，则从TFS加载原图片，然后请求缩略图服务，缩略图计算完成后，设置回缓存服务中。</p>\n<p>遇到的问题：当一张图片分享给100w个人以后，同一时间有1w个并发请求，由于缩略图计算耗时较长（假设1s), 在这1s内，每个请求查询缓存都没有找到然后申请计算缩略图，导致重复的缩略图计算量和资源消耗。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/77062123jw1etvll319vcj20f50arabd.jpg\" alt=\"image\"></p>\n<p>A2：对于缩略图这种耗时的服务，非常适合使用缓存，不过在使用的时候，对于同一个图片，原则上只需要计算一次缩略图，在缩略图未计算完成时，可以对每张图片做额外的标记表示其正在Processing，并发请求遇到缩略图Processing时，可以等待缩略图计算完成（这是建议的方式）后从缓存直接读取，也可以是直接返回错误，通过客户端重试来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">本案例中，如果缩略图请求在上传图片1分钟后才发生，则可以在后台预先计算缩略图并存储到缓存。另外就是在上传图片的时候计算缩略图，不过会增加上传图片的时间。</div></pre></td></tr></table></figure>\n<p>Q3:单点峰值流量，在并发系统中，除了请求整体的并发量高，还常见单一热点资源的并发请求量很高。例如，1万个人每人分享了一张图片，其中9999张图片的缩略图请求在10 QPS以内，剩下的一张图片为新闻热点图片，峰值请求在10万QPS左右， 系统会遇到的容量问题包括：1）接口前端机容量不够；2）缓存资源单实例遇到瓶颈。</p>\n<p>A3:针对单点峰值流量可能遇到的性能瓶颈，解决方案如下。</p>\n<p>1）接口层容量不够：这个问题比较简单，只要接口层设计是无状态的，当容量达到预警线，可以通过快速水平扩容解决。</p>\n<p>2）缓存资源单实例遇到性能瓶颈：如果使用的是分布式缓存，当希望突破单一key的访问瓶颈时（这个瓶颈既有可能是CPU资源紧张，也有可能是单机网络带宽跑满，还有可能是磁盘IO吞吐不够），一个办法是分布式缓存做多副本（x3）冗余设计，这样系统的吞吐量（x3）可以提高3倍，不过成本也提高3倍。另外一个办法是针对极热点数据，除了分布式缓存，同时在前端机上打开localCache，依靠数量众多的前端机来抗极热点请求。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h2><ul>\n<li><a href=\"http://www.csdn.net/article/2014-11-07/2822545\" target=\"_blank\" rel=\"external\">小米网抢购系统开发实践</a></li>\n<li><a href=\"http://www.csdn.net/article/2014-11-11/2822576\" target=\"_blank\" rel=\"external\">京东峰值系统设计</a></li>\n<li><a href=\"http://djt.qq.com/article/view/1349\" target=\"_blank\" rel=\"external\">微信红包系统设计 &amp; 优化</a></li>\n<li><a href=\"http://www.csdn.net/article/2014-11-28/2822858\" target=\"_blank\" rel=\"external\">Web系统大规模并发——电商秒杀与抢购</a></li>\n<li><a href=\"http://www.csdn.net/article/2014-11-04/2822459\" target=\"_blank\" rel=\"external\">电商峰值系统架构设计</a></li>\n<li><a href=\"http://www.csdn.net/article/2014-11-11/2822582\" target=\"_blank\" rel=\"external\">电商峰值监控经验谈</a></li>\n</ul>\n","categories":[],"tags":["collection","architecture"]},{"title":"Go 语言中的异常处理","url":"https://vincenthou.github.io/2015/05/11/Go-语言中的异常处理/","content":"<p><a href=\"http://studygolang.com/articles/2547\" target=\"_blank\" rel=\"external\">Go语言项目的错误和异常管理</a></p>\n","categories":[],"tags":["collection","go"]},{"title":"Go 语言中处理JSON的几种方式","url":"https://vincenthou.github.io/2015/04/12/Go-语言中处理JSON的几种方式/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://attilaolah.eu/2013/11/29/json-decoding-in-go/\" target=\"_blank\" rel=\"external\">JSON decoding in go</a></li>\n<li><a href=\"http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/\" target=\"_blank\" rel=\"external\">JSON and struct composition in go</a></li>\n<li><a href=\"https://eager.io/blog/go-and-json/\" target=\"_blank\" rel=\"external\">Go and JSON</a></li>\n<li><a href=\"https://github.com/ChimeraCoder/gojson\" target=\"_blank\" rel=\"external\">Generate go struct based on JSON</a></li>\n<li><a href=\"https://github.com/bitly/go-simplejson\" target=\"_blank\" rel=\"external\">Simple JSON</a></li>\n<li><a href=\"https://github.com/pquerna/ffjson\" target=\"_blank\" rel=\"external\">Faster JSON serialization for Go</a></li>\n<li><a href=\"https://github.com/spf13/cast\" target=\"_blank\" rel=\"external\">Type casting</a></li>\n</ul>\n","categories":[],"tags":["collection","go"]},{"title":"【翻译】 Angularjs 的一些模式","url":"https://vincenthou.github.io/2015/04/06/【翻译】-Angularjs-的一些模式/","content":"<h1 id=\"Angularjs-的一些模式\"><a href=\"#Angularjs-的一些模式\" class=\"headerlink\" title=\"Angularjs 的一些模式\"></a>Angularjs 的一些模式</h1><p>好久没有整理文章了，这次放个大招 :smile:。使用AngularJS开发应用也有一年的时间，感觉算是比较熟悉了，总想整理些东西出来沉淀一下，但每次想写的时候还是感觉写的深度不够。看了<a href=\"https://github.com/mgechev/angularjs-in-patterns\" target=\"_blank\" rel=\"external\">angularjs-in-patterns</a>，感觉正好和自己想整理的东西比较契合，就偷懒翻译一下，只是翻译之余结合项目中的经验，加入了自己的注解。还记得AngularJS的Demo看起来是多么的激动人心，理想很丰满，现实很骨感，真正工程应用起来也是各种的坑啊~~但是AngularJS的很多设计理念和开发思想还是值得借鉴的。也正是这些精心的设计节省了很多的代码，开发效率得到了很大的提升，但有时候原来一些看起来很简单的bug反而变得更加难修。个人感觉AngualrJS还是有他的适用场景的，不是所有项目都适合跟风式地上，CMS在这种模式下可能效果更好些。不过不管怎么说，AngularJS都是组件化的一个很好的思路，DRY在他的核心组件中都有体现。下面闲话少扯，进入正题。</p>\n<!--toc-->\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#abstract\">概要</a></li>\n<li><a href=\"#introduction\">介绍</a></li>\n<li><a href=\"#angularjs-overview\">AngularJS 概述</a><ul>\n<li><a href=\"#partials\">模版</a></li>\n<li><a href=\"#controllers\">控制器</a></li>\n<li><a href=\"#scope\">作用域</a></li>\n<li><a href=\"#directives\">指令</a></li>\n<li><a href=\"#filters\">过滤器</a></li>\n<li><a href=\"#services\">服务</a></li>\n</ul>\n</li>\n<li><a href=\"#angularjs-patterns\">AngularJS 模式</a><ul>\n<li><a href=\"#services-1\">服务</a><ul>\n<li><a href=\"#singleton\">单例</a></li>\n<li><a href=\"#factory-method\">工厂方法</a></li>\n<li><a href=\"#decorator\">装饰器</a></li>\n<li><a href=\"#facade\">门面</a></li>\n<li><a href=\"#proxy\">代理</a></li>\n<li><a href=\"#active-record\">活动记录</a></li>\n<li><a href=\"#intercepting-filters\">拦截过滤器</a></li>\n</ul>\n</li>\n<li><a href=\"#directives-1\">指令</a><ul>\n<li><a href=\"#composite\">组合</a></li>\n</ul>\n</li>\n<li><a href=\"#interpreter\">拦截器</a><ul>\n<li><a href=\"#template-view\">模板视图</a></li>\n</ul>\n</li>\n<li><a href=\"#scope-1\">作用域</a><ul>\n<li><a href=\"#observer\">观察者</a></li>\n<li><a href=\"#chain-of-responsibilities\">责任链</a></li>\n<li><a href=\"#command\">命令</a></li>\n</ul>\n</li>\n<li><a href=\"#controller-1\">控制器</a><ul>\n<li><a href=\"#page-controller\">页面控制器</a></li>\n</ul>\n</li>\n<li><a href=\"#others\">其他</a><ul>\n<li><a href=\"#module-pattern\">模块模式</a></li>\n</ul>\n</li>\n<li><a href=\"#data-mapper\">数据映射</a></li>\n</ul>\n</li>\n<li><a href=\"#references\">参考</a></li>\n</ul>\n<!--endtoc-->\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>学习新玩意最好的方法就是看看你已经烂熟于心的东西是怎么在新玩意里面被应用起来的。这篇文档不是要让读者熟悉设计和架构模式，只是想聊聊基本的OOP概念，设计模式和机构模式。<br>这篇文章的主要是想讲讲不同的软件设计和架构模式是如何在AngularJS和AngularJS的单页应用中应用的。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>本文第一章先从AngularJS框架的简单概要说起。这点概要解释了AngularJS的主要组件 - 指令，过滤器，控制器，服务，作用域。第二章的部分描述了在框架中不同的设计和架构模式的实现。这些模式是按照被应用模式的AngularJS组件进行分组的。如果一些模式被多个组件使用，将会有显示的声明。最后一章包含了一些在大多数AngularJS单页应用中被使用的架构模式。</p>\n<h2 id=\"AngularJS-概述\"><a href=\"#AngularJS-概述\" class=\"headerlink\" title=\"AngularJS 概述\"></a>AngularJS 概述</h2><p>AngularJS是Google开发的Javascript框架。他就是为了开发基于增删改查的单页应用而生的。SPA是一种网页应用，它只会加载一次，在用户对它进行任何进一步的操作时都不需要重新加载整个页面。这就意味着所有的应用资源（数据，模板，脚本，样式）都要在初始请求载入或者更好 - 按需加载。因为大部分的增删改查应用有共同的特性和需求，AngularJS就是要提供开箱即用的优化工具集。一些重要的AngularJS特性是：</p>\n<ul>\n<li>双向数据绑定</li>\n<li>依赖注入</li>\n<li>关注点分离</li>\n<li>可测性</li>\n<li>抽象</li>\n</ul>\n<p>关注点分离是通过将每个AngularJS应用拆分成不同的组件，例如：</p>\n<ul>\n<li>模板</li>\n<li>控制器</li>\n<li>指令</li>\n<li>服务</li>\n<li>过滤器</li>\n</ul>\n<p>这些组件能够在不同的模块内被分组，这样有助于获得更高层次的抽象并且控制复杂度。每个组件封装了应用逻辑的某个特定的逻辑。</p>\n<p><strong>注解：</strong> 单页应用提升了应用的使用体验，但是却提高了开发的复杂度，复杂度过高促使软件可控性下降，bug增多。所以其实单页应用不是银弹，根据需要有针对性的使用才好，控制好可变化的范围和变化时机才能更好利用单页应用的特性。前端应用现在变得越来越复杂，很多原来后端的概念和工作都拿到前端来做，静态资源的管理更多是一个工程问题而不仅仅是个技术问题。对于首次全部加载的方式没有什么特别的，就是对于AMD(requirejs)模块使用R.js压成一个文件，前后端公用CommonJS模块使用browserfiy打包成一个bundle，使用强缓存，数字签名管理性能和部署。这种方式当然是比较简单粗暴的，更合理的方式当然是按需加载，特别是大型项目中尤为重要。现在有很多现成的工具支持lazyload，requirejs原生就支持，当然跟AngularJS也有很好的集成工具，在模块层面，controller层面都能做。这里涉及到更重要的点其实是合理的模块差分，公共模块的分离，复用范围的控制，更合理的划分加载模式才能达到更好的加载性能。AngularJS内置组件的定义很规范，也正是这种关注点分离的思想保证了前端模块的可测性。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>模板就是HTML字符串，在元素或者属性中定义的AngularJS表达式会包含在模板里，AngularJS和其他框架最大的一个不同点就在于AngularJS的模板不是一种需要被转化为HTML的中间格式（mustache.js和handlerbars就是这种套路）。<br>初始时，每个单页应用加载 <code>index.html</code> 文件。在AngularJS的应用中，这个文件会包含一组标准和自定义的HTML属性，元素和注释，这些东西会配置并且拉起应用。每个后续的用户动作只需要加载另外的模板或者改变应用的状态，例如通过框架提供的数据绑定。</p>\n<p><strong>简单模板</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>&gt;</span></div><div class=\"line\"> <span class=\"comment\">&lt;!-- Body tag augmented with ngController directive  --&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"bar\"</span>&gt;</span></div><div class=\"line\">   <span class=\"comment\">&lt;!-- Button tag with ng-click directive, and</span></div><div class=\"line\"><span class=\"comment\">          string expression 'buttonText'</span></div><div class=\"line\"><span class=\"comment\">          wrapped in \"&#123;&#123; &#125;&#125;\" markup --&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"changeFoo()\"</span>&gt;</span>&#123;&#123;buttonText&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>模板通过AngularJS表达式定义对于什么样的用户操作会触发什么样的动作被执行。在上面的例子中， <code>ng-click</code> 属性表明在当前作用域下的 <code>changeFoo</code> 方法会在用户点击之后执行。</p>\n<p><strong>注解：</strong> AngularJS的模板支持很多声明式语法。为了语义，表现和结构的分离，前端一直推荐非侵入式的JS编程。AnguarJS反其道而行之，支持很多与页面绑定的行为定义，个人感觉完美主义还是要结合现实的，毕竟侵入式的写法真的很方便，而且其实很多行为本身就是是和语义结构绑定的。结合UI-Router可以实现更方便的自状态页面控制，让模板的渲染更加灵活。</p>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>AngularJS的控制器就是Javascript的方法，通过在 <em>scope</em> 上面绑定方法来处理用户和应用的交互（例如鼠标事件，键盘事件等等）。对于控制器需要的外部依赖组件都通过AngularJS的依赖注入机制提供。控制器也通过在 <em>scope</em> 上面绑定数据提供模板的 <em>model</em>。我们能把这种数据当作 <em>view model</em>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyController</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.buttonText = <span class=\"string\">'Click me to change foo!'</span>;</div><div class=\"line\">  $scope.foo = <span class=\"number\">42</span>;</div><div class=\"line\"></div><div class=\"line\">  $scope.changeFoo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $scope.foo += <span class=\"number\">1</span>;</div><div class=\"line\">    alert(<span class=\"string\">'Foo changed'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举个例子，如果我们把上面的样例控制器绑在前面章节示例的模板上面，用户就能和应用进行一些不同方式的交互。</p>\n<ol>\n<li>通过在文本输入框中输入文字改变 <code>foo</code> 的值。因为双向绑定机制，输入的值将会立即反映到 <code>foo</code> 的值上面。</li>\n<li>通过点击带有 <code>Click me to change foo!</code> 标签的按钮也能改变 <code>foo</code> 的值</li>\n</ol>\n<p>如果之前被定义过，所有的自定义元素，属性，注释或者类都能被识别为AngularJS <em>指令</em>。</p>\n<p><strong>注解：</strong> 控制器大都是跟页面绑定的，可复用性相对较差，跟之前用Jquery做页面的思路其实大致相同，都是做一些初始化，数据缓存，事件绑定。就是通过AJAX局部刷新的时候比较方便，双向绑定的机制让我们只需要关心维护视图模型，视图模型变动引起的视图改变通过监听视图模型的指令来完成，很多不复杂并且相同的视图更新操作都能封装起来。MVC在前端也有很多尝试，但个人觉得Controller一层可能有点鸡肋，一般场景下的视图模型和视图的关联都是很固定的，这也是现在MVVM更流行的其中一个原因吧。忍不住赞一下依赖注入特性，真的是开箱即用，只是为了压缩写法上稍微有些不自然，不过现在好像有工具能支持去掉二次声明了。</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>AngularJS的作用域就是个暴露给模板的Javascript对象。作用域能够包含不同的属性 -内置类型，对象和方法。所有绑定在作用域上面的方法能够通过AngularJS指定作用域的模板里面定义的表达式求值被调用，也能够保留作用域的引用被组件直接调用。通过使用合适的 <em>指令</em>，关联到作用域的数据能够被绑定到视图上。每次页面的变动都会反映到作用域属性上，同时每次作用域属性的变动都会反映到页面上。</p>\n<p>作用域通过原型链连接（除了以 <em>isolated</em> 显示开头的作用域）是任何AngularJS应用的另外一个重要作用域特性。因为子作用域的父级属性是它们的直接或者间接原型，这样使得任何的子作用域就能调用父作用域的方法。</p>\n<p>作用域继承通过下面的例子说明：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"BaseCtrl\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ChildCtrl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-method\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"foo()\"</span>&gt;</span>Parent method<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"bar()\"</span>&gt;</span>Child method<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BaseCtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Base foo'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ChildCtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Child bar'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>div#child</code> 绑上 <code>ChildCtrl</code> ，但是因为注入到 <code>ChildCtrl</code> 中的作用域原型继承自父作用域 (例如 注入到 <code>BaseCtrl</code> 中的作用域) <code>foo</code> 方法能够被 <code>button#parent-method</code> 访问到。</p>\n<p><strong>注解：</strong> Javascript本身没有继承机制，所有的所谓继承都是通过原型链实现的，AngularJS的作用域也就有了原型链的特性，当前没有向上找，一般情况下不推荐这种依赖继承层级关系的数据传递，父子级别的数据依赖还是通过pub/sub机制比较好，需求变动改动起来也方便。有时候依赖这种层次关系的数据产生的bug调起来真的很头大，通过Controller As的语法能够更好避免类似的问题。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>所有DOM操作应该被放在指令里面。作为一条经验法则，当你在Controller里面有DOM操作的需要，要么你就弄个新的出来，要么重构已经有的能够处理必要DOM操作的指令。<br>每个指令都会有个名字和相关联的逻辑。最简单的指令示例中仅仅包含了名字和 <em>postLink</em> 方法的定义，所有必要的逻辑都被封装在指令里面。更复杂的指令中可能包含一些属性，例如：</p>\n<ul>\n<li>template</li>\n<li>compile 方法</li>\n<li>link 方法</li>\n<li>等等…</li>\n</ul>\n<p>通过引用指令的名字，指令能够在声明式模板中被使用。</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.directive(<span class=\"string\">'alertButton'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    template: <span class=\"string\">'&lt;button ng-transclude&gt;&lt;/button&gt;'</span>,</div><div class=\"line\">    scope: &#123;</div><div class=\"line\">      content: <span class=\"string\">'@'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    replace: <span class=\"literal\">true</span>,</div><div class=\"line\">    restrict: <span class=\"string\">'E'</span>,</div><div class=\"line\">    transclude: <span class=\"literal\">true</span>,</div><div class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">scope, el</span>) </span>&#123;</div><div class=\"line\">      el.click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(scope.content);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alert-button</span> <span class=\"attr\">content</span>=<span class=\"string\">\"42\"</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">alert-button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面例子中的标签 <code>&lt;alert-button&gt;&lt;/alert-button&gt;</code> 会被按钮元素给替换。当用户点击按钮，字符串 <code>42</code> 会被弹出来。</p>\n<p>因为这篇文章不是要解释AngularJS的复杂API，我们对于指令的描述在这里打住。</p>\n<p><strong>注解：</strong> 指令作为AngularJS对于Web Components的实现，在一定程度上实现了UI的组件化开发，但是基于视图模型的限制，AngularJS能够实现的组件功能相对较弱，因为双向绑定的特性也带来了AngularJS组件的性能瓶颈。有时候一个指令的外部接口输入输出格式是什么样的，哪些要双向绑定，哪些要单向绑定，哪些要有回调方法可能很难一次定义清楚，要不断重构和积累。其实ReactJS在UI组件化上的效果更好，因为只关注视图层，它可以很方便的继承到现有系统中，也有像Angular-react这样的项目可以结合两者的优势。</p>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>AngularJS的过滤器就是用来封装格式化数据的必要逻辑。一般过滤器用在模板里面，但是在控制器，指令， <em>服务</em> 和其他的过滤器里面通过依赖注入也是能够访问到的。</p>\n<p>这里有个样例过滤器的定义，就是把指定的字符串中字母转化为大写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.filter(<span class=\"string\">'uppercase'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (str || <span class=\"string\">''</span>).toUpperCase();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在模板里面这个过滤器能够通过Unix的管道语法来使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; name | uppercase &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在控制器里面，过滤器能够像下面一样使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyCtrl</span>(<span class=\"params\">uppercaseFilter</span>) </span>&#123;</div><div class=\"line\">  $scope.name = uppercaseFilter(<span class=\"string\">'foo'</span>); <span class=\"comment\">//FOO</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注解：</strong> 大部分情况下，AngularJS的内置过滤器就能满足我们大部分的应用需要了，结合业务需要会有少量的补充，本质上就是对于数据集的重新格式化，结合列表可以实现排序或者预处理的工作，用惯了Linux系统看着这语法还是很亲切的。</p>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>任何一段不属于上面描述组件的逻辑块应该被放在服务中。通常服务封装领域相关逻辑，持久化逻辑，异步请求，长连接等等。当应用中的控制器变得越来越臃肿，重复的代码应该放到服务中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.service(<span class=\"string\">'Developer'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'Foo'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.motherLanguage = <span class=\"string\">'JavaScript'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.live = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.code();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>服务能够被注入到任何支持依赖注入的组件中（控制器，其他服务，过滤器，指令）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyCtrl</span>(<span class=\"params\">developer</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> developer = <span class=\"keyword\">new</span> Developer();</div><div class=\"line\">  developer.live();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注解：</strong> 服务可以看作我们应用开发中的Util方法集，通过特定功能和应用场景分组，将重复的代码抽取出来，因为需求上一般呈现出的是功能上的一致性，公共需求的改动只需要在单一的地方处理就好了。例如，异步请求的调用，当我们需要统一处理后台异常状态码的时候，改动可以最小化，同时不会对原有业务逻辑产生影响。有些公共服务是能够直接识别出来的，更多时候在业务需求基本稳定之后，Copy&amp;Paste的代码就要通过重构提取成一个服务。</p>\n<h2 id=\"AngularJS-模式\"><a href=\"#AngularJS-模式\" class=\"headerlink\" title=\"AngularJS 模式\"></a>AngularJS 模式</h2><p>下面的章节，我们就要看看传统的设计和架构模式是怎样在AngularJS的组件中组合应用的。</p>\n<p>最后一章我们会看看一些经常在AngularJS单页应用开发（不仅限于此）中使用的架构模式。</p>\n<h3 id=\"服务-1\"><a href=\"#服务-1\" class=\"headerlink\" title=\"服务\"></a>服务</h3><h4 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h4><blockquote>\n<p>单例模式是一种限制类的实例只有一个的设计模式。 当只需要一个对象来协调系统中的操作时，这种设计模式很有用。这种概念有时指代只有一个对象存在会更高效运作或者将初始化限制在一定数量的对象上的系统。</p>\n</blockquote>\n<p>下面的UML图中描绘了单例设计模式。</p>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/singleton.svg\" alt=\"单例\"></p>\n<p>当指定了任何组件需要的依赖之后，AngularJS是遵循下面的算法处理的：</p>\n<ul>\n<li>取得依赖组件的名字并且在定义在词法闭包中的哈希表里查找（所以它具有私有可见性）。</li>\n<li>如果依赖存在，AngularJS将它作为参数传递给需要它的组件。</li>\n<li>如果依赖不存在:<ul>\n<li>AngularJS 通过调用依赖提供者的工厂方法将它实例化（例如 <code>$get</code>）。为了处理所有的依赖需要的必要依赖，初始化依赖可能需要基于相同的算法递归的调用。这个过程可能会造成循环以来。</li>\n<li>AngularJS 在上面提到的哈希表里面缓存它。</li>\n<li>AngularJS 将它作为参数传递给依赖它的组件。</li>\n</ul>\n</li>\n</ul>\n<p>我们能够在AngularJS源码中的 <code>getService</code> 方法里看到清楚的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getService</span>(<span class=\"params\">serviceName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (cache.hasOwnProperty(serviceName)) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache[serviceName] === INSTANTIATING) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'cdep'</span>, <span class=\"string\">'Circular dependency found: &#123;0&#125;'</span>, path.join(<span class=\"string\">' &lt;- '</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> cache[serviceName];</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      path.unshift(serviceName);</div><div class=\"line\">      cache[serviceName] = INSTANTIATING;</div><div class=\"line\">      <span class=\"keyword\">return</span> cache[serviceName] = factory(serviceName);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (cache[serviceName] === INSTANTIATING) &#123;</div><div class=\"line\">        <span class=\"keyword\">delete</span> cache[serviceName];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      path.shift();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们能够把所有的服务当作是单例的，因为所有的服务都不会被实例化两次。我们能够把缓存看作单例管理器。这里跟标准的单例有点不一样，我们不是在构造方法中保存对于单例的静态私有引用，而是在单例管理器（在上面的代码片段中定义为 <code>cache</code>）里面直接保留了引用。</p>\n<p>通过这种方式服务实际上都是单例但是不是通过单例模式实现的，这样比标准的实现提供了一些便利：</p>\n<ul>\n<li>它提升了你源代码的可测性</li>\n<li>你能控制单例对象的创建（在我们的例子中IoC容器通过延迟实例化单例为我们控制它）</li>\n</ul>\n<p>对相关主题的讨论可以看 Misko Hevery 在谷歌测试博客上的 <a href=\"http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html\" target=\"_blank\" rel=\"external\">文章</a> 。</p>\n<h4 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h4><blockquote>\n<p>工厂方法模式是一种创建者模式，工厂方法用来处理对象的创建而不需要指定具体将要被创建对象所对应的类。 这是通过一个工厂方法来创建对象来做到的，可能是在一个实现定义接口（抽象类） 的类（实现类）或者在基类中实现，通过继承类覆盖，而不是通过构造器。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/factory-method.svg\" alt=\"工厂方法\"></p>\n<p>让我们看下面的代码片段:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.config(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$provide</span>) </span>&#123;</div><div class=\"line\">  $provide.provider(<span class=\"string\">'foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> baz = <span class=\"number\">42</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//Factory method</span></div><div class=\"line\">      $get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> baz = bar.baz();</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          baz: baz</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面的代码我们使用 <code>config</code> 回调来定义新的 “provider”. Provider 是个新对象, 有个叫 <code>$get</code>的方法。因为在JavaScript里我们不会有接口，并且这种语言是鸭子类型的，对于providers有这么个命名工厂方法的约定。</p>\n<p>每个服务，过滤器，指令和控制器都有一个provider (例如 对象有个叫 <code>$get</code> 的工厂方法), 负责创建组件的实例。</p>\n<p>我们可以深入挖掘下AngularJS的实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">createInternalInjector(instanceCache, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">servicename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> provider = providerInjector.get(servicename + providerSuffix);</div><div class=\"line\">  <span class=\"keyword\">return</span> instanceInjector.invoke(provider.$get, provider, <span class=\"literal\">undefined</span>, servicename);</div><div class=\"line\">&#125;, strictDi));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self, locals, serviceName</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> locals === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    serviceName = locals;</div><div class=\"line\">    locals = <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> args = [],</div><div class=\"line\">      $inject = annotate(fn, strictDi, serviceName),</div><div class=\"line\">      length, i,</div><div class=\"line\">      key;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>, length = $inject.length; i &lt; length; i++) &#123;</div><div class=\"line\">    key = $inject[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> key !== <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'itkn'</span>,</div><div class=\"line\">              <span class=\"string\">'Incorrect injection token! Expected service name as string, got &#123;0&#125;'</span>, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    args.push(</div><div class=\"line\">      locals &amp;&amp; locals.hasOwnProperty(key)</div><div class=\"line\">      ? locals[key]</div><div class=\"line\">      : getService(key)</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn.$inject) &#123;</div><div class=\"line\">    <span class=\"comment\">// this means that we must be an array.</span></div><div class=\"line\">    fn = fn[length];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fn.apply(self, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的例子中我们能够看到 <code>$get</code> 方法实际是如何被使用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">instanceInjector.invoke(provider.$get, provider, <span class=\"literal\">undefined</span>, servicename)</div></pre></td></tr></table></figure>\n<p>上面的代码片段通过调用 <code>instanceInjector</code> 的 <code>invoke</code> 方法将指定服务的工厂方法（例如 <code>$get</code>）作为第一个参数来调用。 在 <code>invoke</code> 方法内工厂方法作为第一个参数被 <code>annotate</code> 调用。注解通过AngularJS的依赖注入机制处理所有的依赖，就像上面考虑到的。当所有的依赖都被处理好之后工厂方法被调用： <code>fn.apply(self, args)</code>。</p>\n<p>如果我们按照UML图来考虑上面的行为，我们能够称这个provider是个 “ConcreteCreator”，而实际的组件是生产出来的”Product”。</p>\n<p>在这种场景下因为不是直接创建对象，使用工厂模式有一些好处。通过这种方式框架能够在新组件实例化的时候处理好样板：</p>\n<ul>\n<li>组件需要被实例化的最佳时机</li>\n<li>处理好组件必要的所有依赖</li>\n<li>指定组件被允许创建的最多实例数量（对于服务和过滤器只有单个，但是对于控制器会有多个）<h4 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h4></li>\n</ul>\n<blockquote>\n<p>装饰器模式（配器模式中也被称作包装器）是允许在不影响类创建的其他对象前提下将行为静态地或者动态地添加到独立对象上的一种设计模式。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/decorator.svg\" alt=\"装饰器\"></p>\n<p>AngularJS 提供了开箱即用扩展或者增强已有服务功能的方式。通过使用 <code>$provide</code> 的 <code>decorator</code> 方法，你可以创建任何先前定义服务或者第三方服务的包装器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.controller(<span class=\"string\">'MainCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">foo</span>) </span>&#123;</div><div class=\"line\">  foo.bar();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">myModule.factory(<span class=\"string\">'foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'I\\'m bar'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    baz: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'I\\'m baz'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">myModule.config(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$provide</span>) </span>&#123;</div><div class=\"line\">  $provide.decorator(<span class=\"string\">'foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$delegate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> barBackup = $delegate.bar;</div><div class=\"line\">    $delegate.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorated'</span>);</div><div class=\"line\">      barBackup.apply($delegate, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> $delegate;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面的例子定义了叫做 <code>foo</code> 的新服务。在 <code>config</code> 的回调中我们想要包装服务的名称 <code>&quot;foo&quot;</code>作为第一个参数被 <code>$provide.decorator</code> 调用，第二个工厂方法参数实现了真正的包装。 <code>$delegate</code> 保存了原始服务 <code>foo</code> 的引用。依赖于AngularJS的依赖注入机制，对于局部依赖的引用被作为构造函数的第一个参数传进去。<br>我们通过覆盖 <code>bar</code> 方法来装饰服务。实际的装饰只是通过额外调用 <code>console.log statement</code> - <code>console.log(&#39;Decorated&#39;);</code> 并且在这之后调用原始的有适当上下文的 <code>bar</code> 方法来扩展服务的 <code>bar</code> 方法。</p>\n<p>这种模式尤其在我们需要修改第三方服务的时候有用。如果需要多个相似的装饰器需要被添加（像对于多个方法的性能评估，授权，日志等等），我们会有很多的重复并且违背DRY原则. 在这种情况下使用<a href=\"http://en.wikipedia.org/wiki/Aspect-oriented_programming\" target=\"_blank\" rel=\"external\">面向切面编程</a>会更好. 我所知道AngularJS最好的AOP框架是这个 <a href=\"https://github.com/mgechev/angular-aop\" target=\"_blank\" rel=\"external\">github.com/mgechev/angular-aop</a>.</p>\n<h4 id=\"门面\"><a href=\"#门面\" class=\"headerlink\" title=\"门面\"></a>门面</h4><blockquote>\n<p>门面就是个封装了一大坨代码（例如某个类库），仅仅提供最简单接口的对象。门面能够：</p>\n<ol>\n<li>让软件库更好用，理解并且测试，因为门面对于公共的任务有便捷的方法；</li>\n<li>基于同样的原因让软件库可读性更好；</li>\n<li>在库内部减少对于外部代码的依赖，因为大部分代码使用门面，这样允许在系统中有更多的复杂性；</li>\n<li>将定义的很烂的一组API用一个设计良好的API来封装（按照不同任务的需要）。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/facade.svg\" alt=\"门面\"></p>\n<p>在AngularJS中有很多门面. 每次要为给定功能提供更高层次API的时候，你实际上就是在创建一个门面。</p>\n<p>例如，让我们看看我们怎么创建一个 <code>XMLHttpRequest</code> POST 请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest(),</div><div class=\"line\">    url = <span class=\"string\">'/example/new'</span>,</div><div class=\"line\">    params = <span class=\"built_in\">encodeURIComponent</span>(data);</div><div class=\"line\">http.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">http.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">http.setRequestHeader(<span class=\"string\">\"Content-length\"</span>, params.length);</div><div class=\"line\">http.setRequestHeader(<span class=\"string\">\"Connection\"</span>, <span class=\"string\">\"close\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(http.readyState == <span class=\"number\">4</span> &amp;&amp; http.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">    alert(http.responseText);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">http.send(params);</div></pre></td></tr></table></figure>\n<p>但是如果你想要将数据通过AngularJS的 <code>$http</code> 服务来发送，你会这样写:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$http(&#123;</div><div class=\"line\">  method: <span class=\"string\">'POST'</span>,</div><div class=\"line\">  url: <span class=\"string\">'/example/new'</span>,</div><div class=\"line\">  data: data</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  alert(response);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>or we can even:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$http.post(<span class=\"string\">'/someUrl'</span>, data)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  alert(response);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>第二种选择提供了预配置的版本，对于指定的URL创建了一个HTTP的POS请求。</p>\n<p>更高程度的抽象通过 <code>$resource</code> 创建,  <code>$resource</code> 是基于 <code>$http</code> 服务的. 我们会在<a href=\"#active-record\">活动记录</a>和<a href=\"#proxy\">代理</a>章节中进一步讨论 <code>$http</code> 服务.</p>\n<h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><blockquote>\n<p>一个代理，一般化的形式上，是某个类作为其他东西的接口工作。代理能够作为一切的接口： 网络连接，内存中的大对象，文件或者一些其他难以或者不能复制的资源。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/proxy.svg\" alt=\"代理\"></p>\n<p>我们可以分出三种不同类型的代理：</p>\n<ul>\n<li>虚拟代理</li>\n<li>远程代理</li>\n<li>受保护代理</li>\n</ul>\n<p>在这个子章节中我们会看看AngularJS对于虚拟代理的实现。</p>\n<p>在下面的代码片段中，调用了叫 <code>User</code> 的 <code>$resource</code> 实例方法 <code>get</code> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> User = $resource(<span class=\"string\">'/users/:id'</span>),</div><div class=\"line\">    user = User.get(&#123; <span class=\"attr\">id</span>: <span class=\"number\">42</span> &#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(user); <span class=\"comment\">//&#123;&#125;</span></div></pre></td></tr></table></figure>\n<p><code>console.log</code> 会打印出来个空对象。因为AJAX请求发生在后台，当 <code>User.get</code> 被调用的时候是异步的，在 <code>console.log</code> 被调用的时候，我们还没有获得实际的user。在 <code>User.get</code> 发送GET请求之后，仅仅返回一个空对象并且保留对于它的引用。我们可以把这个对象当作虚拟代理（一个简单的占位符）。在客户端获取到服务器上实际的数据之后这个占位符才会被填充。</p>\n<p>AngularJS是怎么做到的呢? 好了，让我们看看下面的代码片段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainCtrl</span>(<span class=\"params\">$scope, $resource</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> User = $resource(<span class=\"string\">'/users/:id'</span>),</div><div class=\"line\">  $scope.user = User.get(&#123; <span class=\"attr\">id</span>: <span class=\"number\">42</span> &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"user.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>开始的时候，上面的代码片段执行， <code>$scope</code> 对象的 <code>user</code> 属性会被赋予一个空对象 (<code>{}</code>)，这意味着 <code>user.name</code> 将会是未定义，啥也不会渲染。AngularJS内部会保留这个空对象的引用。一旦服务器返回get请求的数据，AngularJS 会用从服务其上获取到的数据填充对象。在下个 <code>$digest</code> 循环中AngularJS会检测到 <code>$scope.user</code>的变化, 进而触发视图的渲染。</p>\n<h4 id=\"活动记录\"><a href=\"#活动记录\" class=\"headerlink\" title=\"活动记录\"></a>活动记录</h4><blockquote>\n<p>活动记录是一种包含了数据和行为的对象。通常这种对象的大部分数据是持久化的。活动记录的职责就是处理好和数据库增删改查的通信。它可能会将这种职责代理给更低级别的对象，但是会调用活动记录的实例或者静态方法来和数据库通信。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/active-record.svg\" alt=\"活动记录\"></p>\n<p>AngularJS 定义了叫 <code>$resource</code> 的服务。在当前的AngularJS版本(1.2+)，它是排除在AngularJS的核心模块之外的.</p>\n<p>依据AngularJS的文档， <code>$resource</code> 是：</p>\n<blockquote>\n<p>一个创建了跟Restful服务器数据源进行交互的资源对象工厂实例<br>资源对象返回的对象有更高层次的方法，这样就不需要直接使用相对底层的$http服务</p>\n</blockquote>\n<p><code>$resource</code> 是这样用的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> User = $resource(<span class=\"string\">'/users/:id'</span>),</div><div class=\"line\">    user = <span class=\"keyword\">new</span> User(&#123;</div><div class=\"line\">      name: <span class=\"string\">'foo'</span>,</div><div class=\"line\">      age : <span class=\"number\">42</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">user.$save();</div></pre></td></tr></table></figure>\n<p>调用 <code>$resource</code> 会为我们的模型实例创建一个构造方法。每个模型示例都有用于CRUD的方法。</p>\n<p>这样我们就能够像下面这样使用构造方法和上面的静态方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.get(&#123; <span class=\"attr\">userid</span>: userid &#125;);</div></pre></td></tr></table></figure>\n<p>上面的代码会立刻返回个空对象并且保留它的引用。一旦成功返回并且被解析，AngularJS 会用回去到的数据填充这个对象 (看 <a href=\"#proxy\">代理</a>)。</p>\n<p>你可以找到更多关于 <code>$resource</code> <a href=\"http://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/\" target=\"_blank\" rel=\"external\">$resource的魔法</a> and <a href=\"https://docs.angularjs.org/api/ngResource/service/$resource\" target=\"_blank\" rel=\"external\">AngularJS 的文档</a> 的信息。</p>\n<p>鉴于 Martin Fowler 这样说</p>\n<blockquote>\n<p>活动记录的责任就是为了CRUD跟数据库打交道</p>\n</blockquote>\n<p><code>$resource</code> 没有严格意义上实现活动记录模式，因为它是跟Restful服务而不是数据库打交道。不管怎么样，我们可以把它当作“像活动记录一样的Restful通信”。</p>\n<h4 id=\"拦截过滤器\"><a href=\"#拦截过滤器\" class=\"headerlink\" title=\"拦截过滤器\"></a>拦截过滤器</h4><blockquote>\n<p>在web请求中，为实现公共的预处理和后处理创建一个支持组合的过滤器链。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/intercepting-filters.svg\" alt=\"Composite\"></p>\n<p>有时候你需要对HTTP请求做一些预处理或者后处理。你在HTTP的请求/响应中做预处理或者后处理来包含日志，安全或者其他会被请求头部和消息体影响的东西。基本上拦截过滤器模式包含一个过滤器链，在链上的过滤器都会按照指定的顺序处理数据。每个过滤器的输出都是下个的输入。</p>\n<p>在AngularJS里面 <code>$httpProvider</code> 用了拦截过滤器的模式。 <code>$httpProvider</code> 有个叫 <code>interceptors</code> 的数组, 包含了一堆对象。每个对象都有叫: <code>request</code>, <code>response</code>, <code>requestError</code>, <code>responseError</code> 的属性。</p>\n<p><code>requestError</code> 是个拦截器, 在前面的拦截器抛出错误或者在promise中被拒绝掉的时候会被调用，同样的，<code>responseError</code> 会在前一个 <code>response</code> 拦截器抛出错误之后被调用。</p>\n<p>这有个使用对象语法创建拦截器的基本例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$httpProvider.interceptors.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q, dependency1, dependency2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">   <span class=\"string\">'request'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// same as above</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'response'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// same as above</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"指令-1\"><a href=\"#指令-1\" class=\"headerlink\" title=\"指令\"></a>指令</h3><h4 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h4><blockquote>\n<p>组合模式是个隔离设计模式。组合模式是说，一组对象按照同样的方式被当作对象的某个实例属性。组合的目的是将对象组合到一个树形结构中来代表局部和整体的层次关系。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/composite.svg\" alt=\"组合\"></p>\n<p>基于经典设计模式理论，MVC就是下面模式的组合：</p>\n<ul>\n<li>策略</li>\n<li>组合</li>\n<li>观察者</li>\n</ul>\n<p>理论中定义视图是组件的组合。在AngularJS中有相似的解决方案。我们的视图由指令和DOM元素的组合来构成，指令解释放在视图上的。</p>\n<p>让我们看看下面的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">zippy</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Zippy\"</span>&gt;</span></div><div class=\"line\">      Zippy!</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">zippy</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.directive(<span class=\"string\">'zippy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    restrict: <span class=\"string\">'E'</span>,</div><div class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&lt;div class=\"header\"&gt;&lt;/div&gt;&lt;div class=\"content\" ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'</span>,</div><div class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">scope, el</span>) </span>&#123;</div><div class=\"line\">      el.find(<span class=\"string\">'.header'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        el.find(<span class=\"string\">'.content'</span>).toggle();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个例子定义了一个简单的UI组件指令。这个叫zippy的组件有头部和内容。点击头部会触发内容的显示或者隐藏。</p>\n<p>从第一个例子里面我们能注意到整个DOM树是元素的组合。根元素是 <code>html</code> 元素，直接跟着嵌套的 <code>head</code> 和 <code>body</code> 元素等等…</p>\n<p>在第二个Javascript的例子中，我们看到指令的 <code>template</code> 里面包含 <code>ng-transclude</code> 标记。这意味着在指令 <code>zippy</code> 里面我们有另外一个叫 <code>ng-transclude</code> 的指令, 也就是指令的组合。理论上我们能够在到达叶子节点之前一直嵌套组件。</p>\n<h3 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h3><blockquote>\n<p>在软件编程中，解释器模式是一种指定如何解析语言中句子的设计模式。最基本的思想就是给每个符号（终止符或者非终止符）作为某种语言中的类。语言里句子的语法树就是组合模式中的一个实例并且被用来解析句子。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/interpreter.svg\" alt=\"解释器\"></p>\n<p>在 <code>$parse</code> 服务里AngularJS提供了自己对于领域驱动语言解析器的实现。被使用的DSL是被简化和修改过的Javascript语言。<br>Javascript表达式和AngularJS表达式最大的不同在于AngularJS表达式：</p>\n<ul>\n<li>可能包含像UNIX管道语法的过滤器</li>\n<li>不会抛出任何错误</li>\n<li>没有任何流程控制语句（异常，循环，if声明尽管你能使用三元运算符）</li>\n<li>在指定上下文中被解析（当前 <code>$scope</code> 的上下文）</li>\n</ul>\n<p>在 <code>$parse</code> 服务中有两个主要的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Responsible for converting given string into tokens</span></div><div class=\"line\"><span class=\"keyword\">var</span> Lexer;</div><div class=\"line\"><span class=\"comment\">//Responsible for parsing the tokens and evaluating the expression</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parser;</div></pre></td></tr></table></figure>\n<p>一旦指定表达式被标记化，基于性能的考虑就会被内部缓存。</p>\n<p>AngularJS DSL里面终止性的表达式是这样定义的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> OPERATORS = &#123;</div><div class=\"line\">  <span class=\"comment\">/* jshint bitwise : false */</span></div><div class=\"line\">  <span class=\"string\">'null'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;&#125;,</div><div class=\"line\">  <span class=\"string\">'true'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;,</div><div class=\"line\">  <span class=\"string\">'false'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;,</div><div class=\"line\">  <span class=\"literal\">undefined</span>:noop,</div><div class=\"line\">  <span class=\"string\">'+'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">  <span class=\"string\">'*'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)*b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'/'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)/b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'%'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)%b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'^'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)^b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'='</span>:noop,</div><div class=\"line\">  <span class=\"string\">'==='</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a, b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)===b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'!=='</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a, b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)!==b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'=='</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)==b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'!='</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)!=b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'&lt;'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)&lt;b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'&gt;'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)&gt;b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'&lt;='</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)&lt;=b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'&gt;='</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)&gt;=b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'&amp;&amp;'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)&amp;&amp;b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'||'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)||b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'&amp;'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a(self, locals)&amp;b(self, locals);&#125;,</div><div class=\"line\">  <span class=\"string\">'|'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a,b</span>)</span>&#123;<span class=\"keyword\">return</span> b(self, locals)(self, locals, a(self, locals));&#125;,</div><div class=\"line\">  <span class=\"string\">'!'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self, locals, a</span>)</span>&#123;<span class=\"keyword\">return</span> !a(self, locals);&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们可以认为每个跟终止性表达符关联的方法是对 <code>AbstractExpression</code> 接口的实现。</p>\n<p>每个 <code>Client</code> 在指定上下文中解析特定的AngularJS表达式 - 特定的作用域.</p>\n<p>AngularJS表达式样例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// toUpperCase filter is applied to the result of the expression</span></div><div class=\"line\"><span class=\"comment\">// (foo) ? bar : baz</span></div><div class=\"line\">(foo) ? bar : baz | toUpperCase</div></pre></td></tr></table></figure>\n<h4 id=\"模板视图\"><a href=\"#模板视图\" class=\"headerlink\" title=\"模板视图\"></a>模板视图</h4><blockquote>\n<p>在页面上通过嵌入的标记语法渲染信息。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/template-view.svg\" alt=\"模板视图\"></p>\n<p>动态页面的渲染不是那么简单的事情。这里面掺和着一大堆的字符串连接，操作，还伴随着挫败感。写你自己的标记语言并且嵌入少量的表达式是创建动态页面更简单的方式，标记语言后续会被在特定的上下文里被解析出来，整个模板最终会被编译成最终的格式，在我们的情况下将会是HTML(或者可能是DOM)。这就是模板引擎做的事情 - 它们使用指定的DSL，在合适的上下文里解析并且将它转为最终的格式。</p>\n<p>模板更广泛用于后端。例如，你可以在HTML里面嵌入PHP代码来创建动态页面，你可以使用Smarty或者你可以为了在静态页面中嵌入Ruby代码使用eRuby。</p>\n<p>对于Javascript有很多的模板引擎，例如mustache.js, handlerbars等等。大部分引擎将模板作为字符串来操作。模板可以放在不同的地方 - 通过AJAX作为静态文件加载，作为 <code>script</code> 嵌入到你的视图中甚至是在Javascript里面。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"template/mustache\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Names<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">  &#123;&#123;#names&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">  &#123;&#123;/names&#125;&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>模板引擎通过在特定上下文里面编译它，将这个字符串转化成DOM元素。所有内嵌在标记语言中的表达式被解析并且替换为实际的值。</p>\n<p>例如如果你要在下面对象 <code>{ names: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] }</code> 的上下文里面解析上面的模板，我们就会得到：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Names<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>baz<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>AngularJS模板实际就是HTML，而不是如同传统模板一样仅仅是个中间的格式。<br>AngularJS编译器就是在DOM树上遍历并且找到已知的指令（元素，属性，类甚至是注释）。当AngularJS找到任何这些指令的时候，它会调用相关的逻辑，这也会包含在当前作用域下对于其他表达式的解析。</p>\n<p>例如:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"name in names\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在作用域的上下文：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.names = [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>];</div></pre></td></tr></table></figure>\n<p>会产生和上面一样的结果。这里主要的不同点在于模板不是包含在 <code>script</code> 标签而是HTMl里面。</p>\n<h3 id=\"作用域-1\"><a href=\"#作用域-1\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><h4 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h4><blockquote>\n<p>观察者模式是一种这样的软件设计模式：有个称作主题的对象，维护了它所依赖观察者的列表，在任何状态改变的时候，自动通知所有的观察者，通常就是调用观察者的某个方法。这种模式主要用于实现分布式的时间处理系统。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/observer.svg\" alt=\"观察者\"></p>\n<p>在AngularJS应用中有两种在作用域之间通信的基本方式。第一种方式通过在子作用域中调用父作用域中的方法。能这样做是因为子作用域通过原型继承自父作用域，上面有提到（看<a href=\"#scope\">作用域</a>）。这样允许我们进行单向的通信 - 子作用域到父作用域。有时候这在特定作用域中调用方法是很必要的。AngularJS提供了内置的观察者模式，允许这样做。另一个可能的观察者模式的用例是，当多个作用域对于特定的事件感兴趣的时候，触发事件的作用域并不会察觉到它。这样使得在不同作用域之间解耦成为可能，任何作用域都不应该察觉到其他作用域的存在。</p>\n<p>每个AngularJS的作用域都有共有的方法 <code>$on</code>, <code>$emit</code> 和 <code>$broadcast</code>。方法 <code>$on</code> 接受主题作为第一个参数并且将回调作为第二个。我们可以把回调当成是个观察者 - 一个实现了 <code>Observer</code> 接口的对象（在Javascript中函数是一等公民，所以你只需要实现 <code>notify</code> 方法）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExampleCtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.$on(<span class=\"string\">'event-name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//body</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过这种方式，当前的作用域“订阅”类型为 <code>event-name</code> 的事件. 当 <code>event-name</code> 事件在任何父或者子作用域中被触发的时候， <code>handler</code> 就会被调用。</p>\n<p>方法 <code>$emit</code> 和 <code>$broadcast</code> 在作用域链上分别用来触发向上传递或者向下传递的事件。<br>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExampleCtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.$emit(<span class=\"string\">'event-name'</span>, &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面例子中的作用域，向上级所有作用域触发 <code>event-name</code> 事件。这意味着所有父作用域上监听了 <code>event-name</code> 事件的作用域会被通知并且上面的回调方法会被调用。</p>\n<p>当 <code>$broadcast</code> 方法被调用的时候也是相似的。唯一不同的地方在于事件是被向下传递的 - 传给所有的子作用域。<br>每个作用域能够订阅任何事件，并且指定多个回调 （也就是说可以对于指定的事件关联多个观察者）。</p>\n<p>在JavaScript社区这一模式作为pus/sub更为人所知。</p>\n<h4 id=\"责任链\"><a href=\"#责任链\" class=\"headerlink\" title=\"责任链\"></a>责任链</h4><blockquote>\n<p>责任链模式是由一堆命令对象和一系列处理对象组成的一种设计模式。每个处理对象包含定义它能够处理的命令对象类型逻辑，它不能处理的命令类型被传递给责任链上下一个处理对象。在责任链尾部添加新的处理对象也是被支持的一种机制。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/chain-of-responsibilities.svg\" alt=\"责任链\"></p>\n<p>像上面说到的，AngularJS应用中的作用域构建了一个层次结构的作用域链。有些作用域是“独立的”，这意味着它们不会原型继承它们的父作用域，而是通过它们的 <code>$parent</code> 属性连接。</p>\n<p>当 <code>$emit</code> 或者 <code>$broadcast</code> 被调用的时候，我们可以把作用域链当作事件巴士，或者更准确地说是责任链。一旦事件被触发，它就会被向上或者向下传递（依赖被调用的方法）。每个子序列的作用域会：</p>\n<ul>\n<li>处理事件并且继续向下一级作用域传递</li>\n<li>处理事件，阻止传递</li>\n<li>直接向下一级作用域传递而不做任何处理</li>\n<li>阻止传递并且不做任何处理</li>\n</ul>\n<p>在下面的例子里面你会看到 <code>ChildCtrl</code> 触发了一个时间，该事件在作用域链上被向下传递。在上面的例子里面每个父作用域（在 <code>ParentCtrl</code> 中用到的和在 <code>MainCtrl</code> 用到的）会通过在控制台里打印 <code>&quot;foo received&quot;</code> 来处理事件。如果任何作用域需要被当作最后的处理目标，它可以调用通过回调传递获得到的事件对象上的 <code>stopPropagation</code> 方法来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.controller(<span class=\"string\">'MainCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.$on(<span class=\"string\">'foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo received'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">myModule.controller(<span class=\"string\">'ParentCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.$on(<span class=\"string\">'foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo received'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">myModule.controller(<span class=\"string\">'ChildCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.$emit(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在上面UML图中的不同处理器就是不同被注入到控制器中的作用域。</p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><blockquote>\n<p>在面向对象编程中，命令模式是一种行为设计模式。说的是使用一个对象来表征和包裹之后需要调用的某个方法所必要的信息。这些信息包括方法名，包含方法和方法调用参数值的对象。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/command.svg\" alt=\"命令\"></p>\n<p>在继续说命令模式的应用之前让我们讲讲AngularJS是如何实现数据绑定的。</p>\n<p>当我们要把模型绑定到视图上的时候，我们使用指令 <code>ng-bind</code> （为了单向的数据绑定）和 <code>ng-model</code> （为了双向的数据绑定）。例如我们想要模型 <code>foo</code> 的每一个改动都放映到视图上，我们可以：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>现在每次我们改动 <code>foo</code> 的值span内部的文本都会被改变。我们能够能够通过更加复杂的AngularJS表达式来获得同样的效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"foo + ' ' + bar | uppercase\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在上面的示例中，span的值将会是 <code>foo</code> 和 <code>bar</code> 连接起来并且首字母大写的值。究竟发生了什么呢？</p>\n<p>每个 <code>$scope</code> 都有个叫 <code>$watch</code> 的方法。当AngularJS编译器找到 <code>ng-bind</code> 指令，它会创建一个新的对于 <code>foo + &#39; &#39; + bar | uppercase</code> 表达式的监听器也就是 <code>$scope.$watch(&quot;foo + &#39; &#39; + bar | uppercase&quot;, function () { /* body */ });</code>。回调会在每次表达式的值改变的时候被触发。在这个例子中回调方法会更新span的值。</p>\n<p>下面是 <code>$watch</code> 方法实现的头几行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$watch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">watchExp, listener, objectEquality</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> scope = <span class=\"keyword\">this</span>,</div><div class=\"line\">      get = compileToFn(watchExp, <span class=\"string\">'watch'</span>),</div><div class=\"line\">      array = scope.$$watchers,</div><div class=\"line\">      watcher = &#123;</div><div class=\"line\">        fn: listener,</div><div class=\"line\">        last: initWatchVal,</div><div class=\"line\">        get: get,</div><div class=\"line\">        exp: watchExp,</div><div class=\"line\">        eq: !!objectEquality</div><div class=\"line\">      &#125;;</div><div class=\"line\"><span class=\"comment\">//...</span></div></pre></td></tr></table></figure>\n<p>我们可以把 <code>watcher</code> 对象当作一条命令。在每次<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\" target=\"_blank\" rel=\"external\"><code>&quot;$digest&quot;</code></a>循环的时候命令表达式都会被解析。一旦AngularJS检测到表达式里面的改动，它调用 <code>listener</code> 方法。 <code>watcher</code> 命令封装了对于特定表达式的监听并且将命令的执行代理到 <code>listener</code> （实际的接受者）。我们可以把 <code>$scope</code> 当作命令的 <code>客户端</code> ，把 <code>$digest</code> 循环当作命令的 <code>调用者</code>.</p>\n<h3 id=\"控制器-1\"><a href=\"#控制器-1\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><h4 id=\"页面控制器\"><a href=\"#页面控制器\" class=\"headerlink\" title=\"页面控制器\"></a>页面控制器</h4><blockquote>\n<p>一个处理网站上特定页面或者动作请求的对象。 Martin Fowler</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/page-controller.svg\" alt=\"页面控制器\"></p>\n<p>根据 <a href=\"#references\">4</a> 页面控制器是：</p>\n<blockquote>\n<p>页面控制器模式接受页面请求的输入，调用模型上被请求动作，并且决定正确的渲染页面。将分发的逻辑从视图相关的代码中分离出来</p>\n</blockquote>\n<p>因为在不同的页面上有许多重复的行为（像渲染页头，页脚，处理用户的回话等等）页面控制器能够构成层次结构。在AngularJS里我们使用的控制器担负的责任很有限。它们不接受用户请求，因为这时 <code>$route</code> 或者 <code>$state</code> 服务的责任，页面渲染的责任归 <code>ng-view</code>/<code>ui-view</code> 所有。</p>\n<p>跟页面控制器相似的是，AngularJS控制器处理用户的交互，提供和更新模型。当模型绑定到作用域上，它就暴露给了视图，所有由于用户动作被视图调用的方法都是已经绑定在作用域上的。另一个页面控制器和AngularJS控制器的相似点就是它们组成的层次关系。相当于作用于的层次关系，这种层次关系使得公共的动作可以放到基类的控制器里面。</p>\n<p>因为它们的责任几乎重叠，AngularJS里的控制器和ASP.NET的WebForms实现方式很相似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MainCtrl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ChildCtrl\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"click()\"</span>&gt;</span>Click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainCtrl</span>(<span class=\"params\">$scope, $location, User</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!User.isAuthenticated()) &#123;</div><div class=\"line\">    $location.path(<span class=\"string\">'/unauthenticated'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ChildCtrl</span>(<span class=\"params\">$scope, User</span>) </span>&#123;</div><div class=\"line\">  $scope.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'You clicked me!'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  $scope.user = User.get(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子只是要说明如何通过基控制器来复用逻辑的最基本方式。在生产环境无论如何我都不推荐把权限认证的逻辑放在控制器里。对于不同路由的访问可以在更高层次的抽象里来实现。</p>\n<p><code>ChildCtrl</code> 负责处理像点击带有 <code>&quot;Click&quot;</code> 标签的按钮并且通过将它绑定到作用域上将模型暴露给视图。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h4><p>其实这不是G4里面的一种设计模式，也不是EAA的P中的一种。这是一种Javascript的 传统模式，主要的目的是提供封装和隐藏。</p>\n<p>通过使用模块模式你可以基于Javascript的函数级作用域获得隐藏性。每个模块可以有一个或者多个隐藏在函数作用域里面的成员属性。这个方法返回一个暴露指定模块公共API的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Page = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> title;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span>(<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.title = t;</div><div class=\"line\">    title = t;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> title;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    setTitle: setTitle,</div><div class=\"line\">    getTitle: getTitle</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>上面的例子我们创造了一个IIFE（立即执行函数表达式），在被调用后返回一个有两个方法 <code>setTitle</code> 和 <code>getTitle</code> 的对象。返回的对象被赋值给 <code>Page</code> 变量。</p>\n<p>在这个例子里， <code>Page</code> 对象的使用者没有直接访问 <code>title</code> 变量，该变量被定义在立即执行函数产生的作用域里。</p>\n<p>模块模式在定义AngularJS里的服务时非常有用。使用这种模式我们可以模拟（实际获得了）私有性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.factory(<span class=\"string\">'foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMember</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//body...</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicMember</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//body...</span></div><div class=\"line\">    privateMember();</div><div class=\"line\">    <span class=\"comment\">//body</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    publicMember: publicMember</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>一旦我们想要在其他的组件里注入 <code>foo</code> ，我们就只能用共有方法，而无法使用私有方法。这种解决方案在构建一个可以复用库的时候非常好用。</p>\n<h3 id=\"数据映射器\"><a href=\"#数据映射器\" class=\"headerlink\" title=\"数据映射器\"></a>数据映射器</h3><blockquote>\n<p>数据映射器是在数据持久层（通常是关系型数据库）和内存中的数据表征（领域模型层）直接进行双向数据转换的数据访问层。这种模式的目的是保持内层内数据表征和数据持久层以及数据映射器彼此独立。</p>\n</blockquote>\n<p><img src=\"https://rawgit.com/mgechev/angularjs-in-patterns/master/images/data-mapper.svg\" alt=\"数据映射器\"></p>\n<p>像上面描述的一样，数据映射器用来在数据持久层和内存内数据表征之间做数据转换。通常我们的AngularJS应用和服务器端的API服务器通信，服务器接口都是用服务器端语言实现的（Ruby, PHP, Java, Javascript等等）。</p>\n<p>通常如果我们有Restful接口 <code>$resource</code> 会帮我们用活动对象跟服务器通信。尽管在有些应用中服务器反悔的实体不是那么符合我们前端需要的格式。</p>\n<p>举个例子，让我们假定应用中每个用户都有：</p>\n<ul>\n<li>名字</li>\n<li>地址</li>\n<li>朋友列表</li>\n</ul>\n<p>我们的API有这些方法：</p>\n<ul>\n<li><code>GET /user/:id</code> - 返回指定用户的名字和地址</li>\n<li><code>GET /friends/:id</code> - 返回指定用户的朋友列表</li>\n</ul>\n<p>一种解决方案是我们使用不同的服务，其中一个为第一个方法使用，另外一个为第二个使用。可能更加有用的方法会是如果我们有个单独的叫 <code>User</code> 的服务在我们请求用户信息的时候把用户朋友加载进来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.factory(<span class=\"string\">'User'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$q</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name, address, friends</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">    <span class=\"keyword\">this</span>.friends = friends;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  User.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> user = $http.get(<span class=\"string\">'/user/'</span> + params.id),</div><div class=\"line\">        friends = $http.get(<span class=\"string\">'/friends/'</span> + params.id);</div><div class=\"line\">    $q.all([user, friends])</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user, friends</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(user.name, user.address, friends);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> User;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>通过这种方式我们创建了一个伪数据映射器，根据我们单页应用的需要适配我们的API。</p>\n<p>我们可以这样使用 <code>User</code> 服务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainCtrl</span>(<span class=\"params\">$scope, User</span>) </span>&#123;</div><div class=\"line\">  User.get(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span> &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    $scope.user = data;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面的页面模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    Name: &#123;&#123;user.name&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    Address: &#123;&#123;user.address&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    Friends with ids:</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"friend in user.friends\"</span>&gt;</span>&#123;&#123;friend&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://en.wikipedia.org/wiki\" target=\"_blank\" rel=\"external\">百科</a>. The source of all brief descriptions of the design patterns is wikipedia.</li>\n<li><a href=\"https://docs.angularjs.org\" target=\"_blank\" rel=\"external\">AngularJS官方文档</a></li>\n<li><a href=\"https://github.com/angular/angular.js\" target=\"_blank\" rel=\"external\">AngularJS github仓库</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff649595.aspx\" target=\"_blank\" rel=\"external\">页面控制器</a></li>\n<li><a href=\"http://martinfowler.com/books/eaa.html\" target=\"_blank\" rel=\"external\">企业应用架构模式(P of EAA)</a></li>\n<li><a href=\"http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html\" target=\"_blank\" rel=\"external\">使用依赖注入来减少单例</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13512949/why-would-one-use-the-publish-subscribe-pattern-in-js-jquery\" target=\"_blank\" rel=\"external\">为什么要用在JS或者jQuery观察/订阅模式?</a></li>\n</ol>\n","categories":[],"tags":["frontend","javascript","angularjs","translation"]},{"title":"Yii2 快速上手","url":"https://vincenthou.github.io/2014/11/20/Yii2-快速上手/","content":"<h1 id=\"Yii2-快速上手\"><a href=\"#Yii2-快速上手\" class=\"headerlink\" title=\"Yii2 快速上手\"></a>Yii2 快速上手</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Composer安装\"><a href=\"#Composer安装\" class=\"headerlink\" title=\"Composer安装\"></a>Composer安装</h3><p>官方出品<a href=\"http://docs.phpcomposer.com/download/\" target=\"_blank\" rel=\"external\">详细文档</a>，只要把composer.phar下载就能用(php composer.phar)，不过配置到环境变量中会更方便，直接composer运行命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure>\n<p>但是没有镜像怎么能玩得转，其中原因大家懂得，配置国内镜像，具体方法看<a href=\"http://pkg.phpcomposer.com/\" target=\"_blank\" rel=\"external\">这里</a>，可以作为全局或者对于项目的配置</p>\n<h3 id=\"Yii2安装\"><a href=\"#Yii2安装\" class=\"headerlink\" title=\"Yii2安装\"></a>Yii2安装</h3><p>官方安装方法看<a href=\"https://github.com/yiisoft/yii2-app-advanced#install-via-composer\" target=\"_blank\" rel=\"external\">这里</a>，首先安装依赖的composer-asset。Yii2.0要求Composer必须安装 composer asset 插件。 这个插件使得Composer可以兼容实现NPM和BOWER包管理器的功能。 NPM 和 BOWER 主要用于前端资源（如JS库等）的管理。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar global require <span class=\"string\">\"fxp/composer-asset-plugin:1.0.0-beta3\"</span></div></pre></td></tr></table></figure>\n<p>接着创建项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced advanced</div></pre></td></tr></table></figure>\n<p>安装成功后会看到</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">Installing yiisoft/yii2-app-advanced (dev-master bc58c0f1b54cf7cfcf9d7b59ab364c8</div><div class=\"line\">2daa0b483)</div><div class=\"line\">  - Installing yiisoft/yii2-app-advanced (dev-master master)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">Created project <span class=\"keyword\">in</span> advanced</div><div class=\"line\">Loading composer repositories with package information</div><div class=\"line\">Installing dependencies (including require-dev)</div><div class=\"line\">  - Installing yiisoft/yii2-composer (dev-master 0ed315f)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing ezyang/htmlpurifier (v4.6.0)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing swiftmailer/swiftmailer (dev-master d0f361d)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing cebe/markdown (0.9.x-dev 6a3c373)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/jquery (2.1.1)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/jquery-pjax (dev-master f07ce95)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2 (2.0.0-beta)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing phpspec/php-diff (dev-master 30e103d)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2-swiftmailer (dev-master 3b9c27a)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2-codeception (dev-master e4c331f)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing twbs/bootstrap (v3.0.3)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2-bootstrap (2.0.0-beta)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2-debug (dev-master 12fdba8)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2-gii (2.0.0-beta)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing fzaninotto/faker (dev-master 44eae4d)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">  - Installing yiisoft/yii2-faker (dev-master cb109df)</div><div class=\"line\">    Loading from cache</div><div class=\"line\"></div><div class=\"line\">Writing lock file</div><div class=\"line\">Generating <span class=\"built_in\">autoload</span> files</div></pre></td></tr></table></figure>\n<p>项目就在advanced文件夹下了</p>\n<h3 id=\"Yii2初始化\"><a href=\"#Yii2初始化\" class=\"headerlink\" title=\"Yii2初始化\"></a>Yii2初始化</h3><p>进入项目目录，使用命令行初始化项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> advanced</div><div class=\"line\">init</div></pre></td></tr></table></figure>\n<p>会看到下面的界面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Yii Application Initialization Tool v1.0</div><div class=\"line\"></div><div class=\"line\">Which environment <span class=\"keyword\">do</span> you want the application to be initialized <span class=\"keyword\">in</span>?</div><div class=\"line\"></div><div class=\"line\">  [0] Development</div><div class=\"line\">  [1] Production</div><div class=\"line\"></div><div class=\"line\">  Your choice [0-1, or <span class=\"string\">\"q\"</span> to quit]</div></pre></td></tr></table></figure>\n<p>补充更加详细中文<a href=\"http://www.digpage.com/install.html#composeryii\" target=\"_blank\" rel=\"external\">安装教程</a></p>\n<p>yii2由于依赖于bower和npm，npm国内有镜像速度较快，但是bower下载很多github上面的依赖，速度较慢（下个jquery要2小时）,需要考虑是否使用。<br><strong>TODO: nginx配置，简单开发示例</strong></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://github.com/yiisoft/yii2\" target=\"_blank\" rel=\"external\">Github Offical Site</a></li>\n<li><a href=\"https://github.com/yiisoft/yii2-app-advanced\" target=\"_blank\" rel=\"external\">Yii2 App Advanced Template</a></li>\n<li><a href=\"http://www.yiichina.com/api/\" target=\"_blank\" rel=\"external\">API Doc</a></li>\n<li><a href=\"http://www.digpage.com/\" target=\"_blank\" rel=\"external\">深入理解Yii2.0</a></li>\n<li><a href=\"https://jellybool.com/post/programming-with-yii2-getting-started-with-install-and-hello-world\" target=\"_blank\" rel=\"external\">实例教程</a></li>\n<li><a href=\"http://pan.baidu.com/s/1hqswH60\" target=\"_blank\" rel=\"external\">直接下载免安装版</a></li>\n<li><a href=\"https://github.com/yiisoft/yii2/issues/5060\" target=\"_blank\" rel=\"external\">Calling unknown method: yii\\web\\UrlManager::addRules()</a></li>\n</ul>\n","categories":[],"tags":["blog","php"]},{"title":"MySQL 常用命令","url":"https://vincenthou.github.io/2014/09/04/MySQL-常用命令/","content":"<ul>\n<li>查看数据库表的字段描述</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc mysql.user;</div></pre></td></tr></table></figure>\n<ul>\n<li>查看数据库用户信息</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> mysql.user\\G;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加新用户</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> mysql.user (host, <span class=\"keyword\">user</span>, <span class=\"keyword\">password</span>, select_priv, insert_priv, update_priv) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'localhost'</span>, <span class=\"string\">'vincent'</span>, <span class=\"keyword\">PASSWORD</span>(<span class=\"string\">'test123'</span>), <span class=\"string\">'Y'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Y'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>分配表权限</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> table.* <span class=\"keyword\">TO</span> username@<span class=\"string\">\"%\"</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;</div></pre></td></tr></table></figure>\n","categories":[],"tags":["collection","database"]},{"title":"面向未来的图标图片精灵","url":"https://vincenthou.github.io/2014/07/24/面向未来的图标图片精灵/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>图片精灵的概念由来已久，长久以来作为网站性能优化的一条金科玉律，但是在实践过程中一直是一条头痛的事情。<br>我们在网站开发中会使用到各种图片资源，小到一个button的icon，大到整个网站的banner图片，每一个图片资源都需要单独发送请求。图片精灵就是将这些静态的图片资源按照需要合并为一张或者少数几张图片，通过CSS的background-position取得合适图片的技术。</p>\n<h1 id=\"以往的图片精灵做法\"><a href=\"#以往的图片精灵做法\" class=\"headerlink\" title=\"以往的图片精灵做法\"></a>以往的图片精灵做法</h1><p>在迭代开发中，图片资源可能会经常变动，或者图片的总量的不缺定的，这样就无法有效的进行预先合并。往往是设计人员根据开发提出的需求，单个单个地提供需要的图片或者icon，开发拿来就直接使用。最终图片和icon不需要变动的时候，基于开发的自我修养（加载图片真的成为瓶颈），开发会要求设计合并图片，开发拿到新合并的图片文件，苦逼地调CSS。<br>这样反人类的做法怎么能忍，各种工具应运而生。</p>\n<ul>\n<li>手动合并图片，生成对应的CSS代码<br>腾讯的团队搞出来的<a href=\"http://alloyteam.github.io/gopng\" target=\"_blank\" rel=\"external\">GoPng</a>，可以自定义图片的位置，在画布上随意拖动位置，能够自定义生成代码的模板，导出元数据（JSON格式）随时恢复原来的工作（个人认为可以用localstorage实现，体验会更好些）。具体特性和使用说明看<a href=\"http://www.alloyteam.com/2012/05/gopng-sprite-figure-synthesis-tool-another-html5-app/\" target=\"_blank\" rel=\"external\">这里</a></li>\n<li>自动生成工具</li>\n</ul>\n<ol>\n<li><a href=\"https://github.com/Ensighten/grunt-spritesmith\" target=\"_blank\" rel=\"external\">grunt-spritesmith</a>, <a href=\"https://www.npmjs.org/package/gulp.spritesmith/\" target=\"_blank\" rel=\"external\">gulp-spritesmith</a>只是把上面手动的流程自动化，指定原始图片的目录，设定图片文件通配符，生成合并图片文件和对应的CSS。还是需要手动更改原有的CSS文件（替换图片引用，添加background-position）</li>\n<li><a href=\"https://github.com/hellometers/grunt-sprite\" target=\"_blank\" rel=\"external\">grunt-sprite</a> 会自动从原来的CSS文件中获取到需要合并的图片链接，合并图片，修改原有CSS文件，真正实现自动化的CSS Sprite（国人开发的项目，赞一个）。gulp也有个<a href=\"https://www.npmjs.org/package/gulp-sprite-generator/\" target=\"_blank\" rel=\"external\">类似的项目</a><h1 id=\"使用SVG制作图片精灵\"><a href=\"#使用SVG制作图片精灵\" class=\"headerlink\" title=\"使用SVG制作图片精灵\"></a>使用SVG制作图片精灵</h1></li>\n</ol>\n<p>SVG 作为矢量图形的绘制工具价值正在与日俱增，很多SVG的库也如雨后春笋般茁壮成长，<a href=\"http://raphaeljs.com/\" target=\"_blank\" rel=\"external\">raphael</a>，<a href=\"http://d3js.org/\" target=\"_blank\" rel=\"external\">D3</a>，<a href=\"http://www.hcharts.cn/\" target=\"_blank\" rel=\"external\">highcharts中文</a>，<a href=\"http://www.highcharts.com/\" target=\"_blank\" rel=\"external\">highcharts官网</a>，还有新近看到的<a href=\"http://www.zhangxinxu.com/wordpress/2014/01/snap-svg-study-demo-docs/\" target=\"_blank\" rel=\"external\">snap.svg</a>。SVG的优点就不一一列举了，对应到本主题，SVG可以很方便地帮我们实现简单的icon设计。<br>随着技术的发展，图标的制作产生了几个方向：</p>\n<ol>\n<li>字体文件图标<br>例如<a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">font-awesome</a>已经让我们看到了icon的可能性，如果设计师没有特殊的要求（粗细，比例），我们的大部分需求都能得到满足。国内的<a href=\"http://iconfont.cn/\" target=\"_blank\" rel=\"external\">阿里巴巴 Iconfont</a>也提供了丰富的字体图标支持。</li>\n<li>CSS3制作<br>这个部分可以参考<a href=\"http://www.zhangxinxu.com/wordpress/2014/04/css3-icon-%E5%9B%BE%E6%A0%87%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF/\" target=\"_blank\" rel=\"external\">这篇文章</a>，写得还是很详细的，主要介绍了<a href=\"http://one-div.com/\" target=\"_blank\" rel=\"external\">one-div</a>，创意很好，但是个人感觉还是更适合开发玩玩。</li>\n<li>SVG图标文件<br>终于铺垫完了，这里才是 <strong>重点</strong> 。因为SVG文件本质上是用来描述图形的XML文件，可以自定义填充色，阴影和尺寸，给了开发和设计同样的发挥空间。SVG图片精灵的核心思想就是将原来的几个单独icon的SVG文件合并之后，使用symbol标签定义图形，并且给每个symbol定义一个ID，在后续引用中只要使用use标签xlink:href=“#id”就可以引用到合并后SVG中的图片了。发现这里神奇的地方了吗？不需要使用background-position定位图片，而且获取的尺寸绝对精确。参考中的<a href=\"http://www.zhangxinxu.com/wordpress/2014/07/introduce-svg-sprite-technology/\" target=\"_blank\" rel=\"external\">文章</a>介绍的更加详细，使用了<a href=\"https://github.com/FWeinb/grunt-svgstore/\" target=\"_blank\" rel=\"external\">SVG Grunt合并工具</a>，只是我自己尝试的时候发现配置有点问题，文中的写法是</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">grunt.initConfig(&#123;</div><div class=\"line\">  svgstore: &#123;</div><div class=\"line\">    options: &#123;</div><div class=\"line\">      includedemo: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    files: &#123;</div><div class=\"line\">        <span class=\"string\">'dist/mytest.svg'</span>: [<span class=\"string\">'mytest/*.svg'</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>实际我试验成功的写法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 包装函数</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 任务配置</span></div><div class=\"line\">  grunt.initConfig(&#123;</div><div class=\"line\">    svgstore: &#123;</div><div class=\"line\">      options: &#123;</div><div class=\"line\">        includedemo: <span class=\"literal\">true</span>,</div><div class=\"line\">        cleanup: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"comment\">//**different here**</span></div><div class=\"line\">      <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">        files: &#123;</div><div class=\"line\">          <span class=\"string\">'dist/mytest.svg'</span>: [<span class=\"string\">'mytest/*.svg'</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 任务加载</span></div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-svgstore'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 自定义任务</span></div><div class=\"line\">  grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'svgstore'</span>]);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>需要加default的key，才能生效，不知道是不是版本升级造成的。还有些类似的工具<a href=\"https://www.npmjs.org/package/svg-sprite\" target=\"_blank\" rel=\"external\">svg-sprite</a>，<a href=\"https://www.npmjs.org/package/gulp-svg-sprites/\" target=\"_blank\" rel=\"external\">gulp-svg-sprites</a>等等。<a href=\"http://icomoon.io/app/#/select\" target=\"_blank\" rel=\"external\">icomoon导出SVG Sprite</a>提供类似的功能，同样很方便，值得一提的是这个网站<strong>还支持font图标的导出</strong> :+1:。后续可以扩展下，把grunt-svgstore加入自动化中，自动生成引用，通过<a href=\"https://github.com/Polymer/HTMLImports\" target=\"_blank\" rel=\"external\">HTML Import partials</a>外链SVG文件，而不是在隐藏元素中放置SVG来做。</p>\n<h1 id=\"更好的开发方式\"><a href=\"#更好的开发方式\" class=\"headerlink\" title=\"更好的开发方式\"></a>更好的开发方式</h1><p>在以后的开发中可以和设计师商量，如果对于没有特殊要求的icon可以直接使用<a href=\"http://v3.bootcss.com/components/\" target=\"_blank\" rel=\"external\">bootstrap</a>, <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">font-awesome</a>，打包的<a href=\"http://iconfont.cn\" target=\"_blank\" rel=\"external\">iconfont</a>来做字体图标，使用现成的嘛，只是会多出加载字体文件的请求。对于有特殊尺寸、粗细的icon，设计师导出为SVG，通过SVG Sprite进行合并。或者更干脆，直接都使用SVG来做。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://css-tricks.com/svg-symbol-good-choice-icons/\" target=\"_blank\" rel=\"external\">SVG <code>symbol</code> a Good Choice for Icons</a><br><a href=\"http://www.zhangxinxu.com/wordpress/2014/07/introduce-svg-sprite-technology/\" target=\"_blank\" rel=\"external\">未来必热：SVG Sprite技术介绍</a><br><a href=\"http://www.alixixi.com/web/a/2010041159648.shtml\" target=\"_blank\" rel=\"external\">使用CSS sprite 的好处和坏处</a></p>\n","categories":[],"tags":["blog","css","frontend"]},{"title":"互联网思维","url":"https://vincenthou.github.io/2014/07/13/互联网思维/","content":"<h1 id=\"用户思维\"><a href=\"#用户思维\" class=\"headerlink\" title=\"用户思维\"></a>用户思维</h1><p>谁是你的用户?这是每个做公司的人都要问自己的问题!在中国企业软件市场，谁是你的用户吗?这不废话吗，用户当然是企业。那这些企业主，或者企业的高管们他们又是什么样的呢?他们是一个怎样的群体，他们有什么样的特质，他们喜欢用什么形式的产品呢？抓住典型用户，抓住用户痛点</p>\n<h1 id=\"简约思维\"><a href=\"#简约思维\" class=\"headerlink\" title=\"简约思维\"></a>简约思维</h1><p>大道至简，越简单的东西越容易传播，也就越难做。在今天这个信息爆炸时代，越复杂的东西越让人记不住。所以少就是多，专注就是力量，简约就是注意力。</p>\n<h1 id=\"极致思维\"><a href=\"#极致思维\" class=\"headerlink\" title=\"极致思维\"></a>极致思维</h1><p>极致思维，就是要把产品和服务做到极致。做让用户尖叫的产品。互联网时代，只有第一，没有第二。只有第一能让用户记住，并甩开第二名的追赶。</p>\n<h1 id=\"迭代思维\"><a href=\"#迭代思维\" class=\"headerlink\" title=\"迭代思维\"></a>迭代思维</h1><p>迭代思维有跟最新流行的两个关键词都相关，第一叫微创新，第二是“敏捷开发”。微创新的意思是不要颠覆式创新，而是在用户习惯的基础上做少数创新，让用户逐步接受。“敏捷开发”是说要不断试错，小步快跑。</p>\n<h1 id=\"流量思维\"><a href=\"#流量思维\" class=\"headerlink\" title=\"流量思维\"></a>流量思维</h1><p>在互联网流量为王的时代，流量就是金钱，谁掌握了流量谁就掌握了价值链的上游。所以互联网本质是流量分发生意。无论是QQ，淘宝，百度，都是流量入口，这也就成就了百亿甚至千亿美金级别的上市公司。<br>而流量为王有两个要素，第一是以免费降低门槛;所以360打败了瑞星，淘宝打败了易趣。第二是量变到质变，猪要养肥了再杀，等流量大到具有入口效应，自然不怕赚不到钱。</p>\n<h1 id=\"社会化思维\"><a href=\"#社会化思维\" class=\"headerlink\" title=\"社会化思维\"></a>社会化思维</h1><p>今天社交媒体发达，要善于利用粉丝的口碑传播力量。小米是最典型的例子，所有的营销都是在社交媒体上完成的。连在央视投个广告，也变成了社交媒体上的炒作事件。所谓公关第一，广告第二，说的就是社会化思维。<br>在产品开发中考虑到让用户能自然往外传播的点，最后让用户主动帮你推广，这是社会化思维的结构，无论是微博，微信，小米都是用这样的思维在开发产品。现在大家知道为什么好的产品经理动辄年薪百万了吧!</p>\n<h1 id=\"大数据思维\"><a href=\"#大数据思维\" class=\"headerlink\" title=\"大数据思维\"></a>大数据思维</h1><p>在大数据时代，我们知道所有能产生数据的应用都有价值。也就是数据有价值。人的任何行为都可以被抽象。数据有价值并不是过去所谓把银行，移动等高净值客户资料想办法偷出来然后群发短信这样低俗的做法，而是说根据用户行为从而可以更精准营销甚至产生新的价值。</p>\n<h1 id=\"平台思维\"><a href=\"#平台思维\" class=\"headerlink\" title=\"平台思维\"></a>平台思维</h1><p>互联网的平台思维就是开放、共享、共赢的思维，也就 是打造生态体系的思维。简单而言，平台思维跟传统思维的差异在于，企业经营的产品和生态体系并不直接带来收益，但无心插柳柳成荫，其他地方带来滚滚财源。 比如搜索模式，谷歌并不直接向搜索用户收钱，但搜索用户增加多了以后，就可以向广告主收钱。苹果打造成平台以后，除了硬件收入，AppStore到的分发 收入成为了重要的一块。<br>平台思维的最关键是要打造生态体系，让生态体系众的每个人都赚到钱，自己也就自然赚到钱了。淘宝让淘女郎，摄影师，商家，甚至差评师都能赚到钱，淘宝最后也就赚到钱了。这是为什么阿里是中国最具有平台思维的公司，也自然会成为市值最高的公司。</p>\n<h1 id=\"跨界思维\"><a href=\"#跨界思维\" class=\"headerlink\" title=\"跨界思维\"></a>跨界思维</h1><p>互联网和新科技的发展，产业融合，很多产业的边界变得模糊，新的打劫者不断涌出。不是你打劫我，就是我跨界过去打劫你。互联网企业的跨界颠覆，本质是高效率整合低效率。互联网对传统行业的跨界打劫，本质是瓦解传统行业的人情经济，回扣经济，喝酒经济和各类复杂的代理体系。</p>\n","categories":[],"tags":["blog","collection"]},{"title":"nodejs 定时任务","url":"https://vincenthou.github.io/2014/07/07/nodejs-定时任务/","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://www.infoq.com/cn/articles/yph-shell-meet-nodejs\" target=\"_blank\" rel=\"external\">当Shell遇上了NodeJS</a><br><a href=\"https://github.com/ncb000gt/node-cron\" target=\"_blank\" rel=\"external\">node-cron</a><br><a href=\"http://blog.fens.me/nodejs-cron-later/\" target=\"_blank\" rel=\"external\">让Nodejs来管理定时任务later</a><br><a href=\"http://yansong.me/2013/02/27/use-forever-run-a-node-app-created-by-express.html\" target=\"_blank\" rel=\"external\">使用forever运行nodejs应用</a></p>\n","categories":[],"tags":[]},{"title":"Git 常用命令","url":"https://vincenthou.github.io/2014/06/17/Git-常用命令/","content":"<p>Origin 指向远端git中央仓库</p>\n<ul>\n<li>删除中央仓库中的分支</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin --delete remote_branch_name</div></pre></td></tr></table></figure>\n<ul>\n<li>重命名中央仓库分支</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//<span class=\"built_in\">local</span></div><div class=\"line\">git branch -m original_branch_name new_branch_name</div><div class=\"line\">//remote</div><div class=\"line\">git push origin --delete original_branch_name</div><div class=\"line\">//<span class=\"built_in\">local</span></div><div class=\"line\">git push -u origin new_branch_name</div></pre></td></tr></table></figure>\n<ul>\n<li>克隆某个中央仓库分支</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//bare</div><div class=\"line\">git <span class=\"built_in\">clone</span> -b remote_branch_name remote_repo_url</div><div class=\"line\">//<span class=\"built_in\">local</span> repo</div><div class=\"line\">git checkout -b local_branch_name remote_reop_name/remote_branch_name</div></pre></td></tr></table></figure>\n<ul>\n<li>在中央仓库中创建新的分支</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b new_branch_name</div><div class=\"line\">git push -u origin new_branch_name</div></pre></td></tr></table></figure>\n<ul>\n<li>在本地跟踪中央仓库其他人创建的分支</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b remote_branch_name origin/remote_branch_name</div></pre></td></tr></table></figure>\n<ul>\n<li>选定merge策略（解决冲突的时候按照当前分支为主，冲突中HEAD部分为ours）</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge --strategy-option theirs develop</div></pre></td></tr></table></figure>\n<ul>\n<li>选定rebase策略（解决冲突的时候按照当前分支为主，冲突中HEAD部分为ours）</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase -s recursive -X theirs master</div></pre></td></tr></table></figure>\n<ul>\n<li>单行查看历史</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> --oneline</div></pre></td></tr></table></figure>\n<ul>\n<li>查看自己仓库的当前分支提交ID的树状图</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> –graph</div></pre></td></tr></table></figure>\n<ul>\n<li>查看stash的堆栈</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash list</div></pre></td></tr></table></figure>\n<ul>\n<li>查看某次stash的改动</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash diff stash@&#123;n&#125;^ stash@&#123;n&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>应用某次stash的改动</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash pop stash@&#123;n&#125;</div><div class=\"line\">git stash apply stash@&#123;n&#125;</div></pre></td></tr></table></figure>\n<p>pop会干掉stash list中的存档, apply不会</p>\n<ul>\n<li>切换到某个commit</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout commit</div></pre></td></tr></table></figure>\n<ul>\n<li>找回某次commit的一个文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout commit-hash filename</div></pre></td></tr></table></figure>\n<ul>\n<li>找回某次commit的一个文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD~2</div></pre></td></tr></table></figure>\n<p>checkout只会移动HEAD指针，reset会改变HEAD的引用值</p>\n<ul>\n<li>查看某次提交影响的文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git show --pretty=<span class=\"string\">\"format:\"</span> --name-only commit-hash</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://zengrong.net/post/1746.htm\" target=\"_blank\" rel=\"external\">GIT查看、删除、重命名远程分支和TAG</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/undoing-changes\" target=\"_blank\" rel=\"external\">Undoing changes</a></li>\n<li><a href=\"http://mux.alimama.com/posts/799\" target=\"_blank\" rel=\"external\">git寻根——^和~的区别</a></li>\n</ul>\n","categories":[],"tags":["collection","git"]},{"title":"前端面试问题汇总","url":"https://vincenthou.github.io/2014/06/12/前端面试问题汇总/","content":"<p>收集前端面试资料，后续整理完善</p>\n<p>综合考察</p>\n<ul>\n<li><a href=\"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese\" target=\"_blank\" rel=\"external\">https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese</a></li>\n<li><a href=\"https://github.com/komejo/front-end-developer-employer-questions\" target=\"_blank\" rel=\"external\">https://github.com/komejo/front-end-developer-employer-questions</a></li>\n<li><a href=\"http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/\" target=\"_blank\" rel=\"external\">http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/</a></li>\n<li><a href=\"https://github.com/fex-team/interview-questions\" target=\"_blank\" rel=\"external\">https://github.com/fex-team/interview-questions</a></li>\n</ul>\n<p>综合考察【有答案】</p>\n<ul>\n<li><a href=\"https://github.com/ThomasChan/frontEndInterviewQuestions-Answers\" target=\"_blank\" rel=\"external\">https://github.com/ThomasChan/frontEndInterviewQuestions-Answers</a></li>\n</ul>\n<p>基础知识部分</p>\n<ul>\n<li><a href=\"https://github.com/andyshora/front-end-interview-questions\" target=\"_blank\" rel=\"external\">https://github.com/andyshora/front-end-interview-questions</a></li>\n</ul>\n","categories":[],"tags":["blog","frontend","collection"]},{"title":"在浏览器中输入地址后发生了什么？","url":"https://vincenthou.github.io/2014/06/01/在浏览器中输入地址后发生了什么？/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近面试都被问到这个问题，对这个问题很有兴趣。说实在的，这个问题很好，可大可小，很能考察出一个人知识的深度和广度，正式总结一下，这里主要从应用层来说的，底层的讨论可以参考<a href=\"http://fex.baidu.com/blog/2014/05/what-happen/\" target=\"_blank\" rel=\"external\">这篇</a>。</p>\n<h1 id=\"DNS查询\"><a href=\"#DNS查询\" class=\"headerlink\" title=\"DNS查询\"></a>DNS查询</h1><p>浏览器是不识别域名的，在输入地址后，浏览器需要根据域名查找到实际server的IP，DNS的查询会优先从缓存中获取，这是一级一级进行的，从浏览器，操作系统(Host文件)，路由器，ISP。最新支持的技术，DNS prefetch可以对此优化。DNS Prefetch 是一种DNS 预解析技术，当你浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://api.twitter.com\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>DNS Prefetch 已经被下面的浏览器支持<br>Firefox: 3.5+<br>Chrome: Supported<br>Safari 5+<br>Opera: Unknown<br>IE: 9</p>\n<h1 id=\"TCP三次握手连接\"><a href=\"#TCP三次握手连接\" class=\"headerlink\" title=\"TCP三次握手连接\"></a>TCP三次握手连接</h1><p>客户端向服务器端发送SYN码请求与服务器进行连接，服务器端返回ACK码响应连接请求，并且为连接分配资源，客户端返回ACK码确认连接。<br><img src=\"http://hi.csdn.net/attachment/201108/7/0_1312718352k8l6.gif\" alt=\"三次握手\"></p>\n<h1 id=\"HTTP-请求的处理\"><a href=\"#HTTP-请求的处理\" class=\"headerlink\" title=\"HTTP 请求的处理\"></a>HTTP 请求的处理</h1><p>浏览器与服务器建立TCP连接之后，浏览器向服务器发送HTTP请求，如果请求地址直接对应静态、动态文件或者服务器端处理程序（某个action），正常情况返回状态码200。其他情况对应状态码：<br>状态码       | 对应说明<br>————- | ————-<br>301            | 永久重定向，拥有多个域名，或者域名迁移时使用<br>302            | 临时重定向，可能被劫持，<a href=\"http://www.dewen.org/q/1233\" target=\"_blank\" rel=\"external\">与301区别</a><br>403            | 无权限访问<br>404            | 访问页面不存在<br>500            | 服务器端处理程序抛出异常<br>详细的状态码定义<a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"external\">参考</a><br>如果请求中包含头信息，服务器对响应内容使用gzip压缩</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept-Encoding: gzip, deflate</div></pre></td></tr></table></figure>\n<p>响应中包含头信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Encoding: gzip</div><div class=\"line\">Content-Type: text/html; charset=utf-8</div></pre></td></tr></table></figure>\n<p>浏览器收到服务器响应后，浏览器gzip解压，根据content type渲染响应内容并且根据设定字符集显示。</p>\n<h1 id=\"缓存应用\"><a href=\"#缓存应用\" class=\"headerlink\" title=\"缓存应用\"></a>缓存应用</h1><ul>\n<li>通过配置服务器或者服务器处理程序<a href=\"http://www.fuchaoqun.com/2009/09/php_etag_lastmodified_expires/\" target=\"_blank\" rel=\"external\">返回需要的头信息</a>实现ETAG机制，可以有效减少服务器的负载，浏览器从缓存中读取静态资源内容。更加详细的总结看<a href=\"http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html\" target=\"_blank\" rel=\"external\">这里</a></li>\n<li>第一次请求<br><img src=\"http://images.cnblogs.com/cnblogs_com/skynet/201211/201211281402437422.png\" alt=\"第一次请求\"></li>\n<li>之后的请求<br><img src=\"http://images.cnblogs.com/cnblogs_com/skynet/201211/201211281402442505.png\" alt=\"之后的请求\"></li>\n<li>HTML5应用设置<a href=\"http://www.w3school.com.cn/html5/html_5_app_cache.asp\" target=\"_blank\" rel=\"external\">appliction cache</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"demo.appcache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">The content of the document......</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>根据manifest文件中的配置，控制文件的访问（从缓存，直接请求或者是降级的处理），详细的解释看<a href=\"http://www.cnblogs.com/blackbird/archive/2012/06/12/2546751.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h1 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h1><p>浏览器对于返回状态码为200的页面的解析是根据文本序自上而下解析的，一般我们假定应用最佳实践（CSS置顶，JS置尾），浏览器读取到content type为html，便以html的方式解析内容，在header中读取到外链的CSS文件就加载它，但是不会影响页面的渲染，浏览器构造CSS的规则树，随着对于页面内容的解析，浏览器同时构造文档的DOM树，在CSS的规则树构建完成后会与DOM树配合生成渲染树。从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标，布局渲染树。 遍历渲染树，每个节点将使用UI后端层来绘制渲染树（主要是上色）<br><img src=\"http://taligarsiel.com/Projects/webkitflow.png\" alt=\"Main Flow\"><br>在文档加载中会解析到img标签，根据URL加载图片文件，如果没有设定图片的尺寸，在图片真正加载完成后放置在img容器中会出发浏览器的reflow。作为背景图的图片在渲染树构建的时候根据是否为display：none决定需不需要加载，一般CSS设定的背景图片会比img标签定义图片加载时间滞后，详细实验看<a href=\"http://www.cnblogs.com/smjack/archive/2008/08/21/1272905.html\" target=\"_blank\" rel=\"external\">这里</a>。浏览器解析到script标签加载外部JS文件，并且执行脚本内容，如果脚本中有对于DOM元素的操作，位置布局上的改变会触发reflow，颜色样式上的改变会出发repaint。</p>\n<h1 id=\"TCP四次握手断开\"><a href=\"#TCP四次握手断开\" class=\"headerlink\" title=\"TCP四次握手断开\"></a>TCP四次握手断开</h1><p>如果没有配置header中Connection字段值为Keep-Alive（http 1.0中默认是关闭的，不过现在大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求，这一步就没有了），在加载完请求页面后TCP连接会被断开。<br>这个断开操作可以由客户端或者服务器端任一方发起，这里以客户器端为例。客户端发送FIN码告知服务器端没有数据需要发送了（想要断开连接），服务器端返回客户端ACK码，告知客户端已经收到消息，令客户端等待，客户端进入FIN_WAIT状态。服务器端确认没有需要交互的数据后向客户端发送FIN码，并且开始准备关闭连接。客户端返回ACK码确认连接需要关闭，并且进入TIME_WAIT状态。服务器端受到ACK码后关闭连接，客户端等待一定时间后关闭连接。<br><img src=\"http://hi.csdn.net/attachment/201108/7/0_1312718564tZXD.gif\" alt=\"四次握手\"></p>\n<h1 id=\"AJAX交互\"><a href=\"#AJAX交互\" class=\"headerlink\" title=\"AJAX交互\"></a>AJAX交互</h1><p>如果我们希望使用局部刷新页面内容，来提升页面的加载体验，在JS脚本中会向后端的rest service请求数据，在数据加载完成之后会更新局部的DOM元素，触发reflow或者是repaint。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果我们使用<a href=\"http://www.searchtb.com/2011/04/an-introduction-to-bigpipe.html\" target=\"_blank\" rel=\"external\">bigpipe技术</a>，会在原有的模式上进行改进。浏览器发送访问请求，然后浏览器分步返回不同的pagelet的内容，BigPipe 打破了原有的顺序执行，将页面分成不同的pagelet ，如此一来，所有的pagelet 的执行时间累加起来还是原有的时间。但是， 通过叠加不同pagelet 的不同阶段的执行时间，使总的运行时间大大减少。可以看出，总体的流程是上面罗列的这些，但是不同的技术方案会产生不同的加载处理顺序，这里的总结还有不尽完善的地方，逐步改进。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/\" target=\"_blank\" rel=\"external\">What really happens when you navigate to a URL</a></li>\n<li><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\" target=\"_blank\" rel=\"external\">How browsers work</a></li>\n<li><a href=\"http://blog.csdn.net/whuslei/article/details/6667471\" target=\"_blank\" rel=\"external\">TCP协议中的三次握手和四次挥手(图解)</a></li>\n<li><a href=\"http://hi.baidu.com/misaiya2008/item/e254d52303114f85af48f5c7\" target=\"_blank\" rel=\"external\">HTTP协议头部与Keep-Alive模式详解Connection: Keep-Alive/close</a></li>\n<li><a href=\"http://blog.csdn.net/21aspnet/article/details/6604805\" target=\"_blank\" rel=\"external\">http响应Last-Modified和ETag以及Apache和Nginx中的配置</a></li>\n<li><a href=\"http://hsj69106.blog.51cto.com/1017401/286541/\" target=\"_blank\" rel=\"external\">设置html页面不让浏览器缓存的方法</a></li>\n<li><a href=\"http://www.cnblogs.com/smjack/archive/2008/08/20/1272370.html\" target=\"_blank\" rel=\"external\">HTML页面元素加载顺序研究报告（1）—-简单Div罗列</a></li>\n</ul>\n","categories":[],"tags":["blog","frontend"]},{"title":"JS继承机制的实现","url":"https://vincenthou.github.io/2014/05/24/JS继承机制的实现/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前对于JS实现继承的机制有一些粗浅的认识，可以简单实现case by case的继承 #16 ，继承的实现是没有复用的，最近专门研究了下，实现一个通用的继承实现</p>\n<h1 id=\"经典继承的实现和改进\"><a href=\"#经典继承的实现和改进\" class=\"headerlink\" title=\"经典继承的实现和改进\"></a>经典继承的实现和改进</h1><h2 id=\"直接使用原型链\"><a href=\"#直接使用原型链\" class=\"headerlink\" title=\"直接使用原型链\"></a>直接使用原型链</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Sub, Super</span>) </span>&#123;</div><div class=\"line\">    Sub.prototype = <span class=\"keyword\">new</span> Super();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种实现是最简单直接的，但是这样生成的Sub实例在复用Super的属性和方法的时候都是基于原型链查找的，子类如果没有覆盖父类的方法或者属性，所有子类实例都是共享的同一份数据，对于方法这样挺好的，但是对于属性就不行了，特别是对于数组和引用类型的属性（除非重新赋值，不然所有实例引用的是同一份数据）。单纯这样写的继承方式是没有办法自定义构造方法的。</p>\n<h2 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.arr = arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">arr, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    Super.call(<span class=\"keyword\">this</span>, arr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了保证子类会实现父类属性的深拷贝，在子类的构造函数里面显示调用父类的构造函数，通过向call或者apply函数传递this参数绑定添加属性的上下文。</p>\n<h2 id=\"共享原型\"><a href=\"#共享原型\" class=\"headerlink\" title=\"共享原型\"></a>共享原型</h2><p>通常的做法是上面两种做法的结合，但是这样又会有另外一个问题，那就是两次调用构造函数，这是第一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super();</div></pre></td></tr></table></figure>\n<p>为了实现原型链，实例化父类对象赋值为Sub的原型，完成一次父类构造含函数调用。<br>这是第二次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Super.call(<span class=\"keyword\">this</span>, arr);</div></pre></td></tr></table></figure>\n<p>为了深拷贝父类的属性，完成二次父类构造含函数调用。<br>既然实例属性复用可以通过借用构造函数，我们其实只是想要获得所有父类原型上的属性或者方法，可以通过共享原型实现替换原来的实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Sub, Super</span>) </span>&#123;</div><div class=\"line\">    Sub.prototype = Super.prototype;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"增加代理构造函数\"><a href=\"#增加代理构造函数\" class=\"headerlink\" title=\"增加代理构造函数\"></a>增加代理构造函数</h2><p>共享原型可以方便的让子类使用父类的原型属性和方法了，但是仍然存在问题。因为子类原型是直接指向父类原型的，这种引用类型的赋值倒置，所有继承父类的子类原型是一样的。在完成子类的继承之后，如果修改任何子类的原型，这份修改会影响到所有的其他子类原型和父类。既然不能直接引用父类原型，那就添加一个代理层就好了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Sub, Super</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = Super.prototype;</div><div class=\"line\">    Sub.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里定义的这个F就是我们说的代理构造函数，因为是单独实例化了代理构造函数( new F() )，这样之后对于子类原型的修改都是单独的，不会相互影响，更不会影响到父类原型。</p>\n<h2 id=\"存储父类原型和重置构造函数指针\"><a href=\"#存储父类原型和重置构造函数指针\" class=\"headerlink\" title=\"存储父类原型和重置构造函数指针\"></a>存储父类原型和重置构造函数指针</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Sub, Super</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = Super.prototype;</div><div class=\"line\">    Sub.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    Sub.uber = Super.prototype;</div><div class=\"line\">    Sub.prototype.construtor = Sub;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为添加了代理层，子类和父类的关系不是很明朗，添加一个uber属性标示父类原型。我们如果察看Sub的实例构造器( sub.constructor )，发现结果是Super，为了弥补这一不合理的现象，重置constructor是一个不错的方法。</p>\n<h2 id=\"优化继承的实现\"><a href=\"#优化继承的实现\" class=\"headerlink\" title=\"优化继承的实现\"></a>优化继承的实现</h2><p>其实这里的代理构造函数是可以复用的，不需要每次继承父类的时候都创建一个，通过创建闭包，可以让所有的子类继承都使用，同时由于这里对于子类原型的复制都是实例化一个新的代理实例，不存在原型共享的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Sub, Super</span>) </span>&#123;</div><div class=\"line\">        F.prototype = Super.prototype;</div><div class=\"line\">        Sub.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        Sub.uber = Super.prototype;</div><div class=\"line\">        Sub.prototype.constructor = Sub;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>搭配借用构造函数为子类属性赋值，这已经是最完美的解决方案了。顺便提一下，这里有一个经典的原型继承模式（我觉得是基于原型链的浅拷贝）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'vincent'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> cloned = object(obj);</div><div class=\"line\">obj.name = <span class=\"string\">'test'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(cloned.name);<span class=\"comment\">//output 'test'</span></div></pre></td></tr></table></figure>\n<p>在ECMAScript 5中通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"external\">Object.create</a>实现了这一行为，在现代浏览器和nodejs中可以直接调用。</p>\n<h2 id=\"继承静态属性和方法\"><a href=\"#继承静态属性和方法\" class=\"headerlink\" title=\"继承静态属性和方法\"></a>继承静态属性和方法</h2><p>上面的解决方案已经能够解决我们处理JS面向对象继承的问题了，进一步来说。我们的继承概念需要能够继承父类的静态属性和方法，再添加点修改</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Sub, Super</span>) </span>&#123;</div><div class=\"line\">        F.prototype = Super.prototype;</div><div class=\"line\">        Sub.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        Sub.uber = Super.prototype;</div><div class=\"line\">        Sub.prototype.constructor = Sub;</div><div class=\"line\">        <span class=\"comment\">//add static function from parent class</span></div><div class=\"line\">        <span class=\"keyword\">var</span> prop;</div><div class=\"line\">        <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> Super) &#123;</div><div class=\"line\">            !Sub[prop] &amp;&amp; (Sub[prop] = Super[prop]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"复制属性的继承方式\"><a href=\"#复制属性的继承方式\" class=\"headerlink\" title=\"复制属性的继承方式\"></a>复制属性的继承方式</h1><h2 id=\"简单属性复制\"><a href=\"#简单属性复制\" class=\"headerlink\" title=\"简单属性复制\"></a>简单属性复制</h2><p>我们有的时候不需要进行完成经典的继承，可能只是继承，或者说是拷贝一些属性（基于对象），通过简单的属性循环就可以实现，hasOwnProperty会排除掉原型上的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">parent, child</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop;</div><div class=\"line\">    child = child || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (parent.hasOwnProperty(prop)) &#123;</div><div class=\"line\">            child[prop] = parent[prop];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"深度复制\"><a href=\"#深度复制\" class=\"headerlink\" title=\"深度复制\"></a>深度复制</h2><p>上面的实现其实对于对象的拷贝来说其实只是实现了简单的浅拷贝，对于引用类型和数组类型会有潜在的问题，我们可能需要一个更加健壮的方法实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">parent, child, deep</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop;</div><div class=\"line\">    child = child || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> aType = <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (parent.hasOwnProperty(prop)) &#123;</div><div class=\"line\">            <span class=\"comment\">//check if the value is array or object</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (deep &amp;&amp; <span class=\"string\">'object'</span> === <span class=\"keyword\">typeof</span> parent[prop]) &#123;</div><div class=\"line\">                child[prop] = aType ===  &#123;&#125;.toString.call(parent[prop]) ? [] : &#123;&#125;;</div><div class=\"line\">                <span class=\"comment\">//recursive extend array and object value</span></div><div class=\"line\">                extend(parent[prop], child[prop], <span class=\"literal\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                child[prop] = parent[prop];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过添加第三个参数来确定是否进行深拷贝，这里深拷贝的实现就是在遍历属性的时候判断属性值是否是引用类型或者数组类型，如果是的话继续进行深拷贝，知道拷贝到普通类型值为止。</p>\n<h2 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h2><p>在JS中通过借用多个构造函数，可以实现多继承（基于构造函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super1</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super2</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super3</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Super1.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">    Super2.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">    Super3.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们也可以使用一个更灵活的方法来实现多继承（基于对象），这就是混入，我们可以通过这个方法方便的进行配置参数的合并</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop, mixed = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> <span class=\"built_in\">arguments</span>[i]) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(mixed)</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i].hasOwnProperty(prop)) &#123;</div><div class=\"line\">                mixed[prop] = <span class=\"built_in\">arguments</span>[i][prop];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mixed;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Jquery中是通过extend方法来实现的mixin，并且是以上两个功能的合并（同时支持深拷贝和多继承），深拷贝的标示变量是第一个参数，详细的<a href=\"https://github.com/jquery/jquery/blob/master/src/core.js#L124\" target=\"_blank\" rel=\"external\">Jquery实现参考</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://www.crockford.com/javascript/inheritance.html\" target=\"_blank\" rel=\"external\">Classical Inheritance in JavaScript</a><br><a href=\"http://phrogz.net/JS/classes/OOPinJS2.html\" target=\"_blank\" rel=\"external\">OOP in JS, Part 2 : Inheritance</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"external\">Inheritance and the prototype chain</a></p>\n","categories":[],"tags":["blog","frontend","javascript"]},{"title":"Nginx文件加密","url":"https://vincenthou.github.io/2014/05/21/Nginx文件加密/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>我们有时候需要放置一些静态文件资源在服务器上方便团队成员共享，但是又不希望这些资源对外可以访问，apache上提供了方便的配置方法实现，nginx上面也有类似的功能，今天配置了下，本来以为挺简单的，还颇费了些周折，记录一下</p>\n<h1 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h1><p>Nginx有个auth_basic的模块，直接看配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ^~ /protected/ &#123;</div><div class=\"line\">    <span class=\"comment\"># First attempt to serve request as file, then</span></div><div class=\"line\">    <span class=\"comment\"># as directory, then fall back to index.html</span></div><div class=\"line\">    try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</div><div class=\"line\">    <span class=\"comment\"># Uncomment to enable naxsi on this location</span></div><div class=\"line\">    <span class=\"comment\"># include /etc/nginx/naxsi.rules</span></div><div class=\"line\">    auth_basic <span class=\"string\">\"vincent\"</span>;</div><div class=\"line\">    auth_basic_user_file /etc/nginx/conf.d/htpasswd.pw;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要是最后的两行配置，auth_basic定义弹出输入用户名和密码提示信息，auth_basic_user_file代表导入的用户名和密码列表配置文件，这样配置以后所有访问protected目录下文件的请求都需要用户输入用户名和密码才能登陆。</p>\n<h1 id=\"创建用户名和密码列表文件\"><a href=\"#创建用户名和密码列表文件\" class=\"headerlink\" title=\"创建用户名和密码列表文件\"></a>创建用户名和密码列表文件</h1><p>根据上面的配置创建列表文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/conf.d</div><div class=\"line\">sudo touch htpasswd.pw</div></pre></td></tr></table></figure>\n<p>!这里文件可以取任何文件类型，但是千万不要使用.conf后缀，开始文件叫htpasswd.conf，重启nginx一直报语法错误。</p>\n<h1 id=\"创建生成加密密码的脚本\"><a href=\"#创建生成加密密码的脚本\" class=\"headerlink\" title=\"创建生成加密密码的脚本\"></a>创建生成加密密码的脚本</h1><p>在任意目录下面创建perl脚本，保存为gpasswd.pl</p>\n<figure class=\"highlight pl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/perl</span></div><div class=\"line\"><span class=\"keyword\">use</span> strict;</div><div class=\"line\"><span class=\"keyword\">my</span> $pw=$ARGV[<span class=\"number\">0</span>] ;</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">crypt</span>($pw,$pw).<span class=\"string\">\"\\n\"</span>;</div></pre></td></tr></table></figure>\n<p>为脚本添加可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod +x gpasswd.pl</div></pre></td></tr></table></figure>\n<h1 id=\"生成crypt加密的密码\"><a href=\"#生成crypt加密的密码\" class=\"headerlink\" title=\"生成crypt加密的密码\"></a>生成crypt加密的密码</h1><p>如果我们想要生成的密码是happy, 执行命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./gpasswd.pl happy</div></pre></td></tr></table></figure>\n<p>在命令行里面输出hafbpgNasZSjY，这就是我们要的crypt加密后的密码了。</p>\n<h1 id=\"将加密后的密码添加到用户列表\"><a href=\"#将加密后的密码添加到用户列表\" class=\"headerlink\" title=\"将加密后的密码添加到用户列表\"></a>将加密后的密码添加到用户列表</h1><p>打开之前创建的htpasswd.pw文件，给用户user添加密码happy</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">user:hafbpgNasZSjY</div></pre></td></tr></table></figure>\n<p>重启nginx服务器，一般这样当你再次访问{domain}/protected 下文件的时候就需要输入用户名和密码了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/nginx reload</div></pre></td></tr></table></figure>\n<h1 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h1><ul>\n<li>有时候会报访问权限的错误，可能是文件夹的读写权限没有配置</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /var/www</div><div class=\"line\">sudo chown -R www-data:www-data protected</div><div class=\"line\">sudo chmod 755 protected</div></pre></td></tr></table></figure>\n<ul>\n<li>如果 不用 ^~ /protected/ 而用 /protected 的话 那么将只能对目录进行验证，直接访问其下的文件，将不会弹出登录验证<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1></li>\n<li><a href=\"http://blog.csdn.net/cuiyuan9/article/details/13627359\" target=\"_blank\" rel=\"external\">Nginx 目录或 网站加密认证</a></li>\n<li><a href=\"http://bolg.sinaapp.com/html/2011/1105.html\" target=\"_blank\" rel=\"external\">Apache和nginx对网站目录加密</a></li>\n<li><a href=\"http://blog.chaorenmao.com/?p=578\" target=\"_blank\" rel=\"external\">nginx设置网站密码访问</a></li>\n</ul>\n","categories":[],"tags":["blog","linux","build"]},{"title":"绕不开的兼容性(持续完善)","url":"https://vincenthou.github.io/2014/05/20/绕不开的兼容性-持续完善/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>随着浏览器的发展，操作系统的更新升级，越来越多的用户开始使用现代浏览器，我们可喜的看见chrome浏览器在国外市场上高歌猛进<br>！<a href=\"http://imgsrc.baidu.com/forum/pic/item/095457fbb2fb43169fbd412022a4462308f7d387.jpg\" target=\"_blank\" rel=\"external\">全球浏览器份额</a><br>但是我们还是要面对现实，国内使用IE6, IE7, IE8这些浏览器的用户还是大有人在的<br>看看最新的统计数据：<br><a href=\"http://tongji.baidu.com/data/browser\" target=\"_blank\" rel=\"external\">百度统计</a><br><a href=\"http://brow.data.cnzz.com/\" target=\"_blank\" rel=\"external\">CNZZ统计</a><br>IE内核的浏览器还是大行其道的，所以就一些常见的兼容性问题做一下总结</p>\n<h1 id=\"CSS兼容性\"><a href=\"#CSS兼容性\" class=\"headerlink\" title=\"CSS兼容性\"></a>CSS兼容性</h1><p>CSS兼容性问题应该是平时开发中最常碰见，也是最令人头疼的问题了，这里重点总结一下，首先有一个原则：浏览器的bug是有的，<br>但是并不像我们自已认为的那么常见，大部分问题是我们对于CSS规范理解的不完整，一般情况下我们优先考虑是不是自己的问题，如<br>果确定不是自己的问题，在从浏览器的bug方面入手突破。</p>\n<h2 id=\"渲染模式控制\"><a href=\"#渲染模式控制\" class=\"headerlink\" title=\"渲染模式控制\"></a>渲染模式控制</h2><p><a href=\"http://www.mangguo.org/compatibility-mode-to-talk-about-x-ua-compatible/\" target=\"_blank\" rel=\"external\"></a></p>\n<h2 id=\"CSS-hack\"><a href=\"#CSS-hack\" class=\"headerlink\" title=\"CSS hack\"></a>CSS hack</h2><p>为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做<a href=\"http://blog.csdn.net/freshlover/article/details/12132801\" target=\"_blank\" rel=\"external\">CSS hack</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.all</span> <span class=\"selector-tag\">IE</span>&#123;<span class=\"attribute\">property</span>:value\\<span class=\"number\">9</span>;&#125;</div><div class=\"line\"><span class=\"selector-class\">.IE</span> 9&#123;<span class=\"attribute\">property</span>:value\\<span class=\"number\">9</span>\\<span class=\"number\">0</span>;&#125;</div><div class=\"line\"><span class=\"selector-class\">.gte</span> <span class=\"selector-tag\">IE</span> 8&#123;<span class=\"attribute\">property</span>:value\\<span class=\"number\">0</span>;&#125;</div><div class=\"line\">.lte IE 7&#123;*property:value;&#125;</div><div class=\"line\">.IE 7&#123;+property:value;&#125;</div><div class=\"line\"><span class=\"selector-class\">.IE</span> 6&#123;<span class=\"attribute\">_property</span>:value;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"常见问题和方案\"><a href=\"#常见问题和方案\" class=\"headerlink\" title=\"常见问题和方案\"></a>常见问题和方案</h2><ul>\n<li>最好使用一些预检查工具（在线或者和开发工具集成的），帮助排除语法错误。</li>\n<li>避免使用更特殊的选择器，遇到问题时候从根源上入手，而不是通过添加更加特殊的选择器，尽可能一般化，只有在细粒度的地方添加更特殊的选择器</li>\n<li>垂直外边距叠加是一个有趣的现象，例如下面的代码</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"comment\">/*border: 1px solid black;*/</span></div><div class=\"line\">    <span class=\"comment\">/*padding: 1px;*/</span></div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.text</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果没有使用CSS代码中注释掉的部分，默认渲染的行为是在wrap的外层产生20px的margin而不是10。这是由具有块级子元素的元素计算高度方式造成的。<br>如果元素没有垂直的边框和内边距，那么它的高度就是包含的子元素内容的高度。解决的方法是去掉上面CSS代码中的任一条注释，添加边框或者是那边距。<br>通过chrome的开发调试工具的layout工具可以方便的调试盒模型<br><a href=\"http://wenku.baidu.com/link?url=fPsZEQjjFe8RVzBkTwH130wvj09tr4IC_gObsyqBaW_7DJTOucVM-nGjrufJGVSn6uzFppOcd8nK22UVnm1CA1T8SrEe2tLt2o4QURAnAKO\" target=\"_blank\" rel=\"external\">CSS兼容性大全</a></p>\n<h1 id=\"JS兼容性\"><a href=\"#JS兼容性\" class=\"headerlink\" title=\"JS兼容性\"></a>JS兼容性</h1><h2 id=\"常见问题和方案-1\"><a href=\"#常见问题和方案-1\" class=\"headerlink\" title=\"常见问题和方案\"></a>常见问题和方案</h2><h1 id=\"通用的解决方法\"><a href=\"#通用的解决方法\" class=\"headerlink\" title=\"通用的解决方法\"></a>通用的解决方法</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://zh.learnlayout.com/index.html\" target=\"_blank\" rel=\"external\">学习CSS布局</a></p>\n","categories":[],"tags":[]},{"title":"简单模板的实现","url":"https://vincenthou.github.io/2014/05/19/简单模板的实现/","content":"<p>今天碰到这么一个需求，替换模板样式，需要支持这两种调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//两个模板是这样的</span></div><div class=\"line\"><span class=\"keyword\">var</span> tpl1 = <span class=\"string\">'My name is #&#123;name&#125;, I am #&#123;age&#125; years old'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> tpl2 = <span class=\"string\">'My name is #&#123;0&#125;, I am #&#123;1&#125; years old'</span>;</div><div class=\"line\"><span class=\"comment\">//调用后打印出来</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(render(tpl1, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'vincent'</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span>&#125;));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(render(tpl2, <span class=\"string\">'vincent'</span>, <span class=\"number\">25</span>));</div><div class=\"line\"><span class=\"comment\">//统一输出 My name is vincent, I am 25 years old</span></div></pre></td></tr></table></figure>\n<p>刚开始没什么思路，仔细想想还是挺简单的，实现代码这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">tpl</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> argLen = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> regx = <span class=\"regexp\">/#\\&#123;[\\w\\W]+?\\&#125;/gi</span>;<span class=\"comment\">//非贪婪模式</span></div><div class=\"line\">    <span class=\"keyword\">var</span> matches = tpl.match(regx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (argLen &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        matches.unshift(<span class=\"literal\">null</span>);<span class=\"comment\">//保证下标对应</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; argLen; i++) &#123;</div><div class=\"line\">            tpl = tpl.replace(matches[i], <span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">2</span> ===  argLen) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'object'</span> === <span class=\"keyword\">typeof</span>(obj)) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> key = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, mLen = matches.length; match = matches[i++];) &#123;</div><div class=\"line\">                key = match.slice(<span class=\"number\">2</span>, match.length - <span class=\"number\">1</span>);</div><div class=\"line\">                tpl = tpl.replace(match, obj[key]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> tpl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结一条经验，看来TDD开发还是很好的，没有思路的时候可以通过测试驱动，一步步实现需求，不过以上实现应该还有可以优化的地方，先记录下来。</p>\n","categories":[],"tags":["blog","frontend","javascript"]},{"title":"透明化跳板机","url":"https://vincenthou.github.io/2014/05/13/透明化跳板机/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近由于运维升级，原来可以直接连接到stage server，现在需要多一步，通过先登录到跳板机，再从跳板机登录到stage server，实在是太麻烦了，找到解决方案记录一下。</p>\n<h1 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h1><h2 id=\"生成公钥私钥文件\"><a href=\"#生成公钥私钥文件\" class=\"headerlink\" title=\"生成公钥私钥文件\"></a>生成公钥私钥文件</h2><p>一般用git的话，这个文件应该是生成过的，在用户目录的.ssh文件夹下面，没有的话自己生成一份</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p>之前连接stage server，是限制在.ssh下authorized_keys文件中添加自己的公钥的，都是连接的时候带上私钥的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -i ~/.ssh/cp_key/id_rsa user@stage_ip</div></pre></td></tr></table></figure>\n<p>今天连上去看了下，只有我比较“守规矩”，里面添加了不少个人的公钥，我也就默默的加上去了，这样我们后续连接就轻松许多。</p>\n<h2 id=\"在跳板机和目标机（stage-server）添加本地公钥\"><a href=\"#在跳板机和目标机（stage-server）添加本地公钥\" class=\"headerlink\" title=\"在跳板机和目标机（stage server）添加本地公钥\"></a>在跳板机和目标机（stage server）添加本地公钥</h2><p>跳板机可以直接连，使用ssh-copy-id工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub jump_server_ip</div></pre></td></tr></table></figure>\n<p>如果失败可以手动添加（stage server不能直接连，只能手动添加）：连接到要添加公钥的机器，进入用户目录的.ssh文件夹，打开authorized_keys文件，在文件末尾添加自己本地的公钥id_rsa.pub中的内容（一定要是在一行的），拷贝粘帖就搞定了。</p>\n<h2 id=\"隐藏跳板机\"><a href=\"#隐藏跳板机\" class=\"headerlink\" title=\"隐藏跳板机\"></a>隐藏跳板机</h2><p>在.ssh文件夹下面创建config文件，添加以下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host stage</div><div class=\"line\">    ProxyCommand ssh user@jump_server_ip nc stage_server_ip %p</div></pre></td></tr></table></figure>\n<p>这个隐藏实际是通过ProxyCommand，可以在开启ssh之前执行一个命令打开代理隧道。</p>\n<h2 id=\"连接测试\"><a href=\"#连接测试\" class=\"headerlink\" title=\"连接测试\"></a>连接测试</h2><p>配置搞定后我们就来连一下吧</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh stage</div></pre></td></tr></table></figure>\n<p>一下就来到stage server 的用户目录了，还可以方便的上传文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp project.zip user@stage:~/tmp</div></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.cnblogs.com/lucantang/p/3315329.html\" target=\"_blank\" rel=\"external\">SSH免密码登陆以及穿越跳板机</a><br><a href=\"http://wdicc.com/controlmaster-in-ssh/\" target=\"_blank\" rel=\"external\">有跳板机的 ssh 登陆</a><br><a href=\"http://blog.sina.com.cn/s/blog_677fbc19010179kv.html\" target=\"_blank\" rel=\"external\">SSH自动穿越跳板机 </a></p>\n","categories":[],"tags":["blog","linux"]},{"title":"CSS模块化","url":"https://vincenthou.github.io/2014/05/10/CSS模块化/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>如果只是几个简单页面从快速实现上来说，CSS模块化完全没有必要，想怎么写就怎么写。但是随着业务需求的变更或者是规模的增长，不只是你一个人在写CSS代码，CSS模块化就显得尤为重要了，如果没有很好的组织，到了后期简直是一场噩梦。</p>\n<h1 id=\"CSS代码组织的理论\"><a href=\"#CSS代码组织的理论\" class=\"headerlink\" title=\"CSS代码组织的理论\"></a>CSS代码组织的理论</h1><p>对于CSS模块化，前辈已经有了很多探索和实践，这里简述一下：</p>\n<h2 id=\"简单的组建化\"><a href=\"#简单的组建化\" class=\"headerlink\" title=\"简单的组建化\"></a>简单的组建化</h2><p>很直观的当我们拿到设计图的时候，会抽出来一些通用的组件，例如按钮，下拉框，选项卡等，这是很自然的行为，当组建的行为或者样式更改的时候，我们之需要修改相关的CSS片段就好了，这里为了防止一些通用名称如hd(header)，ft(footer)冲突，会需要是有后代选择器来构建命名空间，但是权重的提升会带来潜在的问题，这便是最朴素的做法。</p>\n<h2 id=\"OOCSS\"><a href=\"#OOCSS\" class=\"headerlink\" title=\"OOCSS\"></a>OOCSS</h2><p>这里的OO其实不是我们编写代码所理解的OO，其实更准确的理解应该是对于页面元素的抽象。OOCSS有两个最基本的原则就是：</p>\n<ol>\n<li>结构和皮肤分离</li>\n<li>容器和内容分离<br>这样区分的目的其实是分离变化，另外我觉的这两条规则隐含的一点是多使用组合来构建组件，少使用后代选择器（后代选择器提升的权重会是维护的梦魇）。其实在设计时为了保持风格统一，很多组件也会有重复的设计样式。<br>例如gitbhu这个编辑页面上，有个“This repository”和“Unwatch”的button，这两个元素从组件角度来看是不一样的，前者后面紧跟的是一个输入框，而后者后面跟的是操作的统计次数，但是它们又有相同的地方，就是都有圆角（左上和右下）box-shadow和小箭头(点击能有下拉)，这就是两个不同组件的共有特性部分，我们就可以这样来写：</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.select-btn</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">   <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(81,167,232,0.5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.select-btn</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid;</div><div class=\"line\">    <span class=\"attribute\">border-right-color</span>: transparent;</div><div class=\"line\">    <span class=\"attribute\">border-left-color</span>: transparent;</div><div class=\"line\">    <span class=\"attribute\">border-bottom-color</span>: transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种做法会带来一定的复杂度，一般情况下，我们无法一下识别出这些相似的特性，或者由于设计师的修改，相似的特性会被转移或者破坏，这就需要不断的重构代码，对于开发的抽象能力有一定的要求。因为使用组合，这种方式会比较灵活。</p>\n<h2 id=\"SMACSS\"><a href=\"#SMACSS\" class=\"headerlink\" title=\"SMACSS\"></a>SMACSS</h2><p>可扩展和模块化的CSS架构 (Scalable and Modular Architecture for CSS) 是把所有的CSS文件视为一个整体来考虑的，他的基本理论是将CSS代码分类，包括基础，布局，模块，状态和皮肤这5类，对于细节代码的书写没有过多的限制，后代选择器和ID选择器也是可用的。</p>\n<ul>\n<li>基础 就是我们平常会用到的CSS reset，这个一般不会经常修改的</li>\n<li>布局(l-) 页面的大块的布局结构，例如header，content, footer, siebar这些</li>\n<li>模块(modula name) 放在布局结构中的小组件，就是朴素模块化中的组件概念</li>\n<li>状态(is-) 组件或者布局元素的伪类效果（:hover :focus :checked）或者自定义状态类(.is-expanded .is-folded)</li>\n<li>皮肤 定义颜色和字体</li>\n</ul>\n<p>bootstrap就是一个典型的实践，bootstrap使用了normalize.less来reset，布局使用了grid.less来让用户自定义进行布局，core css中的button.less，tables.less等和所有的coponent，状态是跟组件关联的没有单独抽出来，bootstrap有个theme文件方便用户定制组件的皮肤。</p>\n<h2 id=\"DRY-CSS\"><a href=\"#DRY-CSS\" class=\"headerlink\" title=\"DRY CSS\"></a>DRY CSS</h2><p>DRY CSS是最新的一项实践，个人感觉他的上手是最容易，复杂程度也是最低的。他有两条重要的原则</p>\n<ol>\n<li>将样式从内容分离</li>\n<li>通过控制层叠来避免特殊性</li>\n</ol>\n<p>通过内容的语义而不是样式来命名，使用ID选择器也没什么大不了的。<br>之需要三步你就可以开始上手了：</p>\n<ol>\n<li>将可以复用的CSS属性分组</li>\n<li>根据语义为分组命名</li>\n<li>添加相同分组样式的选择器</li>\n</ol>\n<p><img src=\"http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/09/drycss.jpg\" alt=\"DRY\"><br>这样写代码会很快，也会有维护的便捷，但是可读性就一般了，比较适合快速搭建原型或者设计搞已经固定下来的开发。</p>\n<h1 id=\"额外的工具\"><a href=\"#额外的工具\" class=\"headerlink\" title=\"额外的工具\"></a>额外的工具</h1><p>近年来CSS预处理器渐渐流行起来，包括LESS，SASS，Stylus这些工具也有了应用。其实总体看来这些DSL的语法特性差别不是很大，包括变量、方法、嵌套和混入等，详细的语法对比看<a href=\"http://www.oschina.net/question/12_44255\" target=\"_blank\" rel=\"external\">这里</a>。如果使用ruby作为开发SASS应该是不二的选择，配合Compass更能显出其威力，对应的LESS也有对应国产的<a href=\"https://github.com/feichang/veryless\" target=\"_blank\" rel=\"external\">veryless</a>。stylus比较新，语法更自由些（你甚至可以不用括号和冒号），不过个人感觉过分自由的语法不利于项目的统一（总是看起来怪怪的）。虽然bootstrap有SASS和stylus的port，但是官方还是用LESS来开发的，如果是bootstrap的项目还是还是使用LESS比较方便。另外SASS和stylus需要额外的环境配置和工具安装，LESS在开发阶段之需要引入一个js就可以开始工作了，后期可以再编译合并进行优化。虽然都是DRY的实践，有一个语法特性是值得商榷的，就是mixin。mixin在ruby语法中是一个很好的特性，可以方便的实现多重继承，这些CSS预处理器引入了这一个编程语言特性，本来是未可厚非的，但是我觉得不应该过度使用。mixin的好处不用多说，开发时应用起来也很方便，但是一旦过度使用在编译后，CSS中就会有大量重复的代码块。我觉得组合的思想还是更适合在CSS中使用的，在bootstrap的LESS代码中也有体现，无参数的mixin用的是很少的，大部分mixin是使用有参数的（编译后的值不一样），不会造成重复。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>实际使用CSS预编译器会有一定的学习成本，团队中推动会有阻力（如果大家都有尝试新技术的兴趣，不妨一用），相比之下模块化组织CSS代码的思路会更实用些，根据实际项目需求取舍吧，最适合的才是最好的。<br>我觉得整体的CSS的模块化组织应该是这样的：</p>\n<ul>\n<li>使用SMACSS组织整体项目代码</li>\n<li>base: 尽量使用normal.css来作为base，如果要兼具语义化和设计图还原还是自己写</li>\n<li>layout: 可以认为header、footer这些也是module，layout中只是对于这些module在不同结构中的尺寸和布局（保证module的独立性）</li>\n<li>module: 应用OOCSS的思想，使用组合的类来创建组件，模块内使用百分比给定尺寸</li>\n<li>state: module特有的state直接和module相关代码放在一起，通用的state除了一些伪类的效果还有trasition和animation</li>\n<li>theme: 定义常用字体、字号和颜色，方便组合应用到模块和元素上</li>\n<li>common: 借鉴<a href=\"https://github.com/zhangxinxu/quickLayout\" target=\"_blank\" rel=\"external\">quick layout</a>的思路，提取出常用的原子类方便组合。另外，清除浮动，垂直居中，字体溢出处理等元素处理的通用解决方案<br>最好的情况是这些部分由一两个人来维护，保证风格和意义的统一，其他开发之需要像使用bootstrap一样拿来就用就好。以往的开发过程中按照页面自己写自己的CSS虽然可以很方便的分配人物，但是这样的结果是写出来的代码既有重复，命名冲突也很严重。当然这种做法是颇费周折的，使用DRY CSS的做法就没这么麻烦了，就是出来的代码结构没有这么好看，不注意的话，可能会有很多重复的地方。<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1></li>\n<li><a href=\"http://oocss.org/\" target=\"_blank\" rel=\"external\">OOCSS</a></li>\n<li><a href=\"http://smacss.com/\" target=\"_blank\" rel=\"external\">SMACSS</a></li>\n<li><a href=\"http://www.vanseodesign.com/css/dry-principles/\" target=\"_blank\" rel=\"external\">DRY CSS</a></li>\n<li><a href=\"http://www.creativebloq.com/css3/create-modular-and-scalable-css-9134351\" target=\"_blank\" rel=\"external\">4 ways to create CSS that’s modular and scalable</a></li>\n<li><a href=\"http://lesscss.net/article/home.html\" target=\"_blank\" rel=\"external\">LESS文档</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/06/sass.html\" target=\"_blank\" rel=\"external\">SASS用法指南</a></li>\n<li><a href=\"http://compass-style.org/\" target=\"_blank\" rel=\"external\">Compass官网</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/11/compass.html\" target=\"_blank\" rel=\"external\">Compass用法指南</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2012/06/stylus-nodejs-expressive-dynamic-robust-css/\" target=\"_blank\" rel=\"external\">Stylus-NodeJS下构建更富表现力/动态/健壮的CSS</a></li>\n<li><a href=\"http://learnboost.github.io/stylus/\" target=\"_blank\" rel=\"external\">stylus官网</a></li>\n</ul>\n","categories":[],"tags":["blog","css","frontend"]},{"title":"【翻译】 facebook的性能优化","url":"https://vincenthou.github.io/2014/04/30/【翻译】-facebook的性能优化/","content":"<h1 id=\"翻译文章\"><a href=\"#翻译文章\" class=\"headerlink\" title=\"翻译文章\"></a>翻译文章</h1><p>在facebook,特性和应用被深度集成在每个页面里面，这样的深度集成给前端性能的优化带来了挑战和机会（前端指的是浏览器的渲染）：</p>\n<ol>\n<li>每个特性被集成到多个页面里面。在不同的页面间有大量的通用HTML，JS，CSS重复。当一个用户在页面之间浏览的时候，即使在本地已经缓存，对于浏览器来说，重复执行通用的JS，重新载入内容是一件头痛的事情。</li>\n<li>几乎Facebook的每个页面都包含不同产品团队开发的不止一个特性的网页内容。评估在页面上添加新的特性对于前端性能的影响是一个巨大的挑战。</li>\n<li>网页上的新特性不仅依赖于快速的产品周期还依赖于用户的接受度。性能优化必须在快速的特性开发中是自适应并且可维护的。</li>\n</ol>\n<p>在这里我们要讨论一些改进和维持前端性能的经验，在以下几个方面详细阐述如何构建和操作这样一套基础架构：</p>\n<ol>\n<li>使用AJAX来渲染整个页面，过去AJAX一般被用来获取动态的内容或者响应用户的操作部分渲染页面，facebook开发了一套框架使用AJAX来渲染整个页面，同时利用JS保持原来传统页面的用户体验。这套纯粹使用AJAX来渲染页面的框架消除了跨页面重复执行通用JS和重新载入内容的问题。</li>\n<li>评估和性能测试：我们开发了一套性能评估框架来模拟和分析网页速度。除了传统的模拟特性，这套框架提供了A/B测试能力并且能与特性启动系统集成，这使得一个新的特性的引入对于整体性能的影响变得可以评估，其实是多个页面混合迭代的特性</li>\n<li>适应性的静态资源打包：许多静态资源打包系统都是在特性部署的时候执行。产品的开发人员指定某个特性可能需要的所有静态资源，构建系统将他们分组打包成JS和CSS文件，以及图片精灵。因为我们页面上用很多特性并且这写特性都是在迭代演进中的，部署时打包系统是不适用的。我们开发了一套适应性打包系统，这套系统基于使用率的评估来优化静态资源。使用成本效益分析模型，这套系统识别最佳打包策略，并且自动重平衡打包来追踪特性的演进。<h1 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h1></li>\n</ol>\n<p>2亿的用户，每天400亿的PV (数据有点老了) 虽然是一篇比较老的文章，但是有些思想还是可以借鉴的。</p>\n<ul>\n<li>使用AJAX来实现文中提出的效果会耗费更多的网络资源，一种更实际的技术叫做bigpipe，是为了解决重数据渲染而提出的一种思路，<a href=\"http://weibo.com/\" target=\"_blank\" rel=\"external\">新浪微博</a>就是采用了这种技术，如果在网速较差的时候打开页面，可以明显看到，页面的布局结构已经呈现出来，同时数据还在不断的更新加载出空白的部分。打开页面调试工具可以看到在页面底部有一堆的script标签，每个标签中定义的结构大概是</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">FM.view(&#123;</div><div class=\"line\">     <span class=\"string\">\"pid\"</span>:<span class=\"string\">\"pl_leftnav_common\"</span>,</div><div class=\"line\">     <span class=\"string\">\"js\"</span>:[<span class=\"string\">\"home\\/js\\/pl\\/leftnav\\/common\\/index.js?version=c67133302083a411\"</span>],</div><div class=\"line\">     <span class=\"string\">\"css\"</span>:[<span class=\"string\">\"style\\/css\\/module\\/global\\/WB_left_nav.css?version=2112cdcd580c86d4\"</span>],</div><div class=\"line\">     <span class=\"string\">\"html\"</span>:<span class=\"string\">\"&lt;div class=\\\"level_1_Box\\\"&gt;\\n\\t\\t   ...  &lt;\\/div&gt;\\n\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里就是bigpipe技术的关键，将页面切分成若干模块，每个模块定义其基本组成单元（html+css+js），给模块一个唯一标识的id。在页面加载的时候首先在返回流中写入页面的布局文件，注册页面模块完成填充后的回调函数，让布局页面优先渲染。同时，持续写入模板数据和页面模块到返回流中，在模块和相关模块数据完成填充后，浏览器读取模块js脚本后，触发先前注册的模块事件，将模块添加到到页面的对应位置上。<br>这样的做法有效提升了用户的可感知页面性能，比一开始一个大白屏，等了几秒钟后，一下加载出来要好得多。当然要实现这项技术需要前后端配合，摒弃以往在后端数据填充模板，完成后再返回的模式，保持渲染的连贯性。结合nodejs异步IO的特性，页面渲染的时间将取决于并行异步数据加载中最慢的模块所需要的时间，可以将这一技术的特点进一步发挥。</p>\n<ul>\n<li>对于文中提到的这种框架能力是很强大的，不过对于facebook这样有多条产品线，不同产品线上重复功能的模块这样的框架测试能力是很有必要的，不过暂时没发现有比较好的开源实现。<br>对于一般产品线而言，性能优化总是放在最后来做的（如果定义好开发规范，我们可以通过一些经验和方法延迟甚至避免性能瓶颈的到来），而做性能优化也的确是慢得让我们自己都无法忍受了，这里展开话题就很多了，参考 #20 。有些工具还是很好用的，比如<a href=\"http://jsperf.com/\" target=\"_blank\" rel=\"external\">jsperf</a>，最喜欢他跨浏览器测试的能力，图表显示也很直观，不过只适用于对于单独case的测试。整体性能优化就有YSlow，最近用了一款chrome的插件也不错，叫 PageSpeed Insights for Chrome，点击一下分析可以在控制台中查看结果了，很多结果的建议都是最佳实践的体现。</li>\n<li>静态资源的打包工具也用了不少，不过像文中提到的这么智能的还真没用过。打包工具有时是基于js模块管理工具的，例如像requirejs可以用r.js或者grunt插件, seajs有一套自己的打包工具。如grunt和gulp这样的工具灵活性比较强，可以很方便的根据项目的需求定制打包的流程，就是很多重复的工作要自己做。腾讯的前端团队推出了一套打包工具（不仅仅是打包工具）<a href=\"http://madscript.com/modjs/\" target=\"_blank\" rel=\"external\">modjs</a> ，完成了一些通用性需求的打包方案，同时又不失灵活性，用起来非常顺手。<h1 id=\"原文资料\"><a href=\"#原文资料\" class=\"headerlink\" title=\"原文资料\"></a>原文资料</h1></li>\n</ul>\n<p><a href=\"http://velocityconf.com/velocity2009/public/schedule/detail/7611\" target=\"_blank\" rel=\"external\">原文链接</a><br><a href=\"http://cdn.oreillystatic.com/en/assets/1/event/29/Frontend Performance Engineering in Facebook  Presentation.zip\" target=\"_blank\" rel=\"external\">PPT地址</a></p>\n","categories":[],"tags":["blog","frontend","pefermance"]},{"title":"使用ab进行网站压力测试","url":"https://vincenthou.github.io/2014/04/20/使用ab进行网站压力测试/","content":"<p>当我们完成了一个网站的开发工作后，为了保证网站的服务质量一般都会进行压力测试，有很多开源的工具可供使用，每种压力测试工具都提供了很好的特性支持，例如大名鼎鼎的JMeter。如果我们只是想要看到某个页面的效果，或者在几个技术方案中作出权衡，有个很好用的工具apache自带的压力测试工具ab(就是apache benchmark的缩写啦)</p>\n<h1 id=\"ubuntu上安装\"><a href=\"#ubuntu上安装\" class=\"headerlink\" title=\"ubuntu上安装\"></a>ubuntu上安装</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apache2-utils</div></pre></td></tr></table></figure>\n<h1 id=\"工具参数\"><a href=\"#工具参数\" class=\"headerlink\" title=\"工具参数\"></a>工具参数</h1><p>ab 有许多配置参数，就不一一列出，可以通过help指令或者参考资料了解，说一个常用的参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- n 总共需要发出的请求数</div><div class=\"line\">- c 发送请求使用的并发数（简单理解为客户端数量）</div><div class=\"line\">- t 等待服务器的最大响应时间（过期不候）</div><div class=\"line\">- k 使用HTTP的keep-alive特性 (这个需要服务器的支持)</div></pre></td></tr></table></figure>\n<p><a href=\"http://blog.sina.com.cn/s/blog_564fc50a0100n7r6.html\" target=\"_blank\" rel=\"external\">keep-alive特性</a></p>\n<h1 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h1><p>贴出一些使用ab压力测试的结果:</p>\n<ul>\n<li><a href=\"https://github.com/matyhtf/swoole/blob/master/wiki/bench.md\" target=\"_blank\" rel=\"external\">压测nginx swoole node.js golang的http server</a></li>\n<li><a href=\"http://snoopyxdy.blog.163.com/blog/static/6011744020117315192204/\" target=\"_blank\" rel=\"external\">多核单服务器各种配置和业务压力下的node.js性能测试  </a></li>\n</ul>\n<p>测试结果中有很多有用的信息，我们一般比较关注两个指标：<br>Request per second 每秒处理请求数（服务器负载能力的有力体现）<br>Time per request 每个请求的响应时间 （注意这里有两个值）<br>由于对于并发请求，cpu实际上并不是同时处理的，而是按照每个请求获得的时间片逐个轮转处理的，所以基本上第一个Time per request时间约等于第二个Time per request时间乘以并发请求数</p>\n<h1 id=\"小试验\"><a href=\"#小试验\" class=\"headerlink\" title=\"小试验\"></a>小试验</h1><ul>\n<li>基准测试</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -c 1000 -n 1000 http://localhost:8001/</div><div class=\"line\">ab -c 1000 -n 1000 http://localhost/index.html</div><div class=\"line\">ab -c 1000 -n 1000 http://localhost/index.php</div></pre></td></tr></table></figure>\n<p><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs官网</a> hello world: RPS 2000左右(实验次数越多，效率急剧下降)<br>ngnix 默认配置加载静态文件：RPS 10000左右<br>ngnix 默认配置加载php文件：RPS 5000左右<br>ngnix 反向代理nodejs: RPS 7000左右<br>ngnix 反向代理加负载均衡2个nodejs进程: RPS 8000左右</p>\n<ul>\n<li>减小并发数</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -c 100 -n 1000 http://localhost:8001/</div><div class=\"line\">ab -c 100 -n 1000 http://localhost/index.html</div><div class=\"line\">ab -c 100 -n 1000 http://localhost/index.php</div></pre></td></tr></table></figure>\n<p><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs官网</a> hello world: RPS 4000左右<br>ngnix 默认配置加载静态文件：RPS 10000左右 (添加-k选项可以达到16000)<br>ngnix 默认配置加载php文件：RPS 500左右<br>ngnix 反向代理nodejs: RPS 3000左右<br>ngnix 反向代理加负载均衡2个nodejs进程: RPS 2700左右</p>\n<ul>\n<li>增加请求量</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -c 1000 -n 2000 http://localhost:8001/</div><div class=\"line\">ab -c 1000 -n 2000 http://localhost/index.html</div><div class=\"line\">ab -c 1000 -n 2000 http://localhost/index.php</div></pre></td></tr></table></figure>\n<p><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs官网</a> hello world: RPS 2000左右(实验次数越多，效率急剧下降)<br>ngnix 默认配置加载静态文件：RPS  8000左右(添加-k选项可以达到12000)<br>ngnix 默认配置加载php文件：Connection reset<br>ngnix 反向代理nodejs: RPS 2000左右<br>ngnix 反向代理加负载均衡2个nodejs进程: RPS 4000左右（但是不是很稳定）</p>\n<ul>\n<li>结论</li>\n</ul>\n<ol>\n<li>nodejs 处理高并发请求效率较差，并发数越多稳定性越不好</li>\n<li>nginx适合作为静态文件服务器，设置keep-alive header可以有效提升服务性能</li>\n<li>nginx使用负载均衡和反向代理可以有效提高nodejs处理并发的能力</li>\n<li>nodejs 处理低并发的大量请求效率还是很不错的，适合作为rest API</li>\n<li>简单使用php+nginx效率处理大量低并发请求明显小于nodejs, 大并发时效果出奇地好（有点疑问<img src=\"http://mat1.gtimg.com/www/mb/images/face/32.gif\" alt=\"疑问\">）<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1></li>\n</ol>\n<p><a href=\"http://www.nginx.cn/110.html\" target=\"_blank\" rel=\"external\">使用ab对nginx进行压力测试</a><br><a href=\"http://leepiao.blog.163.com/blog/static/485031302010234352282/\" target=\"_blank\" rel=\"external\">Apache ab 压力测试</a></p>\n","categories":[],"tags":["blog","pefermance"]},{"title":"Get started with Yii 2.0","url":"https://vincenthou.github.io/2014/04/14/Get-started-with-Yii-2-0/","content":"<h1 id=\"安装-Composer\"><a href=\"#安装-Composer\" class=\"headerlink\" title=\"安装 Composer\"></a>安装 Composer</h1><p><a href=\"http://my.oschina.net/starlight36/blog/152944\" target=\"_blank\" rel=\"external\">Composer简介</a>，下载可执行文件，并且放在PATH下，这样就可以轻易在命令行中调用，执行命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div><div class=\"line\">$ sudo mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</div><div class=\"line\">$ composer (不需要使用 php composer.phar 了)</div></pre></td></tr></table></figure>\n<h1 id=\"安装-Yii2\"><a href=\"#安装-Yii2\" class=\"headerlink\" title=\"安装 Yii2\"></a>安装 Yii2</h1><p>安装基础应用模板</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project yiisoft/yii2-app-basic basic 2.0.0-beta</div></pre></td></tr></table></figure>\n<p>安装高级应用模板</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project yiisoft/yii2-app-advanced advanced 2.0.0-beta</div></pre></td></tr></table></figure>\n<p>鉴于被墙的原因，安装失败的话，直接下载压缩包<br><a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.0-beta/yii-basic-app-2.0.0-beta.tgz\" target=\"_blank\" rel=\"external\">基础包</a><br><a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.0-beta/yii-advanced-app-2.0.0-beta.tgz\" target=\"_blank\" rel=\"external\">高级包</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.yiiframework.com/doc-2.0/guide-index.html\" target=\"_blank\" rel=\"external\">Yii 2.0开发向导</a></li>\n<li><a href=\"http://www.yiiframework.com/doc-2.0/index.html\" target=\"_blank\" rel=\"external\">Yii 2.0文档</a></li>\n<li><a href=\"http://www.yiiframework.com/news/77/yii-2-0-beta-is-released/\" target=\"_blank\" rel=\"external\">Yii Release Note</a></li>\n<li><a href=\"http://www.yiiframework.com/wiki/490/creating-a-simple-crud-app-with-yii2\" target=\"_blank\" rel=\"external\">简单Demo</a></li>\n</ul>\n","categories":[],"tags":["blog","php"]},{"title":"Linux 工具链安装","url":"https://vincenthou.github.io/2014/04/03/Linux-工具链安装/","content":"<p>最近换用ubuntu的系统，很多工具要安装，挺繁琐的，在这里记录下来</p>\n<h1 id=\"LNMP-Setup\"><a href=\"#LNMP-Setup\" class=\"headerlink\" title=\"LNMP Setup\"></a>LNMP Setup</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div></pre></td></tr></table></figure>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get intsall nginx</div></pre></td></tr></table></figure>\n<ul>\n<li>所有的配置文件都在/etc/nginx下,并且每个虚拟主机已经安排在了/etc/nginx/sites-available下</li>\n<li>程序文件在/usr/sbin/nginx * 日志放在了/var/log/nginx中</li>\n<li>在/etc/init.d/下创建了启动脚本nginx</li>\n<li>默认的虚拟主机的目录设置在了/var/www/nginx-default</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/nginx start </div><div class=\"line\">    or</div><div class=\"line\">service nginx start</div><div class=\"line\"></div><div class=\"line\">sudo killall apache2</div></pre></td></tr></table></figure>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php5 php5-cgi php5-mysql php5-curl php5-gd php5-idn php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-mhash php5-ming php5-pspell php5-recode php5-snmp php5-tidy php5-xmlrpc php5-sqlite php5-xsl</div></pre></td></tr></table></figure>\n<h3 id=\"spawn-fcgi\"><a href=\"#spawn-fcgi\" class=\"headerlink\" title=\"spawn-fcgi\"></a>spawn-fcgi</h3><p>为什么要安装spawn-fcgi呢,它用来控制php-cgi进程,以防止进程崩溃或是单进程的效率太低.<br>网上很多人都说要使用spawn-fcgi必须得安装lighttpd,实际上不必要,可以直接安装spawn-fcgi</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install spawn-fcgi</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install mysql-server mysql-client</div><div class=\"line\">sudo /etc/init.d/mysql start</div></pre></td></tr></table></figure>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><ol>\n<li>配置根目录和绝对路径</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">   ...</div><div class=\"line\">root &#123;web_root&#125;</div><div class=\"line\">   ...</div><div class=\"line\">location ~ .php$ &#123;</div><div class=\"line\">    fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">    fastcgi_index index.php;</div><div class=\"line\">    fastcgi_param SCRIPT_FILENAME /var/www/nginx-default<span class=\"variable\">$fastcgi_script_name</span>;(Optional)</div><div class=\"line\">    include /etc/nginx/fastcgi_params; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>去掉注释/etc/php5/cgi/php.ini中cgi.fix_pathinfo=1;这样php-cgi方能正常使用SCRIPT_FILENAME这个变量.</p>\n<ol>\n<li>启动fastcgi并且重新载入nginx配置</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/nginx reload</div><div class=\"line\">sudo /usr/bin/spawn-fcgi -a 127.0.0.1 -p 9000 -C 5 -u www-data -g www-data -f /usr/bin/php5-cgi -P /var/run/fastcgi-php.pid</div></pre></td></tr></table></figure>\n<p>参数含义如下</p>\n<ul>\n<li>-f 指定调用FastCGI的进程的执行程序位置,根据系统上所装的PHP的情况具体设置</li>\n<li>-a 绑定到地址addr</li>\n<li>-p 绑定到端口port</li>\n<li>-s 绑定到unix socket的路径path</li>\n<li>-C 指定产生的FastCGI的进程数,默认为5(仅用于PHP)</li>\n<li>-P指定产生的进程的PID文件路径</li>\n<li>-u和-g FastCGI使用什么身份(-u 用户 -g 用户组)运行,Ubuntu下可以使用www-data,其他的根据情况配置,如nobody、apache等现在可以在web根目录下放个探针或php文件测试一下了</li>\n</ul>\n<p>设置开机启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/rc.local</div></pre></td></tr></table></figure>\n<p>添加一行   </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/spawn-fcgi -a 127.0.0.1 -p 9000 -C 5 -u www-data -g www-data -f /usr/bin/php5-cgi -P /var/run/fastcgi-php.pid</div></pre></td></tr></table></figure>\n<h1 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h1><h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/sublime-text-2  </div><div class=\"line\">sudo apt-get update </div><div class=\"line\">sudo apt-get install sublime-text (sublime-text-dev/sublime-text-2)</div></pre></td></tr></table></figure>\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><h3 id=\"Package-Control\"><a href=\"#Package-Control\" class=\"headerlink\" title=\"Package Control\"></a>Package Control</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib2,os; pf=<span class=\"string\">'Package Control.sublime-package'</span>; ipp=sublime.installed_packages_path(); os.makedirs(ipp) <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(ipp) <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),<span class=\"string\">'wb'</span>).write(urllib2.urlopen(<span class=\"string\">'http://sublime.wbond.net/'</span>+pf.replace(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).read()); <span class=\"keyword\">print</span> <span class=\"string\">'Please restart Sublime Text to finish installation'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Emmet - CSS style HTML Coding <a href=\"https://github.com/emmetio/pyv8-binaries\" target=\"_blank\" rel=\"external\">Manually install pyv8</a></li>\n<li>Javascript Refactor - Refactor javascript code tool</li>\n<li>DocBlockr - Generate comment pattern based on your code</li>\n<li>MarkdownEditing - Visual editing markdown document</li>\n<li>Snippets - A lot of snippets for code block generation (AngularJS Jade LESS Sass SCSS CSS Grunt Gulp Mocha PHPUnit)</li>\n<li>Terminal - Open terminal in the sublime text project folders</li>\n<li>jsFormat - Format JS file</li>\n<li>CanIUse - Check the compability of CSS property</li>\n<li>Themes - Theme Brogrammer</li>\n</ul>\n","categories":[],"tags":["blog","linux"]},{"title":"前端性能优化","url":"https://vincenthou.github.io/2014/03/20/前端性能优化/","content":"<p>好久没有梳理知识了，最近在做一些前端性能优化的尝试，一些心得和知识记录下来。<br>网站性能优化从来都不是一个孤立的点，完善的优化一定是要前后端协同配合</p>\n<h1 id=\"经典Web优化14条准则：\"><a href=\"#经典Web优化14条准则：\" class=\"headerlink\" title=\"经典Web优化14条准则：\"></a>经典Web优化14条准则：</h1><p>1.减少HTTP请求数：合并文件，CSS Sprite(工具网站)</p>\n<ol>\n<li>使用CDN：DNS负载均衡将请求分发到近用户的cache服务器</li>\n<li>添加Expire/Cache-Control头（甚用）</li>\n<li>启用Gzip压缩：压缩85%</li>\n<li>CSS放在页面上端：浏览器只会在CSS全部加载完成后渲染</li>\n<li>Script放在页面最下面：减少可视内容加载时间，阻塞并行下载</li>\n<li>避免CSS表达式</li>\n<li>外部化CSS和JS文件</li>\n<li>减少DNS查询：一个页面包含域名数2-4个</li>\n<li>压缩JS和CSS文件</li>\n<li>减少重定向</li>\n<li>移除重复脚本，提高重用性</li>\n<li>配置实体标签ETags：标识资源有效性的标签，Spring Hibernate</li>\n<li>缓存AJAX请求：参考3，使用时间戳<h1 id=\"16ms优化\"><a href=\"#16ms优化\" class=\"headerlink\" title=\"16ms优化\"></a>16ms优化</h1></li>\n</ol>\n<ul>\n<li>You can’t optimize what you can not measure</li>\n<li>优化目标：脚本时间+渲染时间+绘制时间&lt;16ms（每帧）</li>\n<li>工具：Timeline, Profiles, UI Responsiveness, Profile, Traker(Dron blog)</li>\n<li>每帧最多发生两次DOM更新<h1 id=\"Google-1s完成终端首屏渲染：\"><a href=\"#Google-1s完成终端首屏渲染：\" class=\"headerlink\" title=\"Google 1s完成终端首屏渲染：\"></a>Google 1s完成终端首屏渲染：</h1></li>\n</ul>\n<ol>\n<li>服务器响应小于200ms</li>\n<li>尽量少的重定向</li>\n<li>尽量少的第一次请求数</li>\n<li>避免过多堵塞JS和CSS</li>\n<li>给浏览器留200ms渲染时间</li>\n<li>优化JS执行和渲染时间</li>\n<li>减少DNS Lookup</li>\n<li>并行请求</li>\n<li>压缩</li>\n<li>缓存</li>\n<li>按需加载</li>\n<li>模块化<h1 id=\"JS性能优化最佳实践\"><a href=\"#JS性能优化最佳实践\" class=\"headerlink\" title=\"JS性能优化最佳实践\"></a>JS性能优化最佳实践</h1></li>\n<li>使用DocumentFragment或者innerHTML进行大块元素注入</li>\n<li>高频执行事件的消抖：参考underscore的debounce</li>\n<li>使用Session Storage存静态内容或片段</li>\n<li>使用异步加载或者延迟加载依赖文件：RequireJS, curl</li>\n<li>使用array的join方法连接字符串：先将字符片段push到数组中，再join</li>\n<li>使用CSS3动画：transform: transform3d(0,0,0)强制硬件加速</li>\n<li>对于频繁更改或者大量的元素父元素添加事件代理</li>\n<li>使用Data URI代替图片src</li>\n<li>使用媒体查询加载指定大小的图片</li>\n<li>对于频繁查询的列表根据key值建立索引表，减少遍历</li>\n<li>控制DOM元素数量：使用before after伪元素，延迟加载和呈现内容，使用事件委托12. 将节点转化为字符串存储</li>\n<li>使用Web workers处理负责计算，保证UI渲染流畅性</li>\n<li>避免使用@import, 使用SASS将文件合并</li>\n<li>将多份媒体查询代码合并<h1 id=\"移动端良好体验的标准\"><a href=\"#移动端良好体验的标准\" class=\"headerlink\" title=\"移动端良好体验的标准\"></a>移动端良好体验的标准</h1></li>\n</ol>\n<ul>\n<li>流畅：动画和滑动</li>\n<li>稳定：很少crash</li>\n<li>节能：省电</li>\n</ul>\n<p>渲染过程<br><img src=\"https://app.yinxiang.com/shard/s15/res/983b5eff-a042-4127-af1e-20823e9e6d56/IMG_20131118_102334.249.jpg?resizeSmall&amp;width=700\" alt=\"image\"></p>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li><a href=\"http://www.webpagetest.org/\" target=\"_blank\" rel=\"external\">Webpagetest</a><h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1></li>\n<li><a href=\"http://stevesouders.com/\" target=\"_blank\" rel=\"external\">stevesouders</a></li>\n<li><a href=\"http://www.bookofspeed.com/\" target=\"_blank\" rel=\"external\">bookofspeed</a></li>\n</ul>\n","categories":[],"tags":["blog","frontend","pefermance"]},{"title":"Test JSON","url":"https://vincenthou.github.io/2014/03/05/Test-JSON/","content":"<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Enter\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"This is a test content\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sour\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"imgs\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"http://p9.qhimg.com/dmt/490_350_/t01ce7fa1926758d745.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://p0.qhimg.com/dmt/490_350_/t01a9fc0e5a53389560.jpg\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"number\">1393987721705</span>,</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"http://www.baidu.com\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Leave\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"This is a test content your sadf werq 32af\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sour\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">\"imgs\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"http://p9.qhimg.com/dmt/490_350_/t01ce7fa1926758d745.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://p2.qhimg.com/dmt/490_350_/t01604d7036269d2cbf.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://p0.qhimg.com/dmt/490_350_/t0105c6e59b13ca049e.jpg\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"number\">1393987721715</span>,</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"http://image.so.com\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n","categories":[],"tags":["meta"]},{"title":"Jquery源码结构","url":"https://vincenthou.github.io/2014/01/03/Jquery源码结构/","content":"<p>基于<a href=\"http://code.jquery.com/jquery-2.0.3.js\" target=\"_blank\" rel=\"external\">版本2.0.3</a><br>使用闭包包裹实现代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span></div><div class=\"line\">    <span class=\"comment\">// A central reference to the root jQuery(document)</span></div><div class=\"line\">    rootjQuery,</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"built_in\">module</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span>.exports === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = jQuery;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd ) &#123;</div><div class=\"line\">        define( <span class=\"string\">\"jquery\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> jQuery; &#125; );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.document === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</div></pre></td></tr></table></figure>\n<ul>\n<li>21-94            定义一些变量和函数，包括Jquery生成对象的工厂方法</li>\n<li>96-283          定义Jquery的静态方法</li>\n<li>285-347        定义Jquery的扩展方法extend</li>\n<li>349-817        使用extend扩展一些工具方法</li>\n<li>877-2856       Sizzle选择器</li>\n<li>2879-3042     Callbacks对回调函数的统一管理</li>\n<li>3043-3183     Deferred对异步（延迟）操作的统一管理</li>\n<li>3184-3295     support浏览器功能检测</li>\n<li>3308-3652     data() 数据缓存</li>\n<li>3653-3797     queue 队列管理</li>\n<li>3803-4299     attr(), prop(), addClass()等对于元素属性的操作</li>\n<li>4300-5128     事件操作的相关方法on(), trigger()等</li>\n<li>5140-6057     DOM操作：添加，删除，获取，包装，DOM筛选</li>\n<li>6059-6620     css()方法：样式的操作</li>\n<li>6621-7854     ajax()和提交的数据</li>\n<li>7855-8584     animation 动画相关</li>\n<li>8585-8792     位置和尺寸的方法</li>\n<li>8804-8821     兼容CommonJS和AMD规范，支持模块化</li>\n<li>8826             暴露Jquery对象</li>\n</ul>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2013/07/jquery-%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%88%B6/\" target=\"_blank\" rel=\"external\">jQuery诞生记-原理与机制</a></p>\n","categories":[],"tags":["blog","frontend","javascript"]},{"title":"在Yii框架中使用PHP resque","url":"https://vincenthou.github.io/2013/12/22/在Yii框架中使用PHP-resque/","content":"<p>总体上来说PHP resque做的事情很简单，就是创建后台任务队列，让守护进程去“消费”执行它们，PHP resque为我们做了很多实现的工作，只需要简单的配置，编写我们需要执行的任务代码就可以了。<br><a href=\"https://github.com/blog/542-introducing-resque\" target=\"_blank\" rel=\"external\">Resque思想的介绍</a></p>\n<p>因为<a href=\"https://github.com/chrisboulton/php-resque\" target=\"_blank\" rel=\"external\">php-resque</a>使用了php的PCNTL函数，所以只能在Linux下运行，下面的安装和说明默认都是在Linux平台下的。<br><strong>Tip</strong>:</p>\n<ol>\n<li>安装的时候要保证clone下载php resque的文件夹是可写的，chmod一下</li>\n<li>修改demo中的resque.php文件，改为”require <strong>DIR</strong>.’/../bin/resque’”,必须加上当前文件的绝对路径，否则不好使，bin目录下方的文件是resque，没有php后缀名的，坑爹啊</li>\n<li>xdebug启用: display_errors=On</li>\n<li>为composer工具设置别名，方便使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> composer=<span class=\"string\">'/usr/local/bin/composer.phar'</span></div></pre></td></tr></table></figure>\n<p>简单实验一下，就有个感性的认识了，下面开始正式的工作。<br>补充：基于开源项目yii-resque开发的项目，添加了一些特性，修复原有代码中的一些bug（原作者好久不维护了，bug真心不少），和同事一起搞出来的<a href=\"http://git.oschina.net/VincentHou/yii-resque-ex\" target=\"_blank\" rel=\"external\">yii-resque-ex</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>安装和简单的Demo实验</p>\n<ul>\n<li><a href=\"http://avnpc.com/pages/run-background-task-by-php-resque\" target=\"_blank\" rel=\"external\">http://avnpc.com/pages/run-background-task-by-php-resque</a></li>\n<li><a href=\"http://www.zrwm.com/?p=4464\" target=\"_blank\" rel=\"external\">(http://www.zrwm.com/?p=4464)</a></li>\n</ul>\n<p>进一步的介绍</p>\n<ul>\n<li><a href=\"http://blog.hsatac.net/2012/01/php-resque-introduction/\" target=\"_blank\" rel=\"external\">http://blog.hsatac.net/2012/01/php-resque-introduction/</a></li>\n<li><a href=\"http://docs.dotcloud.com/tutorials/php/resque/\" target=\"_blank\" rel=\"external\">http://docs.dotcloud.com/tutorials/php/resque/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11814445/what-is-the-proper-way-to-setup-and-use-php-resque\" target=\"_blank\" rel=\"external\">Best practice</a></li>\n</ul>\n<p>php-resque的扩展：</p>\n<ul>\n<li><a href=\"http://blog.hsatac.net/2012/02/php-resque-auto-scale-workers/\" target=\"_blank\" rel=\"external\">自动根据Job的数量计算需要启动的Worker数</a></li>\n<li><a href=\"https://github.com/ebernhardson/php-resque-pool\" target=\"_blank\" rel=\"external\">PHP Resque Pool</a></li>\n</ul>\n<p>Web Monitor</p>\n<ul>\n<li><a href=\"http://resqueboard.kamisama.me/\" target=\"_blank\" rel=\"external\">ResqueBoard</a></li>\n<li><a href=\"https://github.com/defunkt/resque-web\" target=\"_blank\" rel=\"external\">Resque-web</a></li>\n</ul>\n<p>Bash Monitor</p>\n<ul>\n<li><a href=\"https://github.com/chrisboulton/php-resque/issues/32\" target=\"_blank\" rel=\"external\">Supervisord</a></li>\n<li><a href=\"http://www.54chen.com/_linux_/supervisord-manage-service.html\" target=\"_blank\" rel=\"external\">Supervisord 配置</a></li>\n</ul>\n","categories":[],"tags":["blog","php"]},{"title":"Javascript OOP","url":"https://vincenthou.github.io/2013/12/21/Javascript-OOP/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>随着前端开发的复杂性不断提升，规模逐渐增大，OOP的价值就凸显出来了，在开发nodejs应用时这方面的知识更是必不可少的，这里总结一些自己的认识。</p>\n<h1 id=\"对象创建\"><a href=\"#对象创建\" class=\"headerlink\" title=\"对象创建\"></a>对象创建</h1><p>传统面向对象语言是通过类来实现的，类就像一个模板，你定义好模板的样子，就可以用这个模子压制(new)出来你想要的产品了。javascript是基于原型的，我理解就是依葫芦画瓢，所有对象是基于原型的拷贝（浅拷贝，只是复制值，对于引用类型会有操作同一份数据的问题）。这样的差别造就了javascript对象创建的特殊性。</p>\n<h2 id=\"单例对象\"><a href=\"#单例对象\" class=\"headerlink\" title=\"单例对象\"></a>单例对象</h2><p>最简单的对象创建方法莫过于使用对象字面量了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    name: <span class=\"string\">'vincent'</span>,</div><div class=\"line\">    gender: <span class=\"string\">'male'</span>,</div><div class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样太暴露了，于是有了工厂方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObj</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span>  &#123;</div><div class=\"line\">        name: <span class=\"string\">'vincent'</span>,</div><div class=\"line\">        gender: <span class=\"string\">'male'</span>,</div><div class=\"line\">        say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实这样没有实现隐藏，返回的对象上的属性和方法是完全对外可以访问的，可以使用_name这样的写法来表明该属性是私有的，通过闭包可以有效解决这个问题，这也被称为稳妥的构造函数模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObj</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> name = <span class=\"string\">'vincent'</span>;</div><div class=\"line\">     <span class=\"keyword\">var</span> gender = <span class=\"string\">'male'</span>;</div><div class=\"line\">     <span class=\"keyword\">var</span> sayGender = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'My gender is '</span> + gender);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">var</span> say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;            </div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi, I am'</span> + name);</div><div class=\"line\">            sayGender();</div><div class=\"line\">     &#125;;</div><div class=\"line\">     <span class=\"keyword\">return</span>  &#123;</div><div class=\"line\">        say: say</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>单纯使用构造函数和单纯基于原型都会有问题，最好的方式就是结合两者之所长，在构造函数中添加属性，在构造函数原型上添加多个实例共享的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, gender</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>: Person, //optional</div><div class=\"line\">    say: function() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am '</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们还可以将原型对象的动态添加放在构造函数里面，这样就有了点后端定义类的感觉了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, gender</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'function'</span> === <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.say) &#123;</div><div class=\"line\">        Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am '</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有时候我们需要扩展某个对象，但是又不希望在原来对象的原型上添加，就可以这样来做了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyDate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    date.now = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getTime();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> date;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> MyDate();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(date.now());</div></pre></td></tr></table></figure>\n<p>这种方式有点像是一个工厂方法，我们自定义的方法在每个工厂产生的实例上添加，因为有返回值，使用MyDate的时候new关键字是可选的</p>\n<h1 id=\"对象继承\"><a href=\"#对象继承\" class=\"headerlink\" title=\"对象继承\"></a>对象继承</h1><h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><p>javascript本身没有继承的直接支持，要想实现面向对象思想中继承的特性，就需要些额外的工作了。由于每个对象都会有一个<strong>proto</strong>属性指向自己的原型，而原型链的特性又和作用域链的特性类似（当前scope找不到就向上查找），我们可以通过原型链来模拟简单继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">prop</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.prop = prop;</div><div class=\"line\">&#125;</div><div class=\"line\">Super.prototype.superFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super();</div></pre></td></tr></table></figure>\n<h2 id=\"借用构造方法\"><a href=\"#借用构造方法\" class=\"headerlink\" title=\"借用构造方法\"></a>借用构造方法</h2><p>这样子类实例就会通过原型链查找访问到父类的所有属性和方法，看起来不错，但是原型浅拷贝带来的问题，这样的方法还有待改进。要想实现子类的深拷贝，调用一下父类的构造方法就好了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">prop</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.prop = prop;</div><div class=\"line\">&#125;</div><div class=\"line\">Super.prototype.superFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Super.call(<span class=\"keyword\">this</span>, <span class=\"string\">'hi'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>这样属性倒是深拷贝了，同时也可以很方便控制给父类构造函数传递什么样的参数，但是父类的方法就用不了了，组合的方式是一个不错的解决方案</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">prop</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.prop = prop;</div><div class=\"line\">&#125;</div><div class=\"line\">Super.prototype.superFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Super.call(<span class=\"keyword\">this</span>, <span class=\"string\">'hi'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super();</div></pre></td></tr></table></figure>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>同时照顾到了属性和方法，就像创建对象的构造函数模式一样。这样已经很不错了，不过我们进一步优化，还是能找到问题的。很明显这里Super构造函数被重复调用了两次，一个在子类原型复制时，一个在子类构造函数中。其实我们调用 Sub.prototype = new Super() 的意义在于创建子类关联父类的原型链，父类属性的添加可以通过调用 Super.call(this) 来实现，这就是我们的优化点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">prop</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.prop = prop;</div><div class=\"line\">&#125;</div><div class=\"line\">Super.prototype.superFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Super.call(<span class=\"keyword\">this</span>, <span class=\"string\">'hi'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Sub.prototype = Super.prototype;</div><div class=\"line\">Sub.prototype.constructor = Sub; <span class=\"comment\">//保证构造函数检测正确</span></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> Sub();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(instance.constructor === Sub);</div></pre></td></tr></table></figure>\n<h1 id=\"对象mixin\"><a href=\"#对象mixin\" class=\"headerlink\" title=\"对象mixin\"></a>对象mixin</h1><p>以上继承的实现只能实现单继承，如果我们希望动态的多个属性就需要借用mixin的概念，使用过ruby的开发对这个概念不会感到陌生，mixin比纯粹的继承组织模式要灵活很多，下面是一个简单的实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.extend = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dest, src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> src) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (src.hasOwnProperty(prop)) &#123;</div><div class=\"line\">              dest[prop] = src[prop];</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> dest;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/jquery/jquery/blob/master/src/core.js#L124\" target=\"_blank\" rel=\"external\">jquery的实现</a>，当然jquery为了实现插件的机制，做了一些额外的事情</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://coolshell.cn/articles/6441.html\" target=\"_blank\" rel=\"external\">Javascript 面向对象编程</a></li>\n<li><a href=\"http://www.cnblogs.com/TomXu/archive/2012/02/03/2330295.html\" target=\"_blank\" rel=\"external\">面向对象编程之概论</a></li>\n<li><a href=\"http://www.cnblogs.com/TomXu/archive/2012/02/06/2330609.html\" target=\"_blank\" rel=\"external\">面向对象编程之ECMAScript实现（推荐）</a></li>\n<li><a href=\"http://www.cnblogs.com/JChen666/p/3375894.html\" target=\"_blank\" rel=\"external\">不会JS中的OOP，你也太菜了吧</a></li>\n<li><a href=\"https://github.com/jquery/jquery/blob/master/src/core.js\" target=\"_blank\" rel=\"external\">Jquery core</a></li>\n</ul>\n","categories":[],"tags":["blog","frontend","javascript"]},{"title":"Video Collections","url":"https://vincenthou.github.io/2013/12/21/Video-Collections/","content":"<p><a href=\"http://i.youku.com/u/UOTA5NjUyNDQ=\" target=\"_blank\" rel=\"external\">一些前端技术视频</a><br><a href=\"http://v.youku.com/v_show/id_XMTU3NTM1MjU2.html?f=4262628\" target=\"_blank\" rel=\"external\">前端架构</a><br><a href=\"http://study.163.com/plan/planIntroduction.htm?id=425569&amp;6925ecaa9614a750=note_open&amp;9e3293b42e2dee26=hnkfhjj@126.com#/planDetail\" target=\"_blank\" rel=\"external\">设计师的自我修炼</a><br><a href=\"http://study.163.com/find.htm#/find/search?p=illustrator\" target=\"_blank\" rel=\"external\">Illustrator</a><br><a href=\"http://study.163.com/find.htm#/find/search?p=Photoshop\" target=\"_blank\" rel=\"external\">Photoshop</a><br><a href=\"http://study.163.com/find.htm#/find/search?p=after%20effects\" target=\"_blank\" rel=\"external\">After Effects</a></p>\n","categories":[],"tags":["collection"]},{"title":"Good Frameworks","url":"https://vincenthou.github.io/2013/12/21/Good-Frameworks/","content":"<h1 id=\"Realtime\"><a href=\"#Realtime\" class=\"headerlink\" title=\"Realtime\"></a>Realtime</h1><ul>\n<li><a href=\"https://www.meteor.com/main\" target=\"_blank\" rel=\"external\">Meteor</a>  realtime JS framework (front and end)</li>\n<li><a href=\"https://github.com/brandnewera/clouda\" target=\"_blank\" rel=\"external\">Clouda</a>  Baidu JS framework (front and end)</li>\n<li><a href=\"http://blog.csdn.net/justfrozen/article/details/12716669\" target=\"_blank\" rel=\"external\">实时框架对比</a><h1 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h1></li>\n<li><a href=\"http://calebevans.me/projects/jcanvas/\" target=\"_blank\" rel=\"external\">Jcanvas</a></li>\n<li><a href=\"http://kineticjs.com/\" target=\"_blank\" rel=\"external\">Kineticjs</a></li>\n<li><a href=\"http://www.createjs.com/#!/EaselJS\" target=\"_blank\" rel=\"external\">EaselJS</a><h1 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h1></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2014/01/snap-svg-study-demo-docs/\" target=\"_blank\" rel=\"external\">Snap.svg</a></li>\n<li><a href=\"http://bonsaijs.org/\" target=\"_blank\" rel=\"external\">Bonsaijs</a></li>\n<li><a href=\"http://raphaeljs.com/\" target=\"_blank\" rel=\"external\">Raphaeljs</a></li>\n<li><a href=\"http://www.svgjs.com/\" target=\"_blank\" rel=\"external\">SVGJS</a><h1 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h1></li>\n<li><a href=\"http://scenejs.org/\" target=\"_blank\" rel=\"external\">Scenejs</a></li>\n<li><a href=\"http://threejs.org/\" target=\"_blank\" rel=\"external\">Threejs</a><h1 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h1></li>\n<li><a href=\"http://developer.51cto.com/art/201111/301460.htm\" target=\"_blank\" rel=\"external\">10个HTML5/CSS3框架</a><h1 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h1></li>\n<li><a href=\"http://www.sinatrarb.com/intro\" target=\"_blank\" rel=\"external\">Sinatra</a> light weight MVC web framework<h1 id=\"Open-Source-Platform\"><a href=\"#Open-Source-Platform\" class=\"headerlink\" title=\"Open Source Platform\"></a>Open Source Platform</h1></li>\n<li><a href=\"http://oss.baidu.com/\" target=\"_blank\" rel=\"external\">百度开源平台</a></li>\n<li><a href=\"https://github.com/alibaba\" target=\"_blank\" rel=\"external\">阿里开源项目</a></li>\n<li><a href=\"http://tencentopen.github.io/\" target=\"_blank\" rel=\"external\">腾讯开源项目</a></li>\n</ul>\n","categories":[],"tags":["collection"]},{"title":"Projects","url":"https://vincenthou.github.io/2013/12/21/Projects/","content":"<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Day1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Sunny\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sour\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"imgs\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"http://attach.bbs.miui.com/forum/201302/27/231712nzs6bezpzugpbm81.jpg\"</span>,</div><div class=\"line\">           <span class=\"string\">\"http://tomcat.apache.org/images/tomcat.png\"</span>,</div><div class=\"line\">           <span class=\"string\">\"http://www.mysql.com/common/logos/logo-mysql-110x57.png\"</span>,</div><div class=\"line\">           <span class=\"string\">\"http://imgt2.bdstatic.com/it/u=679680694,213056410&amp;fm=21&amp;gp=0.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://imgt1.bdstatic.com/it/u=302501857,520630368&amp;fm=21&amp;gp=0.jpg\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"number\">1393987721705</span>,</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"http://www.baidu.com\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Day2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Rainy\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sour\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"imgs\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"http://imgt0.bdstatic.com/it/u=69557201,4053963805&amp;fm=23&amp;gp=0.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://imgt4.bdstatic.com/it/u=131330376,402779626&amp;fm=23&amp;gp=0.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://requirejs.org/i/logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://zeptojs.com/logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcSaTN0UR1zFqTPQM1sOjCdws7YjtIJUKMax_CaR3xFFaM_9CcRQ\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"number\">1393987721715</span>,</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"http://chanyouji.com/\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Day3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"Sunny\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sour\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"imgs\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"http://static.yiiframework.com/css/img/logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://www.apache.org/images/feather-small.gif\"</span>,</div><div class=\"line\">           <span class=\"string\">\"http://www.mysql.com/common/logos/logo-mysql-110x57.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://requirejs.org/i/logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://imgt2.bdstatic.com/it/u=679680694,213056410&amp;fm=21&amp;gp=0.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://jqueryui.com/jquery-wp-content/themes/jquery/images/logo-jquery-ui.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://qunitjs.com/jquery-wp-content/themes/jquery/images/logo-qunit.png\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"number\">1393987721815</span>,</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"http://chanyouji.com/\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Day4\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"desc\"</span>: <span class=\"string\">\"windy\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sour\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"imgs\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"https://www.ruby-lang.org/images/header-ruby-logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://datamapper.org/images/logo.gif\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://www.postgresql.org/media/img/layout/hdr_left.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://lesscss.org/public/img/logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://pic002.cnblogs.com/images/2012/36987/2012091110020066.jpg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://requirejs.org/i/logo.png\"</span>,</div><div class=\"line\">            <span class=\"string\">\"http://jquery.com/jquery-wp-content/themes/jquery/images/logo-jquery.png\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"number\">1393987721732</span>,</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"http://www.intalio.com/products/create/intaliocreate/\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n","categories":[],"tags":["meta"]},{"title":"javascript 编码规范","url":"https://vincenthou.github.io/2013/12/16/javascript-编码规范/","content":"<h1 id=\"Javascript编码规范\"><a href=\"#Javascript编码规范\" class=\"headerlink\" title=\"Javascript编码规范\"></a>Javascript编码规范</h1><h2 id=\"文件组织\"><a href=\"#文件组织\" class=\"headerlink\" title=\"文件组织\"></a>文件组织</h2><ul>\n<li>所有的javascript文件都要放在项目公共的’’’script’’’文件夹下</li>\n<li>使用的第三方库文件放置在’’’script/lib’’’文件夹下</li>\n<li>可以复用的自定义模块放置在’’’script/commons’’’夹下,复用模块如果涉及多个子文件，需要单独建立模块文件夹</li>\n<li>单独页面模块使用的javascript文件放置在’’’script/{module_name}’’’文件夹下</li>\n<li>项目模拟的json数据放置在’’’script/json’’’文件夹下，按照页面单独建立子文件夹</li>\n<li>javascript应用MVC框架时，使用的模板文件放置在’’’script/templates’’’文件夹下，按照页面单独建立子文件夹<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2></li>\n<li>通用原则可以参考[PhpGuideline PHP编码规范]</li>\n<li>始终使用var定义变量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">''</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>始终使用分号结束一行声明语句</li>\n<li>对于数组和对象不要使用多余的”,”（兼容IE）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,];</div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name: <span class=\"string\">'name'</span>,</div><div class=\"line\">    age: <span class=\"number\">20</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name: <span class=\"string\">'name'</span>,</div><div class=\"line\">    age: <span class=\"number\">20</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义顶级命名空间如inBike,在顶级命名空间下自定义私有命名空间，根据模块分级</li>\n<li>所有的模块代码放在匿名自调用函数中，通过给window对象下的自定义命名空间赋值暴露出来</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.inBike) &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.inBike = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.inBike.rideway = rideway;</div></pre></td></tr></table></figure>\n<ul>\n<li>绑定事件代码需要放置在dom ready函数中执行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"comment\">//bind function is in the init function</span></div><div class=\"line\">     <span class=\"built_in\">window</span>.inBike.rideway.init();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>将自定义模块方法放置在对象中，方法名紧挨“:”，“:”与function之间空一格，function()与后面的“{”之间空一格</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用单引号包裹字符串</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'some text'</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>所用的变量使用之前需要定义，定义之后立即初始化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"><span class=\"keyword\">var</span> isEmpty = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用浏览器console工具之前先要判断是否支持</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">console</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is my log'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><ul>\n<li>通用原则可以参考[PhpGuideline PHP编码规范]</li>\n<li>使用驼峰法命名变量和方法名，首字母使用小写,对于类名首字母大写</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numberList = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> util = &#123;</div><div class=\"line\">    removeNode: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用$name命名jquery对象，原生dom元素使用dom开头,对象中私有变量以下划线开头</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $image = $(<span class=\"string\">'#cover'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> domImage = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'cover'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    _privateVar: <span class=\"literal\">null</span>,</div><div class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>通用原则可以参考[PhpGuideline PHP编码规范]</li>\n<li>多使用单行注释表明逻辑块的意义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Handle the case where IE and Opera return items</span></div><div class=\"line\"><span class=\"comment\">// by name instead of ID</span></div><div class=\"line\"><span class=\"keyword\">if</span> ( elem.id !== match[<span class=\"number\">2</span>] ) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> rootjQuery.find( selector );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Otherwise, we inject the element directly into the jQuery object</span></div><div class=\"line\"><span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = elem;</div></pre></td></tr></table></figure>\n<ul>\n<li>指明类的构造方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * @constructor</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">some.long.namespace.MyClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>标注枚举常量的类型和意义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** @enum &#123;string&#125; */</span></div><div class=\"line\">some.long.namespace.Fruit = &#123;</div><div class=\"line\">  APPLE: <span class=\"string\">'a'</span>,</div><div class=\"line\">  BANANA: <span class=\"string\">'b'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用注释标识方法或者变量的可见性，方便静态检查</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** @protected */</span></div><div class=\"line\">AA_PublicClass.staticProtectedProp = <span class=\"number\">31</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** @private */</span></div><div class=\"line\">AA_PublicClass.prototype.privateMethod_ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>避免使用eval</li>\n<li>对于对象避免使用with，对于数组避免使用for-in</li>\n<li>谨慎使用闭包，避免循环引用</li>\n<li>警惕this所处的上下文</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $button = $(<span class=\"string\">'#my-button'</span>);</div><div class=\"line\">$button.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> util = &#123;</div><div class=\"line\">       getVal: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> self.val();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>尽量使用短码，比如三目运算符，逻辑开关，自增运算等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = (<span class=\"string\">'undefined'</span> == <span class=\"keyword\">typeof</span>(name)) ? <span class=\"string\">''</span> : name;</div><div class=\"line\">(age &lt; <span class=\"number\">0</span>) &amp;&amp; (age = <span class=\"number\">0</span>);</div><div class=\"line\">count++;</div></pre></td></tr></table></figure>\n<ul>\n<li>不要在块级作用域中使用function</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"keyword\">if</span> (x) &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"keyword\">if</span> (x) &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>在父节点上绑定事件监听，根据事件源分别响应</li>\n<li><p>对于复杂的页面模块使用依赖管理库如<a href=\"http://seajs.org/\" target=\"_blank\" rel=\"external\">SeaJS</a>, <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"external\">RequireJS</a>, MVC框架<a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"external\">Backbone</a>, <a href=\"http://knockoutjs.com/\" target=\"_blank\" rel=\"external\">Knockout</a>, <a href=\"http://hay.github.com/stapes/\" target=\"_blank\" rel=\"external\">Stapes</a>组织你的代码</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" target=\"_blank\" rel=\"external\">Google Javascript Coding Style</a><br><a href=\"http://javascript.crockford.com/code.html\" target=\"_blank\" rel=\"external\">Javascript Coding Conventions</a><br><a href=\"http://drupal.org/node/172169\" target=\"_blank\" rel=\"external\">Drupal JavaScript Coding Standards</a><br><a href=\"http://nodeguide.com/style.html\" target=\"_blank\" rel=\"external\">Node Coding Style</a></p>\n</li>\n</ul>\n","categories":[],"tags":["blog","frontend","javascript"]},{"title":"php 编码规范","url":"https://vincenthou.github.io/2013/12/16/php-编码规范/","content":"<h1 id=\"PHP编码规范\"><a href=\"#PHP编码规范\" class=\"headerlink\" title=\"PHP编码规范\"></a>PHP编码规范</h1><h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><ul>\n<li>简洁，清晰，一致[[BR]]</li>\n<li>健壮[[BR]]</li>\n<li>注意细节[[BR]]</li>\n<li>第一次将事情做好[[BR]]<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2></li>\n<li>使用UTF-8作为文件编码格式</li>\n<li>使用空格代替Tab</li>\n<li>运算符两端分别留一个空格</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\">$foo=$bar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\">$foo = $bar;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用空行分隔逻辑代码块</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//get request parameters</span></div><div class=\"line\">$keyword =  Yii::app()-&gt;request-&gt;getQuery(<span class=\"string\">'keyword'</span>);</div><div class=\"line\">$pageSize =  Yii::app()-&gt;request-&gt;getQuery(<span class=\"string\">'pageSize'</span>);</div><div class=\"line\">Yii::log(<span class=\"string\">'request: keyword-&gt;'</span> . $keyword . <span class=\"string\">' pageSize-&gt;'</span> . $pageSize, <span class=\"string\">'debug'</span>, <span class=\"string\">'system.trip.getSystemTags'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//get data from backend</span></div><div class=\"line\">$curl = <span class=\"keyword\">new</span> Curl();</div><div class=\"line\">$result = $curl-&gt;get(<span class=\"string\">'/tag/list'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'keyword'</span>=&gt;urlencode($keyword), <span class=\"string\">'pageSize'</span>=&gt;$pageSize));</div><div class=\"line\"><span class=\"keyword\">echo</span> $result;</div></pre></td></tr></table></figure>\n<ul>\n<li>逻辑代码块哪怕只有一行也要用{}包裹起来，关键字与条件的左括号之间要空一格</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (...)</div><div class=\"line\">&#123;</div><div class=\"line\">    bar();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>switch语句的每一个case都要以break结束，并且有一个default的声明（同样以break结束）</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span> (condition)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        action1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        action A...;</div><div class=\"line\">        action B...;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">default</span> action;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>流程控制的不同部分，新行要以关键字开始而不是“{”</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e)</div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>函数名与参数列表之间不留空格，不同的参数在“,”之后留一个空格（同样适用于数组）</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update_records</span> <span class=\"params\">($table,$parameters,$conditions)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update_records</span><span class=\"params\">($table, $parameters, $conditions)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\">$some_array = <span class=\"keyword\">array</span> (<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>,<span class=\"string\">'foo'</span>=&gt;<span class=\"string\">'bar'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\">$some_array = <span class=\"keyword\">array</span>(<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'foo'</span> =&gt; <span class=\"string\">'bar'</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>不依赖默认的操作符优先级，使用()明确表示出运算的优先级</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"keyword\">if</span>($row[<span class=\"string\">\"col_a\"</span>] == <span class=\"number\">3</span> &amp;&amp; $row[<span class=\"string\">\"col_b\"</span>] == <span class=\"number\">1</span>)</div><div class=\"line\">&#123;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"keyword\">if</span>((<span class=\"number\">3</span> == $row[<span class=\"string\">'col_a'</span>]) &amp;&amp; (<span class=\"number\">1</span> == $row[<span class=\"string\">'col_b'</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>普通字符串使用单引号包裹，避免使用双引号</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\">$str = <span class=\"string\">\"Hello world\"</span>;</div><div class=\"line\">$jointStr = <span class=\"string\">\"Hello world $str\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\">$str = <span class=\"string\">'Hello world'</span>;</div><div class=\"line\">$jointStr = <span class=\"string\">'Hello world'</span> . $str;</div></pre></td></tr></table></figure>\n<ul>\n<li>类中的方法和变量的访问权限使用public、protected、private关键字显示标识</li>\n<li>进行类型转换时，使用括号将目标类型包裹起来，并与变量之间留一个空格</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(int) $mynumber</div></pre></td></tr></table></figure>\n<ul>\n<li>过长的控制条件，差分成若干变量，计算出变量结果后再进行逻辑组合判断</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Key is only valid if it matches the current user's ID, as otherwise other</span></div><div class=\"line\"><span class=\"comment\">// users could access any user's things.</span></div><div class=\"line\">$is_valid_user = (<span class=\"keyword\">isset</span>($key) &amp;&amp; !<span class=\"keyword\">empty</span>($user-&gt;uid) &amp;&amp; $key == $user-&gt;uid);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// IP must match the cache to prevent session spoofing.</span></div><div class=\"line\">$is_valid_cache = (<span class=\"keyword\">isset</span>($user-&gt;cache) ? $user-&gt;cache == ip_address() : <span class=\"keyword\">FALSE</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Alternatively, if the request query parameter is in the future, then it</span></div><div class=\"line\"><span class=\"comment\">// is always valid, because the galaxy will implode and collapse anyway.</span></div><div class=\"line\">$is_valid_query = $is_valid_cache || (<span class=\"keyword\">isset</span>($value) &amp;&amp; $value &gt;= time());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ($is_valid_user || $is_valid_query)</div><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><ul>\n<li>使用NULL初始化空字符串</li>\n<li><p>文件名和类名首字母大写，使用驼峰命名法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**Example:** Circle, FilledCircled, ShadedFilledCircle</div></pre></td></tr></table></figure>\n</li>\n<li><p>全局方法使用小写字母命名使用“_”分隔 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**Example:** is_valid(), get_script_name()</div></pre></td></tr></table></figure>\n</li>\n<li><p>类方法使用驼峰命名法，动宾结构，首字母小写 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**Example:** draw(), drawLine(), getName()</div></pre></td></tr></table></figure>\n</li>\n<li><p>普通变量和类成员变量使用驼峰命名法，首字母小写，私有成员以_开头 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**Example:** $currentTime，$_privateVal</div></pre></td></tr></table></figure>\n</li>\n<li><p>常量全部使用大写字母命名，以“_”分隔 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**Example:** PI, MAX_BUFFER_SIZE</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>使用empty标识空执行</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (condition)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//empty!</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>文件开头书写注释标识作者、网站主页、版权信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * CBooleanValidator class file.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Qiang Xue &lt;qiang.xue<span class=\"doctag\">@gmail</span>.com&gt;</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@link</span> http://www.yiiframework.com/</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@copyright</span> Copyright &amp;copy; 2008-2011 Yii Software LLC</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@license</span> http://www.yiiframework.com/license/</span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure>\n<ul>\n<li>类定义上方书写注释阐述类的应用场景、作者、版本号、所属的包名称</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * CDefaultValueValidator sets the attributes with the specified value.</span></div><div class=\"line\"><span class=\"comment\"> * It does not do validation. Its existence is mainly to allow</span></div><div class=\"line\"><span class=\"comment\"> * specifying attribute default values in a dynamic way.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Qiang Xue &lt;qiang.xue<span class=\"doctag\">@gmail</span>.com&gt;</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 0.1</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> system.validators</span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure>\n<ul>\n<li>类成员变量上方书写注释阐述变量的类型、意义、默认值等信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> boolean whether to set the default value only when the attribute value is null or empty string.</span></div><div class=\"line\"><span class=\"comment\"> * Defaults to true. If false, the attribute will always be assigned with the default value,</span></div><div class=\"line\"><span class=\"comment\"> * even if it is already explicitly assigned a value.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义方法上方书写注释阐述方法的用途，使用@param详述参数的信息（包括参数类型以及意义），使用@return详述返回值的信息，如果有异常抛出使用@throws注解</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Returns the JavaScript needed for performing client-side validation.</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> CModel $object the data object being validated</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $attribute the name of the attribute to be validated.</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string the client-side validation script.</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> CActiveForm::enableClientValidation</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.1.7</span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure>\n<ul>\n<li>对于实现较为复杂的代码，以空行分隔逻辑块的同时，使用单行注释解释逻辑块的作用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Put table and key name in variables for easier reading</span></div><div class=\"line\">$refTable=$fkEntry[<span class=\"number\">0</span>]; <span class=\"comment\">// Table name that current fk references to</span></div><div class=\"line\">$refKey=$fkEntry[<span class=\"number\">1</span>];   <span class=\"comment\">// Key in that table being referenced</span></div><div class=\"line\">$refClassName=<span class=\"keyword\">$this</span>-&gt;generateClassName($refTable);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Add relation for this table</span></div><div class=\"line\">$relationName=<span class=\"keyword\">$this</span>-&gt;generateRelationName($tableName, $fkName, <span class=\"keyword\">false</span>);</div><div class=\"line\">$relations[$className][$relationName]=<span class=\"string\">\"array(self::BELONGS_TO, '$refClassName', '$fkName')\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>对于尚未完成的工作使用单行注释 TODO 标注 <h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2></li>\n<li>谨慎使用’echo’, ‘print’, ‘prin_r’和’die’,确保你真的需要它们</li>\n<li>避免使用魔法数，所用的常量使用const定义，所有字母大写以“_”分隔</li>\n<li>Controller中主要完成获取用户输入，从model层获取数据，选择页面渲染的工作<ul>\n<li>HTML和数据字段名不能写在其中，而应该写在view中</li>\n<li>SQL不能写在其中，而应该写在model中，提供方法给controller调用 </li>\n</ul>\n</li>\n<li>所有的controller不能直接继承CController，而是需要自定义一个controller来继承CController，所有其他添加的controller均继承该controller</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Controller is the customized base controller class.</span></div><div class=\"line\"><span class=\"comment\"> * All controller classes for this application should extend from this base class.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span> <span class=\"keyword\">extends</span> <span class=\"title\">CController</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string the default layout for the controller view. Defaults to '//layouts/column1',</span></div><div class=\"line\"><span class=\"comment\">     * meaning using a single column layout. See 'protected/views/layouts/column1.php'.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> $layout=<span class=\"string\">'//layouts/main'</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array context menu items. This property will be assigned to &#123;<span class=\"doctag\">@link</span> CMenu::items&#125;.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> $menu=<span class=\"keyword\">array</span>();</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array the breadcrumbs of the current page. The value of this property will</span></div><div class=\"line\"><span class=\"comment\">     * be assigned to &#123;<span class=\"doctag\">@link</span> CBreadcrumbs::links&#125;. Please refer to &#123;<span class=\"doctag\">@link</span> CBreadcrumbs::links&#125;</span></div><div class=\"line\"><span class=\"comment\">     * for more details on how to specify this property.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> $breadcrumbs=<span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAction</span><span class=\"params\">($action)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>View中主要存放HTML代码，从controller获取数据进行渲染，包含尽量少的逻辑代码<ul>\n<li>收集用户输入（例如 $_GET 和 $_POST）不能写在其中，而应该写在controller中</li>\n<li>SQL不能写在其中，而应该写在model中，提供方法给controller调用<br>模板中的控制语句使用标识性语句而非括号</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//wrong</span></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($item)) &#123; <span class=\"meta\">?&gt;</span></div><div class=\"line\">  &lt;p&gt;<span class=\"meta\">&lt;?php</span> <span class=\"keyword\">print</span> $item; <span class=\"meta\">?&gt;</span>&lt;/p&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span> &#125; <span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">foreach</span> ($items <span class=\"keyword\">as</span> $item) &#123; <span class=\"meta\">?&gt;</span></div><div class=\"line\">  &lt;p&gt;<span class=\"meta\">&lt;?php</span> <span class=\"keyword\">print</span> $item; <span class=\"meta\">?&gt;</span>&lt;/p&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span> &#125; <span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($item)): <span class=\"meta\">?&gt;</span></div><div class=\"line\">  &lt;p&gt;<span class=\"meta\">&lt;?php</span> <span class=\"keyword\">print</span> $item; <span class=\"meta\">?&gt;</span>&lt;/p&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">foreach</span> ($items <span class=\"keyword\">as</span> $item): <span class=\"meta\">?&gt;</span></div><div class=\"line\">  &lt;p&gt;<span class=\"meta\">&lt;?php</span> <span class=\"keyword\">print</span> $item; <span class=\"meta\">?&gt;</span>&lt;/p&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endforeach</span>; <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>数据库表名和字段名使用小写字母，以_分隔多个单词，使用前缀名区分一个数据库下相同表名 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**Example:** product_order</div></pre></td></tr></table></figure>\n</li>\n<li><p>Model中主要负责对于数据库的访问，为controller提供数据接口</p>\n<ul>\n<li>HTML不应该写在其中，而应该写在view中 </li>\n</ul>\n</li>\n<li>对于简单重复数据库操作；使用AR进行查询，当涉及到多表关联，复杂操作或者性能敏感时使用SQL查询；如果只是进行查询操作，并且兼顾易用性和性能可以使用Query Builder</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//AR save</span></div><div class=\"line\">$post=<span class=\"keyword\">new</span> Post;</div><div class=\"line\">$post-&gt;title=<span class=\"string\">'sample post'</span>;</div><div class=\"line\">$post-&gt;content=<span class=\"string\">'post body content'</span>;</div><div class=\"line\">$post-&gt;save();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//SQL query</span></div><div class=\"line\">$sql=<span class=\"string\">\"SELECT username, email FROM tbl_user\"</span>;</div><div class=\"line\">$connection = Yii::app()-&gt;db;   <span class=\"comment\">// 假设你已经建立了一个 \"db\" 连接</span></div><div class=\"line\"><span class=\"comment\">// 如果没有，你可能需要显式建立一个连接：</span></div><div class=\"line\"><span class=\"comment\">// $connection =n ew CDbConnection($dsn,$username,$password);</span></div><div class=\"line\">$command = $connection-&gt;createCommand($sql);</div><div class=\"line\"><span class=\"comment\">// 如果需要，此 SQL 语句可通过如下方式修改：</span></div><div class=\"line\"><span class=\"comment\">// $command-&gt;text=$newSQL;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Query Builder</span></div><div class=\"line\">$user = Yii::app()-&gt;db-&gt;createCommand()</div><div class=\"line\">    -&gt;select(<span class=\"string\">'id, username, profile'</span>)</div><div class=\"line\">    -&gt;from(<span class=\"string\">'tbl_user u'</span>)</div><div class=\"line\">    -&gt;join(<span class=\"string\">'tbl_profile p'</span>, <span class=\"string\">'u.id=p.user_id'</span>)</div><div class=\"line\">    -&gt;where(<span class=\"string\">'id=:id'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">':id'</span>=&gt;$id))</div><div class=\"line\">    -&gt;queryRow();</div></pre></td></tr></table></figure>\n<ul>\n<li>对于log信息分级，并且明确指定所属的分类名称。调试信息使用trace，产品级信息根据价值程度选择特定的级别，具体可参考[<a href=\"http://www.yiiframework.com/doc/guide/1.1/en/topics.logging\" target=\"_blank\" rel=\"external\">http://www.yiiframework.com/doc/guide/1.1/en/topics.logging</a> Logging Topic]</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Yii::log(<span class=\"string\">'request group list: '</span> .$groupList , <span class=\"string\">'trace'</span>, <span class=\"string\">'system.group.search'</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>对于可复用的页面组件或者较为复杂的页面成分，应该抽离出widget，拥有自己独立的view，具体可参考<ul>\n<li>[<a href=\"http://www.yiiframework.com/wiki/23/how-to-create-a-breadcrumb-widget\" target=\"_blank\" rel=\"external\">http://www.yiiframework.com/wiki/23/how-to-create-a-breadcrumb-widget</a> Simple Example]</li>\n<li>[<a href=\"http://www.yiiframework.com/doc/guide/1.1/en/basics.view#widget\" target=\"_blank\" rel=\"external\">http://www.yiiframework.com/doc/guide/1.1/en/basics.view#widget</a> Widget View]</li>\n</ul>\n</li>\n<li>抛出的异常要明确到某个特定的类型，所有抛出异常的部分使用catch分类捕获，根据具体情况能够处理的直接处理，不能处理的继续抛出</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span>(AppException $e)</div><div class=\"line\">&#123;</div><div class=\"line\">    ErrorHandler::handleDefaultError($e);</div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;render(<span class=\"string\">'search'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'filterParams'</span>=&gt;$filterParams));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span>(SystemException $e)</div><div class=\"line\">&#123;</div><div class=\"line\">    ErrorHandler::handleDefaultError($e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>由于PHP暂时不支持finally，在异常被捕获之后，或者异常处理结束之后的控制流程中清理资源（例如数据库连接等）</li>\n<li>异常捕获后不能阻塞程序的正常执行，或者容错处理，或者跳转到错误页面</li>\n<li>对异常进行合理的分层，例如不要将SQLException放置到非数据处理层，而出现在业务逻辑层 <h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2></li>\n</ul>\n<p><a href=\"https://drupal.org/coding-standards#helpermod\" target=\"_blank\" rel=\"external\">Drupal Coding Standards</a><br><a href=\"http://www.yiiframework.com/wiki/102/code-style/\" target=\"_blank\" rel=\"external\">Yii Code Style</a><br><a href=\"http://vadimg.com/2009/07/yii-php-coding-standards-draft/\" target=\"_blank\" rel=\"external\">Yii Code Standard</a><br><a href=\"http://www.yiiframework.com/doc/guide/1.1/en/basics.convention\" target=\"_blank\" rel=\"external\">Yii Conventions</a><br><a href=\"http://framework.zend.com/manual/1.12/en/coding-standard.html\" target=\"_blank\" rel=\"external\">Zend Framework Coding Standards</a><br><a href=\"http://pear.php.net/manual/en/standards.php\" target=\"_blank\" rel=\"external\">PHP Coding Standards</a></p>\n","categories":[],"tags":["blog","php"]},{"title":"Css && Html 编码规范","url":"https://vincenthou.github.io/2013/12/16/Css-Html-编码规范/","content":"<h1 id=\"Css-amp-amp-Html-Code-GuideLine\"><a href=\"#Css-amp-amp-Html-Code-GuideLine\" class=\"headerlink\" title=\"Css &amp;&amp; Html Code GuideLine\"></a>Css &amp;&amp; Html Code GuideLine</h1><p><strong>基于以前项目的css书写不规范导致的浏览器兼容问题和多人协作混乱问题，特此制定Css &amp;&amp; Html Code GuideLine，所有参与项目css文件编写的成员请务必参看</strong></p>\n<p><strong>注解：</strong>此GuideLine基于douban和google网上公开的规范，并且加入了一些适用于多人协作的内容整理而成，项目整体css编码风格和思想借鉴了twitter’s bootstrap框架,适用但不局限于IN-BIKE项目</p>\n<ol>\n<li>项目必须有library,即静态示范页，里面包括了项目里所有可能用到的的html结构和css，library应与实际项目最终输出的html保持一致，并作为bug重现/修复参考，如有bug，先看library和当前项目有无冲突，再联系相关人员。</li>\n<li>Library负责人管理HTML结构搭建和基础CSS组建，当开发人员发现自己的页面/模块最终输出与Library不一致时，请与此负责人联系。</li>\n<li>全局CSS文件global.css、reset.css、username.css文件都位于css文件夹根目录，严禁另外创建文件夹存放css文件（防止目录混乱）</li>\n<li>如需使用插件，css文件请存放在lib/pluginname/css,与站点css分开放置</li>\n<li>global.css中包含的是整站的基础模块，由一人撰写和维护（library.html 和 global.css）,其他开发人员禁止修改这两个文件，建议通过svn权限进行控制</li>\n<li>所有参与写样式的开发人员都需要在css文件夹根目录中添加一个以自己英文名命名的css文件，并且联系global.css负责人将其Import进 global.css，<br>当涉及到global没有提供且与自己相关的页面/模块，就将CSS样式写在其中，但是要注意使用mod写法不要影响到他人的模块,如果是公有的，请联系负责人在global.css中添加(@import只是针对多人协作的临时方式，上线时会merge公共部分，其余会按需加载)；</li>\n<li>所有CSS样式至少兼容浏览器IE7+,Opera,firefox3.0+,Safir,Chrome，原则是渐进增强平稳退化，即标准浏览器实现完整交互和视觉效果，非标准浏览器至少保留基本功能</li>\n<li>使用html5 doctype (&lt;!DOCTYPE html&gt; <html lang=\"en\"> … </html>)</li>\n<li>reset.css文件使用yahoo YUI reset</li>\n<li>所有css命名均使用中划线</li>\n<li>css属性推荐使用一行式写法，便于查找，这也是google和douban推荐的写法（不习惯的同学也可以暂时选择多行式写法）</li>\n<li>全局不允许使用通配符 *；</li>\n<li>为防止兼容混乱，暂时不推荐使用css3的选择器，如子选择器&gt;,:firstchild,nth-child,last-child,属性选择器[type=”xxx”]等</li>\n<li>遵循模块化思想，模块命名遵循以下结构:</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.xxx-module</span> <span class=\"selector-class\">.ooo</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</div><div class=\"line\"><span class=\"selector-class\">.bread-module</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</div><div class=\"line\">.bread-module .hd&#123;&#125;//hd代表head</div><div class=\"line\"><span class=\"selector-class\">.bread-module</span> <span class=\"selector-class\">.hd</span> <span class=\"selector-class\">.operate</span>&#123;&#125;</div><div class=\"line\">.bread-module .bd&#123;&#125;//bd代表body</div><div class=\"line\">.bread-module .ft&#123;&#125;//ft代表foot</div></pre></td></tr></table></figure>\n<ol>\n<li>以下几个css属性慎用，经测试，会导致页面性能下降<br>position:fixed<br>background-position: fixed<br>border-radius<br>background-size<br>box-shadow<br>gradient</li>\n<li>每个模块前加注释，格式 /* modulename */</li>\n<li>清除浮动使用clearfix,避免使用多余标签</li>\n<li>严禁使用css表达式（css expression)</li>\n<li>因需求变动等各种原因导致的无用的css内容/文件请及时删除</li>\n<li>tips:<br>另外给出几个常用的css命名及解释</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.hd // header</div><div class=\"line\">.bd // body</div><div class=\"line\">.ft // foot</div><div class=\"line\">.operate // 用在编辑和操作</div><div class=\"line\">.pic //图片包裹</div><div class=\"line\">.info // 内容</div><div class=\"line\">.nav //导航</div><div class=\"line\">.active //激活项（用于选项卡，面包屑，其他高亮栏目）</div><div class=\"line\">.tab //选项卡</div></pre></td></tr></table></figure>\n<p>不允许如下样式出现</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tips&#123;xxx:ooo;&#125; //错误示例,污染全局</div><div class=\"line\">*&#123;xxx:ooo;&#125;//错误示例，全局禁用通配符</div></pre></td></tr></table></figure>\n","categories":[],"tags":["blog","frontend"]},{"title":"Yii框架快速上手","url":"https://vincenthou.github.io/2013/12/13/Yii框架快速上手/","content":"<p><a href=\"http://www.yiichina.com/tour/\" target=\"_blank\" rel=\"external\">开发向导</a><br><a href=\"http://blog.163.com/ydmx_lei/blog/static/77053405201252021631993/\" target=\"_blank\" rel=\"external\">快速上手</a></p>\n","categories":[],"tags":["blog","php"]},{"title":"前端包管理工具Bower","url":"https://vincenthou.github.io/2013/12/12/前端包管理工具Bower/","content":"<p><img src=\"http://bower.jsbin.cn/img/bower-logo.png\" alt=\"image\"><br><a href=\"http://bower.io/\" target=\"_blank\" rel=\"external\">Bower</a> 是 twitter 推出的一款包管理工具。我们平时开发过程中不可能所有的功能都是我们白手起家实现的，有一些功能已经有了成熟的解决方案，那就是拿来主义了。作为后端开发来讲，ruby有gem，nodejs有npm，python有pip，java有maven。我们在前端开发时需要一些常用的框架和工具库，例如jqeury,  jquery-ui, underscore,  backbone等等。想想每次我们需要添加这些库的时候是怎么做的吧。</p>\n<p>现在你不需要在四处寻找某个版本的文件，下载并且拷贝到本地了，只需要一条命令就可以搞定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install jquery</div></pre></td></tr></table></figure>\n<h1 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h1><p>首先确保你已经安装了nodejs和npm包管理工具，最好你的机器上也安装了Git，有些bower以来的包需要通过她来下载安装，在bash中执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g bower</div></pre></td></tr></table></figure>\n<p>这样就OK了，详细的命令可以查看bower help</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage:</div><div class=\"line\"></div><div class=\"line\">    bower &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</div><div class=\"line\"></div><div class=\"line\">Commands:</div><div class=\"line\"></div><div class=\"line\">    cache                   Manage bower cache</div><div class=\"line\">    <span class=\"built_in\">help</span>                    Display <span class=\"built_in\">help</span> information about Bower</div><div class=\"line\">    home                    Opens a package homepage into your favorite browser</div><div class=\"line\">    info                    Info of a particular package</div><div class=\"line\">    init                    Interactively create a bower.json file</div><div class=\"line\">    install                 Install a package locally</div><div class=\"line\">    link                    Symlink a package folder</div><div class=\"line\">    list                    List <span class=\"built_in\">local</span> packages</div><div class=\"line\">    lookup                  Look up a package URL by name</div><div class=\"line\">    prune                   Removes <span class=\"built_in\">local</span> extraneous packages</div><div class=\"line\">    register                Register a package</div><div class=\"line\">    search                  Search <span class=\"keyword\">for</span> a package by name</div><div class=\"line\">    update                  Update a <span class=\"built_in\">local</span> package</div><div class=\"line\">    uninstall               Remove a <span class=\"built_in\">local</span> package</div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\"></div><div class=\"line\">    -f, --force             Makes various commands more forceful</div><div class=\"line\">    -j, --json              Output consumable JSON</div><div class=\"line\">    -l, --<span class=\"built_in\">log</span>-level         What level of logs to report</div><div class=\"line\">    -o, --offline           Do not hit the network</div><div class=\"line\">    -q, --quiet             Only output important information</div><div class=\"line\">    -s, --silent            Do not output anything, besides errors</div><div class=\"line\">    -V, --verbose           Makes output more verbose</div><div class=\"line\">    --allow-root            Allows running commands as root</div><div class=\"line\"></div><div class=\"line\">See <span class=\"string\">'bower help &lt;command&gt;'</span> <span class=\"keyword\">for</span> more information on a specific <span class=\"built_in\">command</span>.</div></pre></td></tr></table></figure>\n<h1 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h1><p>打开bash，进入你的项目目录，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install jquery</div></pre></td></tr></table></figure>\n<p>一个新的文件夹bower_components会被创建出来，你使用bower安装的所有包都会放在这个目录下面，<strong>一般不要直接修改这个目录下的文件</strong>。<br>Bower 在下载的时候会去 server 上找名字对应的 git 库，下载后切换到对应的版本，如果未指定则是最新的。<br>除了通过以上别名的方式，还可以指定github上的代码库，某个文件或者压缩包，本地的Git仓库来进行安装，你还可以指定安装的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install git://github.com/someone/some-package.git</div><div class=\"line\">bower install someone/some-package</div><div class=\"line\">bower install &lt;package&gt;<span class=\"comment\">#&lt;version&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>通过 bower list 可以看到本地安装的所有的包。</li>\n<li>如果想要搜索你需要的包何以使用 bower search 命令或者在<a href=\"http://sindresorhus.com/bower-components\" target=\"_blank\" rel=\"external\">这里</a>看看。</li>\n<li>另外每次你在线安装后bower都会产生缓存</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower cache list</div></pre></td></tr></table></figure>\n<p>通过这查看缓存，你可以知道你曾经下载过哪些文件，你也可以通过缓存来安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install &lt;package&gt; --offline</div></pre></td></tr></table></figure>\n","categories":[],"tags":["blog","frontend","build"]},{"title":"使用Grunt构建前端项目","url":"https://vincenthou.github.io/2013/12/11/使用Grunt构建前端项目/","content":"<p><img src=\"http://gruntjs.cn/img/grunt-logo.png\" alt=\"image\"><br>为了保证代码的质量和自动化一些重复的工作，构建工具是不必可少的。C/C++程序通过makefile管理编译测试打包的过程，Java程序通过Maven,Ant实现项目构建管理功能，Ruby有Rake，这些工具都是为后端语言设计的。</p>\n<p>之前如果需要一些简单的前端构建，可以<a href=\"http://book.36ria.com/ant/index.html\" target=\"_blank\" rel=\"external\">使用Ant</a>来实现一些基础的比如打包js/css、压缩文件、构建目录、重命名文件，但对于前端开发来说还不够完善。随着前端开发的复杂度逐渐提高，node.js的推广，基于javascript的构建工具应运而生，这就是Grunt。Grunt可以执行像压缩，合并，模糊化代码， 单元测试,，代码检查以及打包发布等等任务。</p>\n<h1 id=\"开始安装使用\"><a href=\"#开始安装使用\" class=\"headerlink\" title=\"开始安装使用\"></a>开始安装使用</h1><h2 id=\"1-安装CLI\"><a href=\"#1-安装CLI\" class=\"headerlink\" title=\"1. 安装CLI\"></a>1. 安装CLI</h2><p>安装CLI之前首先安装Nodejs和npm，安装成功之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g grunt-cli</div></pre></td></tr></table></figure>\n<p><strong>Tip:</strong>  CLI只是grunt的引导加载器，可以使多个版本的grunt并存</p>\n<h2 id=\"2-安装Grunt\"><a href=\"#2-安装Grunt\" class=\"headerlink\" title=\"2. 安装Grunt\"></a>2. 安装Grunt</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g grunt</div></pre></td></tr></table></figure>\n<h2 id=\"3-在项目根目录添加npm项目配置文件\"><a href=\"#3-在项目根目录添加npm项目配置文件\" class=\"headerlink\" title=\"3. 在项目根目录添加npm项目配置文件\"></a>3. 在项目根目录添加npm项目配置文件</h2><p>“package.json” 是npm项目配置文件，使用命令行交互的方式创建pacakge.json文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>命令行会提示输入配置信息，或者直接复制下面的内容到一个空的package.json文件中</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-project-name\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"grunt\"</span>: <span class=\"string\">\"~0.4.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"grunt-contrib-jshint\"</span>: <span class=\"string\">\"~0.6.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"grunt-contrib-nodeunit\"</span>: <span class=\"string\">\"~0.2.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"grunt-contrib-uglify\"</span>: <span class=\"string\">\"~0.2.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>文件中的devDependencies选项需要通过安装才能真正生效，例如安装grunt</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install grunt --save-dev</div></pre></td></tr></table></figure>\n<p>–save-dev选项会将grunt配置信息添加到package.json文件中</p>\n<h2 id=\"4-在项目根目录添加grunt配置文件\"><a href=\"#4-在项目根目录添加grunt配置文件\" class=\"headerlink\" title=\"4. 在项目根目录添加grunt配置文件\"></a>4. 在项目根目录添加grunt配置文件</h2><p>“Gruntfile.js”是专门用来配置grunt的配置文件（还可以添加Gruntfile.coffee）<br>“Gruntfile.js”主要由以下几部分组成</p>\n<ul>\n<li>包装函数</li>\n<li>项目和任务的配置</li>\n<li>加载插件和任务</li>\n<li>自定义任务<br>下面一个gruntfile的例子使用uglify来压缩文件，并且添加固定格式的注释信息</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//包装函数</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 项目配置</span></div><div class=\"line\">  grunt.initConfig(&#123;</div><div class=\"line\">    <span class=\"comment\">//读取npm配置文件信息</span></div><div class=\"line\">    pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</div><div class=\"line\">    uglify: &#123;</div><div class=\"line\">      options: &#123;</div><div class=\"line\">        banner: <span class=\"string\">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; */\\n'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      build: &#123;</div><div class=\"line\">        src: <span class=\"string\">'src/&lt;%= pkg.name %&gt;.js'</span>,</div><div class=\"line\">        dest: <span class=\"string\">'build/&lt;%= pkg.name %&gt;.min.js'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 加载提供“uglify”任务的插件</span></div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 设置默认任务为“uglify”</span></div><div class=\"line\">  grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'uglify'</span>]);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>Tip:</strong>  需要创建一个src文件夹，并且添加一个与package.jso里面同名的js文件来进行压缩，从代码中可以看到banner的生成是要读取package.json里面信息的</p>\n<h2 id=\"5-安装需要使用的插件\"><a href=\"#5-安装需要使用的插件\" class=\"headerlink\" title=\"5. 安装需要使用的插件\"></a>5. 安装需要使用的插件</h2><p>无论是在package.json里面，还是在Gruntfile中进行配置，这些只是告诉Grunt需要使用的插件和任务是什么，以及使用时传入的参数为何，但是真正的工作的插件还需要自行安装的，通过以下命令来安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install grunt-contrib --save-dev</div></pre></td></tr></table></figure>\n<p><strong>安装成功后，新安装的模块会被添加到node_modules中</strong><br>该命令会安装常用的官方工具库，让你能够快速的上手使用grunt（grunt官方的工具库都是以contrib为前缀），在实际开发中要根据需要选择性的下载相应的工具库。<br><a href=\"http://gruntjs.com/plugins\" target=\"_blank\" rel=\"external\">所有可用的grunt插件库</a><br><a href=\"https://npmjs.org/package/grunt-contrib\" target=\"_blank\" rel=\"external\">常用的grunt插件</a></p>\n<h2 id=\"6-运行grunt命令，开始使用grunt\"><a href=\"#6-运行grunt命令，开始使用grunt\" class=\"headerlink\" title=\"6. 运行grunt命令，开始使用grunt\"></a>6. 运行grunt命令，开始使用grunt</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> project &amp; grunt &lt;task-name&gt;</div></pre></td></tr></table></figure>\n<p>如果不指定任务名称，默认会执行default的任务</p>\n<h1 id=\"进一步的深入\"><a href=\"#进一步的深入\" class=\"headerlink\" title=\"进一步的深入\"></a>进一步的深入</h1><p><a href=\"http://gruntjs.com/configuring-tasks\" target=\"_blank\" rel=\"external\">配置任务</a><br><a href=\"http://gruntjs.com/api/grunt\" target=\"_blank\" rel=\"external\">Grunt API文档</a><br><a href=\"http://gruntjs.com/creating-tasks\" target=\"_blank\" rel=\"external\">创建自定义任务</a><br><strong>Tip:</strong>  自定义任务放在文件夹中，通过grunt.loadTasks引入<br><a href=\"http://gruntjs.cn/creating-plugins/\" target=\"_blank\" rel=\"external\">创建自定义插件</a><br><a href=\"http://gruntjs.com/project-scaffolding\" target=\"_blank\" rel=\"external\">创建项目模板</a></p>\n<h1 id=\"实际的例子\"><a href=\"#实际的例子\" class=\"headerlink\" title=\"实际的例子\"></a>实际的例子</h1><p><a href=\"http://blog.fens.me/nodejs-grunt-intro/\" target=\"_blank\" rel=\"external\">入门介绍</a><br><a href=\"http://www.36ria.com/6226\" target=\"_blank\" rel=\"external\">常用插件的使用</a><br><a href=\"http://www.36ria.com/6232\" target=\"_blank\" rel=\"external\">任务配置详解</a></p>\n","categories":[],"tags":["blog","frontend","build"]},{"title":"在Windows上Git bash集成Gitflow工具","url":"https://vincenthou.github.io/2013/12/11/在Windows上Git-bash集成Gitflow工具/","content":"<p>Git作为版本控制工具越来越流行，但是考虑到Git使用的灵活性，在进行大型项目开发的时候遵循一定的规范还是很有必要的，比较实用的一种工作流程要数<a href=\"https://www.atlassian.com/git/workflows#!workflow-gitflow\" target=\"_blank\" rel=\"external\">Gitflow</a>了，刚开始使用的时候会感觉这个流程很复杂，为了简化操作，Gitflow的工具应运而生，下面简单介绍一下。</p>\n<h2 id=\"在Windows上使用Gitflow规范流程\"><a href=\"#在Windows上使用Gitflow规范流程\" class=\"headerlink\" title=\"在Windows上使用Gitflow规范流程\"></a>在Windows上使用Gitflow规范流程</h2><h3 id=\"1-将Gitflow克隆到本地\"><a href=\"#1-将Gitflow克隆到本地\" class=\"headerlink\" title=\"1. 将Gitflow克隆到本地\"></a>1. 将Gitflow克隆到本地</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -recursive git://github.com/nvie/gitflow.git</div></pre></td></tr></table></figure>\n<h3 id=\"2-下载与msysgit集成Bin文件\"><a href=\"#2-下载与msysgit集成Bin文件\" class=\"headerlink\" title=\"2. 下载与msysgit集成Bin文件\"></a>2. 下载与msysgit集成Bin文件</h3><p><a href=\"http://sourceforge.net/projects/gnuwin32/files/util-linux/2.14.1/util-linux-ng-2.14.1-bin.zip/download\" target=\"_blank\" rel=\"external\">util-linux-ng-2.14.1-bin</a></p>\n<p><a href=\"http://sourceforge.net/projects/gnuwin32/files/util-linux/2.14.1/util-linux-ng-2.14.1-dep.zip/download\" target=\"_blank\" rel=\"external\">util-linux-ng-2.14.1-dep</a></p>\n<h3 id=\"3-将Bin文件拷贝到msysgit的bin目录下\"><a href=\"#3-将Bin文件拷贝到msysgit的bin目录下\" class=\"headerlink\" title=\"3. 将Bin文件拷贝到msysgit的bin目录下\"></a>3. 将Bin文件拷贝到msysgit的bin目录下</h3><p>下载完成后分别将两个压缩包解压文件下bin目录中的getopt.exe，libintl3.dll和libiconv2.dll文件拷贝到msysgit安装目录下的bin目录中</p>\n<h3 id=\"4-安装Gitflow工具\"><a href=\"#4-安装Gitflow工具\" class=\"headerlink\" title=\"4. 安装Gitflow工具\"></a>4. 安装Gitflow工具</h3><p>打开cmd命令行，进入已经克隆好的gitflow contrib目录中执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:\\gitflow contrib&gt;msysgit-install.cmd <span class=\"string\">\"C:\\Program Files\\Git\"</span>.</div></pre></td></tr></table></figure>\n<h3 id=\"5-开始在console中使用Gitflow\"><a href=\"#5-开始在console中使用Gitflow\" class=\"headerlink\" title=\"5. 开始在console中使用Gitflow\"></a>5. 开始在console中使用Gitflow</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">usage: git flow &lt;subcommand&gt;</div><div class=\"line\"></div><div class=\"line\">Available subcommands are:</div><div class=\"line\">   init      Initialize a new git repo with support <span class=\"keyword\">for</span> the branching model.</div><div class=\"line\">   feature   Manage your feature branches.</div><div class=\"line\">   release   Manage your release branches.</div><div class=\"line\">   hotfix    Manage your hotfix branches.</div><div class=\"line\">   support   Manage your support branches.</div><div class=\"line\">   version   Shows version information.</div><div class=\"line\"></div><div class=\"line\">Try <span class=\"string\">'git flow &lt;subcommand&gt; help'</span> <span class=\"keyword\">for</span> details.</div></pre></td></tr></table></figure>\n<h2 id=\"使用Gitflow之后的开发流程\"><a href=\"#使用Gitflow之后的开发流程\" class=\"headerlink\" title=\"使用Gitflow之后的开发流程\"></a>使用Gitflow之后的开发流程</h2><h3 id=\"1-为本地代码库添加Git-flow特性\"><a href=\"#1-为本地代码库添加Git-flow特性\" class=\"headerlink\" title=\"1. 为本地代码库添加Git flow特性\"></a>1. 为本地代码库添加Git flow特性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow init</div></pre></td></tr></table></figure>\n<p>使用默认值进行初始化设定</p>\n<h3 id=\"2-开始增加新特性-修复bug\"><a href=\"#2-开始增加新特性-修复bug\" class=\"headerlink\" title=\"2. 开始增加新特性/修复bug\"></a>2. 开始增加新特性/修复bug</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow feature start &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"3-完成开发的工作\"><a href=\"#3-完成开发的工作\" class=\"headerlink\" title=\"3. 完成开发的工作\"></a>3. 完成开发的工作</h3><p>修改一些文件，添加修改的文件到暂存区(staging area)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure>\n<p>将修改后的文件提交到本地的版本库中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -am <span class=\"string\">'Add a new feature'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-完成新特性-修复bug\"><a href=\"#4-完成新特性-修复bug\" class=\"headerlink\" title=\"4. 完成新特性/修复bug\"></a>4. 完成新特性/修复bug</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow feature finish &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"5-同步到中央代码库\"><a href=\"#5-同步到中央代码库\" class=\"headerlink\" title=\"5. 同步到中央代码库\"></a>5. 同步到中央代码库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow feature publish &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\" target=\"_blank\" rel=\"external\">详细的Gitflow使用方法参考</a></p>\n<p><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"external\">Gitflow原型</a><br><a href=\"http://wenku.baidu.com/view/1ea291bf960590c69ec37694.html\" target=\"_blank\" rel=\"external\">TortoiseGit日常使用指南</a></p>\n","categories":[],"tags":["blog","git"]},{"title":"Git 最佳实践","url":"https://vincenthou.github.io/2013/12/06/Git-最佳实践/","content":"<h1 id=\"为什么使用Git\"><a href=\"#为什么使用Git\" class=\"headerlink\" title=\"为什么使用Git\"></a>为什么使用Git</h1><p><a href=\"http://blog.teamtreehouse.com/why-you-should-switch-from-subversion-to-git\" target=\"_blank\" rel=\"external\">http://blog.teamtreehouse.com/why-you-should-switch-from-subversion-to-git</a><br><a href=\"http://blog.jobbole.com/20069/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/20069/</a><br><a href=\"http://www.zzbaike.com/wiki/Git%E4%B8%8ESVN%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83\" target=\"_blank\" rel=\"external\">http://www.zzbaike.com/wiki/Git%E4%B8%8ESVN%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83</a></p>\n<h1 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h1><ol>\n<li>Follow the appropriate workflow</li>\n<li>Make your commit atomic</li>\n<li>Commit early and often</li>\n<li>Write meaningful commit message</li>\n<li>Squash commits with rebase (merge –squash)</li>\n<li>Keep your code up to date before push to server, solve the conflicts yourself</li>\n<li>Integrate with CI system if possible</li>\n<li>Divide large work into different repositories</li>\n<li>add .gitignore for empty folder</li>\n<li>Use alias to accelerate your operations (Command line)</li>\n</ol>\n<p>folder/.gitignore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\">!.gitignore</div></pre></td></tr></table></figure>\n<p>~/.gitconfig (~ stands for the default path when openning git bash)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[alias]</div><div class=\"line\">    st = status</div></pre></td></tr></table></figure>\n<p>~/.bashrc (to be more efficient, use short command in the console)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias gst=&apos;git status&apos;</div><div class=\"line\">alias ga=&apos;git add&apos;</div></pre></td></tr></table></figure>\n<h1 id=\"项目中的Git工作流程\"><a href=\"#项目中的Git工作流程\" class=\"headerlink\" title=\"项目中的Git工作流程\"></a>项目中的Git工作流程</h1><h2 id=\"一些规范\"><a href=\"#一些规范\" class=\"headerlink\" title=\"一些规范\"></a>一些规范</h2><ol>\n<li>项目中有两个固定分支master和develop</li>\n<li>开发本地只克隆develop分支, 只有需要relase或者hotfix时候才会在本地克隆master代码来进行合并</li>\n<li>所有开发时新添加的feature或者新修复的bug都只能直接合并到develop分支上<h2 id=\"实际开发流程\"><a href=\"#实际开发流程\" class=\"headerlink\" title=\"实际开发流程\"></a>实际开发流程</h2><h3 id=\"1-克隆远端的develop分支\"><a href=\"#1-克隆远端的develop分支\" class=\"headerlink\" title=\"1. 克隆远端的develop分支\"></a>1. 克隆远端的develop分支</h3></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -b develop &lt;remote-repository-name&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-创建新的分支\"><a href=\"#2-创建新的分支\" class=\"headerlink\" title=\"2. 创建新的分支\"></a>2. 创建新的分支</h3><p>开始实现一个feature或者解决一个bug之前，首先切换到develop分支上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout develop</div></pre></td></tr></table></figure>\n<p>创建feature或者bug的分支,并且切换到该分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;feature-branch-name&gt; develop</div></pre></td></tr></table></figure>\n<h3 id=\"3-完成开发的工作\"><a href=\"#3-完成开发的工作\" class=\"headerlink\" title=\"3. 完成开发的工作\"></a>3. 完成开发的工作</h3><p>修改一些文件，添加修改的文件到暂存区(staging area)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure>\n<p>将修改后的文件提交到本地的版本库中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -am <span class=\"string\">'Add a new feature'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-提交你的代码到中央版本库上\"><a href=\"#4-提交你的代码到中央版本库上\" class=\"headerlink\" title=\"4. 提交你的代码到中央版本库上\"></a>4. 提交你的代码到中央版本库上</h3><p>提交之前保证你本地的develop分支的代码是最新的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout develop</div><div class=\"line\">git pull origin develop</div></pre></td></tr></table></figure>\n<p>将你在branch上完成的代码修改合并到develop分支上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout develop</div><div class=\"line\">git merge &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<p><strong>or 推荐使用rebase</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout &lt;feature-branch-name&gt;</div><div class=\"line\">git rebase -i master</div><div class=\"line\">git checkout develop</div><div class=\"line\">git merge &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<p>详细的rebase的使用案例看<a href=\"https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase-i\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>提交代码到中央版本库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<p>*删除本地创建的分支（可选）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -d &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"在Windows上使用Gitflow规范流程\"><a href=\"#在Windows上使用Gitflow规范流程\" class=\"headerlink\" title=\"在Windows上使用Gitflow规范流程\"></a>在Windows上使用Gitflow规范流程</h2><h3 id=\"1-将Gitflow克隆到本地\"><a href=\"#1-将Gitflow克隆到本地\" class=\"headerlink\" title=\"1. 将Gitflow克隆到本地\"></a>1. 将Gitflow克隆到本地</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -recursive git://github.com/nvie/gitflow.git</div></pre></td></tr></table></figure>\n<h3 id=\"2-下载与msysgit集成Bin文件\"><a href=\"#2-下载与msysgit集成Bin文件\" class=\"headerlink\" title=\"2. 下载与msysgit集成Bin文件\"></a>2. 下载与msysgit集成Bin文件</h3><p><a href=\"http://sourceforge.net/projects/gnuwin32/files/util-linux/2.14.1/util-linux-ng-2.14.1-bin.zip/download\" target=\"_blank\" rel=\"external\">util-linux-ng-2.14.1-bin</a></p>\n<p><a href=\"http://sourceforge.net/projects/gnuwin32/files/util-linux/2.14.1/util-linux-ng-2.14.1-dep.zip/download\" target=\"_blank\" rel=\"external\">util-linux-ng-2.14.1-dep</a></p>\n<h3 id=\"3-将Bin文件拷贝到msysgit的bin目录下\"><a href=\"#3-将Bin文件拷贝到msysgit的bin目录下\" class=\"headerlink\" title=\"3. 将Bin文件拷贝到msysgit的bin目录下\"></a>3. 将Bin文件拷贝到msysgit的bin目录下</h3><p>下载完成后分别将两个压缩包解压文件下bin目录中的getopt.exe，libintl3.dll和libiconv2.dll文件拷贝到msysgit安装目录下的bin目录中</p>\n<h3 id=\"4-安装Gitflow工具\"><a href=\"#4-安装Gitflow工具\" class=\"headerlink\" title=\"4. 安装Gitflow工具\"></a>4. 安装Gitflow工具</h3><p>打开cmd命令行，进入已经克隆好的gitflow contrib目录中执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:\\gitflow contrib&gt;msysgit-install.cmd <span class=\"string\">\"C:\\Program Files\\Git\"</span>.</div></pre></td></tr></table></figure>\n<h3 id=\"5-开始在console中使用Gitflow\"><a href=\"#5-开始在console中使用Gitflow\" class=\"headerlink\" title=\"5. 开始在console中使用Gitflow\"></a>5. 开始在console中使用Gitflow</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">usage: git flow &lt;subcommand&gt;</div><div class=\"line\"></div><div class=\"line\">Available subcommands are:</div><div class=\"line\">   init      Initialize a new git repo with support <span class=\"keyword\">for</span> the branching model.</div><div class=\"line\">   feature   Manage your feature branches.</div><div class=\"line\">   release   Manage your release branches.</div><div class=\"line\">   hotfix    Manage your hotfix branches.</div><div class=\"line\">   support   Manage your support branches.</div><div class=\"line\">   version   Shows version information.</div><div class=\"line\"></div><div class=\"line\">Try <span class=\"string\">'git flow &lt;subcommand&gt; help'</span> <span class=\"keyword\">for</span> details.</div></pre></td></tr></table></figure>\n<p>详细的Gitflow使用方法参考<a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\" target=\"_blank\" rel=\"external\">Git Flow Cheatsheet</a></p>\n<h2 id=\"使用Gitflow之后的开发流程\"><a href=\"#使用Gitflow之后的开发流程\" class=\"headerlink\" title=\"使用Gitflow之后的开发流程\"></a>使用Gitflow之后的开发流程</h2><h3 id=\"1-为本地代码库添加Git-flow特性\"><a href=\"#1-为本地代码库添加Git-flow特性\" class=\"headerlink\" title=\"1. 为本地代码库添加Git flow特性\"></a>1. 为本地代码库添加Git flow特性</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow init</div></pre></td></tr></table></figure>\n<p>使用默认值进行初始化设定</p>\n<h3 id=\"2-开始增加新特性-修复bug\"><a href=\"#2-开始增加新特性-修复bug\" class=\"headerlink\" title=\"2. 开始增加新特性/修复bug\"></a>2. 开始增加新特性/修复bug</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow feature start &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"3-完成开发的工作-1\"><a href=\"#3-完成开发的工作-1\" class=\"headerlink\" title=\"3. 完成开发的工作\"></a>3. 完成开发的工作</h3><p>修改一些文件，添加修改的文件到暂存区(staging area)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure>\n<p>将修改后的文件提交到本地的版本库中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -am <span class=\"string\">'Add a new feature'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-完成新特性-修复bug\"><a href=\"#4-完成新特性-修复bug\" class=\"headerlink\" title=\"4. 完成新特性/修复bug\"></a>4. 完成新特性/修复bug</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow feature finish &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"5-同步到中央代码库\"><a href=\"#5-同步到中央代码库\" class=\"headerlink\" title=\"5. 同步到中央代码库\"></a>5. 同步到中央代码库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git flow feature publish &lt;feature-branch-name&gt;</div></pre></td></tr></table></figure>\n<p><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html/#features\" target=\"_blank\" rel=\"external\">详细说明参考</a></p>\n<h2 id=\"准备release\"><a href=\"#准备release\" class=\"headerlink\" title=\"准备release\"></a>准备release</h2><h3 id=\"1-创建release分支\"><a href=\"#1-创建release分支\" class=\"headerlink\" title=\"1. 创建release分支\"></a>1. 创建release分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;release-branch-name&gt; develop</div></pre></td></tr></table></figure>\n<h3 id=\"2-完成relase的相关工作\"><a href=\"#2-完成relase的相关工作\" class=\"headerlink\" title=\"2. 完成relase的相关工作\"></a>2. 完成relase的相关工作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -am <span class=\"string\">'Finish release related work'</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-将relase分支合并到master和develop分支，并且同步到中央版本库\"><a href=\"#3-将relase分支合并到master和develop分支，并且同步到中央版本库\" class=\"headerlink\" title=\"3. 将relase分支合并到master和develop分支，并且同步到中央版本库\"></a>3. 将relase分支合并到master和develop分支，并且同步到中央版本库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div><div class=\"line\">git merge &lt;release-branch-name&gt;</div><div class=\"line\">git push</div><div class=\"line\">git checkout develop</div><div class=\"line\">git merge &lt;release-branch-name&gt;</div><div class=\"line\">git push</div><div class=\"line\">git branch -d &lt;release-branch-name&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"4-在主分支上添加tag，并且同步到中央服务器\"><a href=\"#4-在主分支上添加tag，并且同步到中央服务器\" class=\"headerlink\" title=\"4. 在主分支上添加tag，并且同步到中央服务器\"></a>4. 在主分支上添加tag，并且同步到中央服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -a &lt;version-number&gt; -m <span class=\"string\">'Create 0.1 version release'</span> master</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>\n<p><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/\" target=\"_blank\" rel=\"external\">使用Gitflow准备release</a></p>\n<h2 id=\"创建hotfix\"><a href=\"#创建hotfix\" class=\"headerlink\" title=\"创建hotfix\"></a>创建hotfix</h2><h3 id=\"1-从master分支上创建一个hotfix的新分支\"><a href=\"#1-从master分支上创建一个hotfix的新分支\" class=\"headerlink\" title=\"1. 从master分支上创建一个hotfix的新分支\"></a>1. 从master分支上创建一个hotfix的新分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;hotifx-branch-name&gt; master</div></pre></td></tr></table></figure>\n<h3 id=\"2-修复问题\"><a href=\"#2-修复问题\" class=\"headerlink\" title=\"2. 修复问题\"></a>2. 修复问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -am <span class=\"string\">'Fix the crash bug'</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-将relase分支合并到master和develop分支，并且同步到中央版本库-1\"><a href=\"#3-将relase分支合并到master和develop分支，并且同步到中央版本库-1\" class=\"headerlink\" title=\"3. 将relase分支合并到master和develop分支，并且同步到中央版本库\"></a>3. 将relase分支合并到master和develop分支，并且同步到中央版本库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div><div class=\"line\">git merge &lt;hotifx-branch-name&gt;</div><div class=\"line\">git push</div><div class=\"line\">git checkout develop</div><div class=\"line\">git merge &lt;hotifx-branch-name&gt;</div><div class=\"line\">git push</div><div class=\"line\">git branch -d &lt;hotifx-branch-name&gt;</div></pre></td></tr></table></figure>\n<p><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html#hotfixes\" target=\"_blank\" rel=\"external\">使用Gitflow创建hotfix</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://rogerdudler.github.io/git-guide/\" target=\"_blank\" rel=\"external\">Simple get started reference</a><br><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"external\">A Successful Git Branching Model</a><br><a href=\"http://marklodato.github.io/visual-git-guide/index-en.html\" target=\"_blank\" rel=\"external\">A Visual Git Reference</a><br><a href=\"https://www.atlassian.com/git/\" target=\"_blank\" rel=\"external\">Git Tutorials</a><br><a href=\"https://help.github.com/\" target=\"_blank\" rel=\"external\">Github help</a><br><a href=\"http://git-scm.com/book/en\" target=\"_blank\" rel=\"external\">Git book</a><br><a href=\"http://gitready.com/\" target=\"_blank\" rel=\"external\">Gitready</a><br><a href=\"https://www.atlassian.com/git/workflows#!workflow-gitflow\" target=\"_blank\" rel=\"external\">Gitflow工作流英文版</a><br><a href=\"http://rogerdudler.github.io/git-guide/\" target=\"_blank\" rel=\"external\">快速开始</a><br><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\" target=\"_blank\" rel=\"external\">如何使用Gitflow插件</a><br><a href=\"http://git-scm.com/book/en\" target=\"_blank\" rel=\"external\">Git文档</a><br><a href=\"https://github.com/vincenthou/vincenthou.github.io/issues/1\" target=\"_blank\" rel=\"external\">我的Github工作流</a></p>\n","categories":[],"tags":["git"]},{"title":"Technology Tutorials","url":"https://vincenthou.github.io/2013/12/06/Technology-Tutorials/","content":"<h1 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h1><ul>\n<li>在线精品教程 <a href=\"http://build-podcast.com/\" target=\"_blank\" rel=\"external\">build podcast</a><h1 id=\"Frontend\"><a href=\"#Frontend\" class=\"headerlink\" title=\"Frontend\"></a>Frontend</h1></li>\n<li><a href=\"https://github.com/chemdemo/chemdemo.github.io/blob/master/blogs/frontend_knowledge.md\" target=\"_blank\" rel=\"external\">前端知识整理</a> </li>\n<li><a href=\"http://thecodeplayer.com/\" target=\"_blank\" rel=\"external\">CodePlayer</a> 炫酷的教程</li>\n<li>Yeoman 官网 <a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"external\">Yeoman</a>, <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/yeoman/\" target=\"_blank\" rel=\"external\">Building Web Apps With Yeoman And Polymer</a>, <a href=\"http://yeoman.io/generators.html\" target=\"_blank\" rel=\"external\">定制模板Official</a>, <a href=\"http://www.36ria.com/6156\" target=\"_blank\" rel=\"external\">定制模板Personal</a></li>\n<li>Jquery <a href=\"http://www.learnjquery.org/tutorials/\" target=\"_blank\" rel=\"external\">LearnJquery</a></li>\n<li>AngularJS <a href=\"http://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html\" target=\"_blank\" rel=\"external\">Get started</a>, <a href=\"http://blog.jobbole.com/46589/\" target=\"_blank\" rel=\"external\">使用思路</a></li>\n<li><a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes\" target=\"_blank\" rel=\"external\">AngularJS Scope</a></li>\n<li><a href=\"http://ify.io/lazy-loading-in-angularjs/\" target=\"_blank\" rel=\"external\">AngularJS Lazy loading</a></li>\n<li>Skills <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial/Using_images\" target=\"_blank\" rel=\"external\">处理图片</a>, <a href=\"http://blog.jobbole.com/47179/\" target=\"_blank\" rel=\"external\">有限状态机</a></li>\n<li><a href=\"http://smacss.com/book\" target=\"_blank\" rel=\"external\">Scalable and Modular Architecture for CSS</a></li>\n<li><a href=\"http://learn.shayhowe.com/advanced-html-css/\" target=\"_blank\" rel=\"external\">Advanced HTML and CSS</a></li>\n<li><a href=\"https://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md\" target=\"_blank\" rel=\"external\">Markdown Tutorials</a></li>\n<li><a href=\"https://bitbucket.org/ant512/canvaslayers/wiki/Tutorial_1.wiki\" target=\"_blank\" rel=\"external\">Canvas Layers</a></li>\n<li><a href=\"http://www.cnblogs.com/cloudgamer/archive/2009/01/06/Tween.html\" target=\"_blank\" rel=\"external\">Tween 算法</a></li>\n<li><a href=\"http://net.tutsplus.com/tutorials/tools-and-tips/travis-ci-what-why-how/\" target=\"_blank\" rel=\"external\">Using Travis CI</a></li>\n<li><a href=\"https://github.com/modulejs/pragmatic-jquery\" target=\"_blank\" rel=\"external\">Jquery最佳实践</a></li>\n<li><a href=\"https://github.com/chemdemo/chemdemo.github.io/blob/master/blogs/network.md\" target=\"_blank\" rel=\"external\">网络通讯协议</a><h1 id=\"Backend\"><a href=\"#Backend\" class=\"headerlink\" title=\"Backend\"></a>Backend</h1></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/web/1103_chenyan_restapi/index.html?ca=drs\" target=\"_blank\" rel=\"external\">REST API</a>, <a href=\"http://www.infoq.com/cn/articles/designing-restful-http-apps-roth\" target=\"_blank\" rel=\"external\">RESTful HTTP的实践</a></li>\n<li><a href=\"http://tech.pro/tutorial/1555/10-easy-steps-to-a-complete-understanding-of-sql\" target=\"_blank\" rel=\"external\">Understanding SQL</a></li>\n<li><a href=\"http://blog.csdn.net/smarttony/article/details/5874485\" target=\"_blank\" rel=\"external\">高并发高流量网站架构</a></li>\n<li>MongoDB <a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md\" target=\"_blank\" rel=\"external\">Little Book</a></li>\n<li>MongoDB <a href=\"http://www.cnblogs.com/huangxincheng/archive/2012/02/18/2356595.html\" target=\"_blank\" rel=\"external\">快速入门</a></li>\n<li>Resis <a href=\"http://www.redisbook.com/en/latest/internal/aof.html\" target=\"_blank\" rel=\"external\">持久化</a></li>\n<li><a href=\"http://developer.51cto.com/art/201401/427370.htm\" target=\"_blank\" rel=\"external\">十步完全理解SQL</a><h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1></li>\n<li>快速入门 <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"external\">Simple Guide</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/\" target=\"_blank\" rel=\"external\">Git Magic</a></li>\n<li>保存<a href=\"https://gist.github.com/canton7/1423106\" target=\"_blank\" rel=\"external\">本地版本的Config文件</a><h1 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h1></li>\n<li>7天nodejs <a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">7-day-nodejs</a></li>\n<li>npm packages <a href=\"https://npmjs.org/\" target=\"_blank\" rel=\"external\">npmjs</a></li>\n<li>How to docs <a href=\"http://docs.nodejitsu.com/\" target=\"_blank\" rel=\"external\">nodejitsu</a></li>\n<li>使用 Express + MongoDB 搭建多人博客 <a href=\"https://github.com/nswbmw/N-blog/wiki/_pages\" target=\"_blank\" rel=\"external\">nswbmw / N-blog</a></li>\n<li>从零开始nodejs<a href=\"http://blog.fens.me/series-nodejs/#gsc.tab=0\" target=\"_blank\" rel=\"external\">系列文章</a></li>\n<li><a href=\"https://github.com/chemdemo/chemdemo.github.io/blob/master/blogs/exception_catch.md\" target=\"_blank\" rel=\"external\">异常捕获</a></li>\n<li>异步工作流<a href=\"https://github.com/chemdemo/chemdemo.github.io/blob/master/blogs/stepify.md\" target=\"_blank\" rel=\"external\">Stepify</a></li>\n<li>Scrapy <a href=\"https://github.com/orkz/scrapy\" target=\"_blank\" rel=\"external\">https://github.com/orkz/scrapy</a></li>\n<li>distribute_crawler <a href=\"https://github.com/gnemoug/distribute_crawler\" target=\"_blank\" rel=\"external\">https://github.com/gnemoug/distribute_crawler</a><h1 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h1></li>\n<li><a href=\"http://www.laruence.com/2011/04/13/1991.html\" target=\"_blank\" rel=\"external\">PHP asynchronous call</a></li>\n<li><a href=\"http://www.phptherightway.com/#top\" target=\"_blank\" rel=\"external\">PHP Right Way</a></li>\n<li><a href=\"http://avnpc.com/pages/best-wheels-for-php\" target=\"_blank\" rel=\"external\">PHP 轮子</a></li>\n<li><a href=\"http://phptrends.com/\" target=\"_blank\" rel=\"external\">流行de框架</a><h1 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h1></li>\n<li>gem packages <a href=\"http://rubygems.org/\" target=\"_blank\" rel=\"external\">gen</a></li>\n<li>扎实的学习 <a href=\"http://ruby.learncodethehardway.org/\" target=\"_blank\" rel=\"external\">Learn Ruby The Hard Way</a><h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h1></li>\n<li><a href=\"http://www.oschina.net/question/tag/clang-lie\" target=\"_blank\" rel=\"external\">C编程鬼话</a><h1 id=\"Funny-Links\"><a href=\"#Funny-Links\" class=\"headerlink\" title=\"Funny Links\"></a>Funny Links</h1></li>\n<li><a href=\"http://developer.51cto.com/art/201105/265512.htm\" target=\"_blank\" rel=\"external\">解释设计模式</a></li>\n<li><a href=\"http://developer.51cto.com/art/201105/265507.htm\" target=\"_blank\" rel=\"external\">解释OOD</a></li>\n</ul>\n","categories":[],"tags":["collection"]},{"title":"Frontend Tools","url":"https://vincenthou.github.io/2013/12/05/Frontend-Tools/","content":"<ul>\n<li>比照设计图 <a href=\"http://htmlpreview.github.io/?https://github.com/zhangxinxu/uiMatch/blob/master/index.html\" target=\"_blank\" rel=\"external\">compare visual design</a></li>\n<li>预览静态页面<a href=\"http://htmlpreview.github.io/\" target=\"_blank\" rel=\"external\">htmlpreview</a></li>\n<li>前端构建工具<a href=\"https://github.com/modjs/mod\" target=\"_blank\" rel=\"external\">Modjs</a></li>\n<li>CSSSprite工具<a href=\"https://github.com/iazrael/ispriter\" target=\"_blank\" rel=\"external\">Ispriter</a></li>\n<li>为前端开发创建实时后台<a href=\"https://www.firebase.com/\" target=\"_blank\" rel=\"external\">Firebase</a></li>\n<li>免费后台支持<a href=\"https://www.dreamfactory.com/\" target=\"_blank\" rel=\"external\">Dreamfactory</a></li>\n<li>dribbble <a href=\"http://dribbble.com/\" target=\"_blank\" rel=\"external\">http://dribbble.com/</a></li>\n<li>创意图片集Openclipart <a href=\"http://openclipart.org/\" target=\"_blank\" rel=\"external\">http://openclipart.org/</a></li>\n<li>iconfans <a href=\"http://www.iconfans.com/\" target=\"_blank\" rel=\"external\">http://www.iconfans.com/</a></li>\n<li>UI 盒子 <a href=\"http://www.boxui.com/\" target=\"_blank\" rel=\"external\">http://www.boxui.com/</a></li>\n<li>CSS Sprite Generator <a href=\"http://spritegen.website-performance.org/\" target=\"_blank\" rel=\"external\">http://spritegen.website-performance.org/</a></li>\n<li><a href=\"http://www.igvita.com/slides/2012/devtools-tips-and-tricks/#2\" target=\"_blank\" rel=\"external\">Chrome developer tools</a></li>\n<li>阿里测，专业的网站即时探测工具 <a href=\"http://alibench.com/\" target=\"_blank\" rel=\"external\">http://alibench.com/</a></li>\n<li>CloudConvertor <a href=\"https://cloudconvert.org/\" target=\"_blank\" rel=\"external\">https://cloudconvert.org/</a></li>\n<li>Covert SVG to PNG <a href=\"https://cloudconvert.org/svg-to-png\" target=\"_blank\" rel=\"external\">https://cloudconvert.org/svg-to-png</a></li>\n<li>Covert markdown to HTML <a href=\"http://markdowntohtml.com/\" target=\"_blank\" rel=\"external\">http://markdowntohtml.com/</a></li>\n<li>Markdown编辑器 <a href=\"http://mahua.jser.me/\" target=\"_blank\" rel=\"external\">http://mahua.jser.me/</a></li>\n<li>机器学习服务器 <a href=\"http://prediction.io/\" target=\"_blank\" rel=\"external\">http://prediction.io/</a></li>\n<li>Google 短地址服务 <a href=\"http://goo.gl/\" target=\"_blank\" rel=\"external\">http://goo.gl/</a></li>\n<li>Tiny 短地址服务 <a href=\"http://tiny.cc/\" target=\"_blank\" rel=\"external\">http://tiny.cc/</a></li>\n<li>二维码生成服务 <a href=\"http://www.liantu.com/\" target=\"_blank\" rel=\"external\">http://www.liantu.com/</a></li>\n<li>批量邮件发送 <a href=\"http://mailchimp.com/\" target=\"_blank\" rel=\"external\">Mailchimp</a></li>\n<li>又拍云存储 <a href=\"https://www.upyun.com/\" target=\"_blank\" rel=\"external\">https://www.upyun.com/</a></li>\n<li><a href=\"http://www.jsdelivr.com/\" target=\"_blank\" rel=\"external\">JS CDN</a></li>\n<li>各种HTML5兼容解决方案 <a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills\" target=\"_blank\" rel=\"external\">HTML5Polyfills</a></li>\n<li><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">Bootstrap and tools</a></li>\n<li><a href=\"http://www.uupoop.com/\" target=\"_blank\" rel=\"external\">Online PS</a></li>\n<li>压力测试<a href=\"http://keenwon.com/235.html\" target=\"_blank\" rel=\"external\">online</a></li>\n<li>流程图绘制工具<a href=\"https://www.websequencediagrams.com/#\" target=\"_blank\" rel=\"external\">online</a></li>\n</ul>\n<p>选择开源软件协议<br><img src=\"http://7ls0pw.com1.z0.glb.clouddn.com/free_software_licenses.png\" alt=\"Licence\"></p>\n<h2 id=\"开放API\"><a href=\"#开放API\" class=\"headerlink\" title=\"开放API\"></a>开放API</h2><p>图片搜索：<a href=\"http://baike.so.com/resource/other/bkeditor/server/getImgJson.php\" target=\"_blank\" rel=\"external\">http://baike.so.com/resource/other/bkeditor/server/getImgJson.php</a> 参数：q (query keyword)<br>百度图片搜索: <a href=\"http://image.baidu.com/data/imgs?sort=0&amp;pn=page*pageSize&amp;rn=pageSize&amp;col=keyword&amp;tag=全部&amp;tag3=&amp;p=channel&amp;from=1\" target=\"_blank\" rel=\"external\">http://image.baidu.com/data/imgs?sort=0&amp;pn=page*pageSize&amp;rn=pageSize&amp;col=keyword&amp;tag=全部&amp;tag3=&amp;p=channel&amp;from=1</a><br>360图片搜索：<a href=\"http://image.so.com/j?q=keyword&amp;sn=100&amp;pn=30\" target=\"_blank\" rel=\"external\">http://image.so.com/j?q=keyword&amp;sn=100&amp;pn=30</a><br>百度音乐歌词：<a href=\"http://tingapi.ting.baidu.com/v1/restserver/ting?from=webapp_music&amp;method=baidu.ting.song.lry&amp;format=jsonp&amp;callback=test&amp;songid=91084723\" target=\"_blank\" rel=\"external\">http://tingapi.ting.baidu.com/v1/restserver/ting?from=webapp_music&amp;method=baidu.ting.song.lry&amp;format=jsonp&amp;callback=test&amp;songid=91084723</a><br>豆瓣：<a href=\"http://developers.douban.com/wiki/?title=api_v2\" target=\"_blank\" rel=\"external\">http://developers.douban.com/wiki/?title=api_v2</a><br>Flickr： <a href=\"http://www.flickr.com/services/api/\" target=\"_blank\" rel=\"external\">http://www.flickr.com/services/api/</a><br>Last.fm Web Services：<a href=\"http://cn.last.fm/api\" target=\"_blank\" rel=\"external\">http://cn.last.fm/api</a><br>人工智能Simsimi:<br><a href=\"http://sandbox.api.simsimi.com/request.p?key=&amp;lc=zh&amp;text=\" target=\"_blank\" rel=\"external\">http://sandbox.api.simsimi.com/request.p?key=&amp;lc=zh&amp;text=</a><br><a href=\"http://developer.simsimi.com/api\" target=\"_blank\" rel=\"external\">http://developer.simsimi.com/api</a><br>iRobot: <a href=\"http://nlp.xiaoi.com/\" target=\"_blank\" rel=\"external\">http://nlp.xiaoi.com/</a><br>免费共享API: <a href=\"http://bbs.we7.cc/thread-535-1-1.html\" target=\"_blank\" rel=\"external\">http://bbs.we7.cc/thread-535-1-1.html</a><br><a href=\"http://rmbz.net/Api/AiTalk.aspx?key=rmbznet&amp;word=&amp;talk=xiaoi/sim\" target=\"_blank\" rel=\"external\">http://rmbz.net/Api/AiTalk.aspx?key=rmbznet&amp;word=&amp;talk=xiaoi/sim</a><br>IT ebook API  <a href=\"http://it-ebooks-api.info/\" target=\"_blank\" rel=\"external\">http://it-ebooks-api.info/</a></p>\n<p>微信测试平台：<a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a><br>百度控制台：<a href=\"http://developer.baidu.com/dev\" target=\"_blank\" rel=\"external\">http://developer.baidu.com/dev</a><br>在线脑图：<a href=\"http://fex-team.baidu.com/kityminder/dist/\" target=\"_blank\" rel=\"external\">http://fex-team.baidu.com/kityminder/dist/</a><br>在线PPT制作: <a href=\"http://airjd.com/\" target=\"_blank\" rel=\"external\">http://airjd.com/</a></p>\n","categories":[],"tags":["frontend","collection"]},{"title":"Good Blog Links","url":"https://vincenthou.github.io/2013/12/05/Good-Blog-Links/","content":"<p><a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"external\">前端技能汇总</a>(<a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"external\">https://github.com/JacksonTian/fks</a>)<br><a href=\"http://developer.51cto.com/art/201212/375204.htm\" target=\"_blank\" rel=\"external\">前端提升渠道</a><br><a href=\"http://kb.cnblogs.com/page/159704/\" target=\"_blank\" rel=\"external\">前端十日谈</a><br><a href=\"http://developer.51cto.com/art/201312/425003.htm\" target=\"_blank\" rel=\"external\">靠谱的JSer</a></p>\n<p>English</p>\n<ul>\n<li><a href=\"http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/\" target=\"_blank\" rel=\"external\">A Baseline for front end developers</a></li>\n<li><a href=\"https://github.com/krasimir/blog-posts\" target=\"_blank\" rel=\"external\">krasimir</a></li>\n<li>苹果设计师Bret Victor <a href=\"http://worrydream.com/\" target=\"_blank\" rel=\"external\">http://worrydream.com/</a></li>\n<li>Paul Irish <a href=\"http://www.paulirish.com/\" target=\"_blank\" rel=\"external\">http://www.paulirish.com/</a></li>\n<li>David Walsh <a href=\"http://davidwalsh.name/\" target=\"_blank\" rel=\"external\">http://davidwalsh.name/</a></li>\n<li>John Resig <a href=\"http://ejohn.org/\" target=\"_blank\" rel=\"external\">http://ejohn.org/</a></li>\n<li>Steve Souders <a href=\"http://stevesouders.com/\" target=\"_blank\" rel=\"external\">http://stevesouders.com/</a></li>\n<li>Addy Osmani <a href=\"http://addyosmani.com/blog/\" target=\"_blank\" rel=\"external\">http://addyosmani.com/blog/</a></li>\n<li>CSS Tricks <a href=\"http://css-tricks.com/\" target=\"_blank\" rel=\"external\">http://css-tricks.com/</a></li>\n<li>CSS Ninja <a href=\"http://www.thecssninja.com/\" target=\"_blank\" rel=\"external\">http://www.thecssninja.com/</a></li>\n</ul>\n<p>中文</p>\n<ul>\n<li>玉伯 <a href=\"https://github.com/lifesinger/lifesinger.github.com/issues?labels=blog\" target=\"_blank\" rel=\"external\">lifesinger.github.com</a></li>\n<li>汤姆大叔 <a href=\"http://www.cnblogs.com/TomXu\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/TomXu</a></li>\n<li>阮一峰 <a href=\"http://www.ruanyifeng.com/blog/archives.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/</a></li>\n<li>王子墨 <a href=\"http://julying.com/\" target=\"_blank\" rel=\"external\">http://julying.com/</a></li>\n<li>JerryQu 的小站 <a href=\"https://www.imququ.com/\" target=\"_blank\" rel=\"external\">https://www.imququ.com/</a></li>\n<li>前端观察 <a href=\"http://www.qianduan.net/\" target=\"_blank\" rel=\"external\">http://www.qianduan.net/</a></li>\n<li>豆瓣前端架构 [<a href=\"http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html#1\" target=\"_blank\" rel=\"external\">http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html#1</a>)</li>\n<li>结构之法 算法之道 <a href=\"http://blog.csdn.net/v_july_v\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/v_july_v</a></li>\n<li>CloudGamer <a href=\"http://www.cnblogs.com/cloudgamer/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/cloudgamer/</a></li>\n<li>RIA之家 <a href=\"http://www.36ria.com/\" target=\"_blank\" rel=\"external\">http://www.36ria.com/</a></li>\n<li>Hongru <a href=\"http://hongru.cnblogs.com/\" target=\"_blank\" rel=\"external\">http://hongru.cnblogs.com/</a></li>\n<li>张鑫旭 <a href=\"http://www.zhangxinxu.com/wordpress/\" target=\"_blank\" rel=\"external\">http://www.zhangxinxu.com/wordpress/</a></li>\n<li>BeiYuu <a href=\"http://beiyuu.com/\" target=\"_blank\" rel=\"external\">http://beiyuu.com/</a></li>\n<li>聂微东 <a href=\"http://www.cnblogs.com/Darren_code/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Darren_code/</a></li>\n<li>牛魔王的世界观 <a href=\"http://www.niumowang.org/\" target=\"_blank\" rel=\"external\">http://www.niumowang.org/</a></li>\n<li>淘宝昂天<a href=\"http://fgm.cc/learn/\" target=\"_blank\" rel=\"external\">http://fgm.cc/learn/</a></li>\n<li>peiwen <a href=\"http://peiwen.lu/\" target=\"_blank\" rel=\"external\">http://peiwen.lu/</a></li>\n<li>chuome <a href=\"http://chuo.me/archive/\" target=\"_blank\" rel=\"external\">http://chuo.me/archive/</a></li>\n<li>小鱼 <a href=\"http://sofish.de/\" target=\"_blank\" rel=\"external\">http://sofish.de/</a></li>\n<li>创意代码分享codrops <a href=\"http://tympanus.net/codrops/\" target=\"_blank\" rel=\"external\">http://tympanus.net/codrops/</a></li>\n<li>刘淼 <a href=\"http://liumiao.me/\" target=\"_blank\" rel=\"external\">http://liumiao.me/</a></li>\n<li>蔡宝坚 <a href=\"http://caibaojian.com/\" target=\"_blank\" rel=\"external\">http://caibaojian.com/</a></li>\n<li><a href=\"http://www.cssforest.org/blog/index.php?s=archive_lists\" target=\"_blank\" rel=\"external\">CSS森林</a></li>\n<li>bingo <a href=\"http://blog.bingo929.com/\" target=\"_blank\" rel=\"external\">http://blog.bingo929.com/</a></li>\n<li>宅居 <a href=\"http://otakustay.com/\" target=\"_blank\" rel=\"external\">http://otakustay.com/</a></li>\n<li>前端博客 <a href=\"http://qianduanblog.com/\" target=\"_blank\" rel=\"external\">http://qianduanblog.com/</a></li>\n<li>粉丝日志 <a href=\"http://blog.fens.me/\" target=\"_blank\" rel=\"external\">http://blog.fens.me/</a></li>\n<li>IT技术精研院 <a href=\"http://ittechnical.sinaapp.com/\" target=\"_blank\" rel=\"external\">http://ittechnical.sinaapp.com/</a></li>\n</ul>\n<p>组织</p>\n<ul>\n<li>奇舞团 <a href=\"http://www.75team.com/\" target=\"_blank\" rel=\"external\">http://www.75team.com/</a></li>\n<li>HTML5Rocks <a href=\"http://www.html5rocks.com/zh/\" target=\"_blank\" rel=\"external\">http://www.html5rocks.com/zh/</a></li>\n<li>前端圈 <a href=\"http://sentsin.com/daohang/\" target=\"_blank\" rel=\"external\">http://sentsin.com/daohang/</a></li>\n<li>5迷3道 <a href=\"http://5m3d.com/\" target=\"_blank\" rel=\"external\">http://5m3d.com/</a></li>\n<li>w3cfuns <a href=\"http://www.w3cfuns.com/\" target=\"_blank\" rel=\"external\">http://www.w3cfuns.com/</a></li>\n<li>业界新闻dailyjs <a href=\"http://dailyjs.com/\" target=\"_blank\" rel=\"external\">http://dailyjs.com/</a></li>\n<li>前端开发 <a href=\"http://www.css88.com/\" target=\"_blank\" rel=\"external\">http://www.css88.com/</a></li>\n<li>大前端 <a href=\"http://www.daqianduan.com/\" target=\"_blank\" rel=\"external\">http://www.daqianduan.com/</a></li>\n</ul>\n<p>公司</p>\n<ul>\n<li>淘宝 <a href=\"http://ued.taobao.org/blog/\" target=\"_blank\" rel=\"external\">http://ued.taobao.org/blog/</a></li>\n<li>阿里巴巴 <a href=\"http://www.aliued.cn/\" target=\"_blank\" rel=\"external\">http://www.aliued.cn/</a></li>\n<li>一淘 <a href=\"http://ux.etao.com/\" target=\"_blank\" rel=\"external\">http://ux.etao.com/</a></li>\n<li>天猫 <a href=\"http://ued.tmall.com/\" target=\"_blank\" rel=\"external\">http://ued.tmall.com/</a></li>\n<li>百度 <a href=\"http://ued.baidu.com/\" target=\"_blank\" rel=\"external\">http://ued.baidu.com/</a></li>\n<li>腾讯 <a href=\"http://www.alloyteam.com/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/</a></li>\n<li>ISUX <a href=\"http://isux.tencent.com/\" target=\"_blank\" rel=\"external\">http://isux.tencent.com/</a></li>\n<li>CDC <a href=\"http://cdc.tencent.com/\" target=\"_blank\" rel=\"external\">http://cdc.tencent.com/</a></li>\n<li>MXD <a href=\"http://mxd.tencent.com/\" target=\"_blank\" rel=\"external\">http://mxd.tencent.com/</a></li>\n<li>人人小站 <a href=\"http://zhan.renren.com/\" target=\"_blank\" rel=\"external\">http://zhan.renren.com/</a></li>\n<li>搜狗 <a href=\"http://ued.sogou.com/\" target=\"_blank\" rel=\"external\">http://ued.sogou.com/</a></li>\n<li>新浪 <a href=\"http://ued.sina.com/\" target=\"_blank\" rel=\"external\">http://ued.sina.com/</a></li>\n<li>网易 <a href=\"http://uedc.163.com/\" target=\"_blank\" rel=\"external\">http://uedc.163.com/</a></li>\n<li>搜狐 <a href=\"http://ued.focus.cn/wordpress/\" target=\"_blank\" rel=\"external\">http://ued.focus.cn/wordpress/</a></li>\n<li>携程 <a href=\"http://ued.ctrip.com/blog/\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/</a></li>\n</ul>\n","categories":[],"tags":["frontend","collection"]},{"title":"我的Git工作流","url":"https://vincenthou.github.io/2013/12/05/我的Git工作流/","content":"<p>git现在使用的人越来越多，和传统的cvs，svn等工具相比有很多的<a href=\"http://www.oschina.net/news/12542/git-and-svn\" target=\"_blank\" rel=\"external\">优势和特性</a>。当<br>你开始使用起来之后，你会发现自己逐渐的爱上她。基本的git操作这里就不赘述了，<br>查阅<a href=\"http://gitref.org/\" target=\"_blank\" rel=\"external\">参考文档</a>，或者一些<a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"external\">简明教程</a>，就能大致的了解，最关键是自己建一个自己的<br>库，多加练习。</p>\n<p><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>是全球最大的社交编程及代码托管网站，GitHub可以托管各种git库，并提<br>供一个web界面，但与其它像<a href=\"http://sourceforge.net/\" target=\"_blank\" rel=\"external\">SourceForge</a>或<a href=\"http://code.google.com/intl/zh-CN/\" target=\"_blank\" rel=\"external\">Google Code</a>这样的服务不同，GitHub的<br>独特卖点在于从另外一个项目进行分支的简易性而且主要是使用git作为管理工具。</p>\n<p>在github上可以找到很多优秀的开源软件，这是一个学习的好机会，我们也可以坚<br>持拿来主义，大量的优秀软件帮助我们解决开发中遇到的难题。同时这也是一个共享<br>与交流的平台，你不仅仅可以学习和使用别人的代码，还能创建自己的库，向别人的<br>库中提交代码，为开源社区贡献自己的力量。这里就说一下一般是如何向已有的库提<br>交代码的。</p>\n<p>#1. Fork 你想要贡献代码的库</p>\n<p><img src=\"https://github.s3.amazonaws.com/docs/bootcamp_3_fork.jpg\" alt=\"image\"><br>找到你想要贡献代码的库的主页，点击图中标出来的fork按钮，这样就会在你自己的库<br>中添加一个和你fork的库（我们叫它upstream）同名的库（我们叫它mystream）。</p>\n<p>#2. 克隆你fork的库</p>\n<p>使用git clone命令将mystream克隆到本地。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:&lt;username&gt;/&lt;repo-name&gt;.git</div></pre></td></tr></table></figure>\n<p>这个克隆出来的库只是你github上面的库在本地一个副本，你可以对它任意的操作，<br>只要不push你的改动，是不会对你github上面的代码产生任何影响，同时也体现了git<br>离线提交的好处。</p>\n<p>#3. 在remote列表中添加你要贡献代码的库</p>\n<p>既然要贡献你的代码给别人，就要先把别人的地址给记下来吧，使用git remote add命<br>令来添加upstream。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add upstream &lt;original repo git url&gt;</div></pre></td></tr></table></figure>\n<p>到这里主要的准备工作就做完了。可以使用git remote命令查看你的remote列表。</p>\n<p>#4. 创建一个工作分支，在上面完成你的工作</p>\n<p>使用git和别人协同工作一个很重要的原则是不要在主分支上进行修改，这个原则和后<br>面提到的原子性提交以及pull request 都是有关系的，后面会说到。首先确认你在主分<br>支上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div></pre></td></tr></table></figure>\n<p>创建并且切换到一个新的工作分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;new-branch-name&gt;</div></pre></td></tr></table></figure>\n<p>在这个工作分支上你就可以为所欲为了，你可以添加，修改代码，并且进行正常的<br>commit提交</p>\n<p>#5. 保持你的代码同步</p>\n<p>因为我们的开发和修改是独立的，和我们fork的代码库是并行进行的，所以在我们fork<br>后，或者上次同步一段时间后，我们本地的代码已经不是最新的了。当你完成了修改<br>并且想向主库提交代码时，首先要做的事情就是同步你的代码。<br>确认你工作在主分支上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div></pre></td></tr></table></figure>\n<p>从upstream的主代码库获取最新的代码并且与本地的主分支合并</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull upstream master</div></pre></td></tr></table></figure>\n<p>这是懒人的做法，你也可以选择使用git fetch和git merge，选择性合并主分支的代<br>码，这里有它们的<a href=\"http://www.tech126.com/git-fetch-pull/\" target=\"_blank\" rel=\"external\">区别</a>另外，你也可以将你<br>自己在github上的mystream主分支更新，当然这个是可选的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<p>一般默认你克隆下来本地对应的远端mystream被命名为origin</p>\n<p>#6. 同步你想要提交的分支代码</p>\n<p>到这里你本地的主分支已经和upstream的主分支同步了，真正的好戏才刚刚开始。前<br>面提到提交的原子性，那什么是提交的原子性呢？我们都知道乐高积木，这个提交的<br>原子性就是保证我们使用乐高积木拼装成的艺术品，随时可以进行调整。每一次提交<br>就像一个积木块一样，可以随时拔掉或者插上。</p>\n<p>但是当我们在本地为了添加一个功能或者修复一个bug，很多时候不会只做一次提交，<br>而是可能会进行多次commit提交。如果直接将这些改动与upstream主分支合并，那么<br>以后如果希望撤销这次的操作或者将这次的改动合并到其他分支上就会很麻烦。</p>\n<p>首先确保你在你一直辛勤工作的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout &lt;working-branch-name&gt;</div></pre></td></tr></table></figure>\n<p>将你本地的工作分支与master主分支“合并”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase -i master</div></pre></td></tr></table></figure>\n<p>这里用到的rebase命令不是简单的合并，这里有<a href=\"http://www.liuhui998.com/4_2.html\" target=\"_blank\" rel=\"external\">rebase与merge的区别</a>，-i参数会引导<br>我们一步一步解决冲突，你也可以选择先解决冲突再使用rebase。使用rebase命令会<br>将你原来多次的提交合并成一次提交。<br>其中-i 参数会用交互的方式引导你合并为一次提交，一般你会看到这样的编辑界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick ff76694 add line 3</div><div class=\"line\">pick 8e49657 add line 4</div><div class=\"line\"><span class=\"comment\"># Rebase d879706..8e49657 onto d879706</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Commands:</span></div><div class=\"line\"><span class=\"comment\">#  p, pick = use commit</span></div><div class=\"line\"><span class=\"comment\">#  r, reword = use commit, but edit the commit message</span></div><div class=\"line\"><span class=\"comment\">#  e, edit = use commit, but stop for amending</span></div><div class=\"line\"><span class=\"comment\">#  s, squash = use commit, but meld into previous commit</span></div><div class=\"line\"><span class=\"comment\">#  f, fixup = like \"squash\", but discard this commit's log message</span></div><div class=\"line\"><span class=\"comment\">#  x, exec = run command (the rest of the line) using shell</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></div></pre></td></tr></table></figure>\n<p>下面的注释中Command有详细的解释，一般将你要合并的多个提交前面的pick改为squash（如果有多个commit除了第一个是pick其他都是squash），对于我们的示例，修改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick ff76694 add line 3</div><div class=\"line\">squash 8e49657 add line 4</div><div class=\"line\"><span class=\"comment\"># Rebase d879706..8e49657 onto d879706</span></div><div class=\"line\"><span class=\"comment\">#...</span></div></pre></td></tr></table></figure>\n<p>保存文件退出编辑，正常情况下这样就完事了，但是如果master分支上有新的提交和你的工作分支提交发生冲突，就会看到下面的情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">error: could not apply ff76694... add line 3</div><div class=\"line\"></div><div class=\"line\">When you have resolved this problem, run <span class=\"string\">\"git rebase --continue\"</span>.</div><div class=\"line\">If you prefer to skip this patch, run <span class=\"string\">\"git rebase --skip\"</span> instead.</div><div class=\"line\">To check out the original branch and stop rebasing, run <span class=\"string\">\"git rebase --abort\"</span>.</div><div class=\"line\">Could not apply ff76694624019140e05cd9d443aa547e62c5c24b... add line 3</div></pre></td></tr></table></figure>\n<p>编辑冲突文件（冲突文件中可能不会列出你在当前分支上所有的改动，只会标出冲突部分），选择需要的部分，保存文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add &lt;modified files&gt;</div><div class=\"line\">git rebase --<span class=\"built_in\">continue</span></div></pre></td></tr></table></figure>\n<p>之后你会看到类似这样的提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">add line 3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></div><div class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></div><div class=\"line\"><span class=\"comment\"># rebase in progress; onto d879706</span></div><div class=\"line\"><span class=\"comment\"># You are currently rebasing branch 'feature' on 'd879706'.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Changes to be committed:</span></div><div class=\"line\"><span class=\"comment\">#       modified:   test.txt</span></div><div class=\"line\"><span class=\"comment\">#</span></div></pre></td></tr></table></figure>\n<p>这里是让你编辑你第一次提交的comment，更改comment内容后保存退出，记着会提示你编辑合并commit的comment，你在上一次添加的comment会合并进来，你看到的会是这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This is a combination of 2 commits.</span></div><div class=\"line\"><span class=\"comment\"># The first commit's message is:</span></div><div class=\"line\"></div><div class=\"line\">add line 3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># This is the 2nd commit message:</span></div><div class=\"line\"></div><div class=\"line\">add line 4</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></div><div class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></div><div class=\"line\"><span class=\"comment\"># rebase in progress; onto d879706</span></div><div class=\"line\"><span class=\"comment\"># You are currently editing a commit while rebasing branch 'feature' on 'd879706'.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Changes to be committed:</span></div><div class=\"line\"><span class=\"comment\">#       modified:   test.txt</span></div><div class=\"line\"><span class=\"comment\">#</span></div></pre></td></tr></table></figure>\n<p>去掉多余的comment内容，保存退出。<br>到这里工作分支和master的合并就完成了，使用rebase，你只在工作分支上做到了两件事：</p>\n<ol>\n<li>同步本地master的最新代码到工作分支<br>2 .将工作分支上的多次提交合并成一次提交，同时append到时间轴的最后<br>更详细的说明看<a href=\"http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\" target=\"_blank\" rel=\"external\">这里</a><br><strong>这时你在新的分支上的改动还没有同步到本地master</strong>，你需要切换回master分支，将改动合并回来</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div><div class=\"line\">git merge &lt;working-branch-name&gt;</div></pre></td></tr></table></figure>\n<p>你看到maser上的时间轴将会是优雅的直线</p>\n<p>#7. 提交本地分支代码</p>\n<p>以上的一切操作都是发生在本地，为了能够发送pull request，你需要将本地的改动提<br>交到github。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin &lt;working-branch-name&gt;</div></pre></td></tr></table></figure>\n<p> 到这里我们的一个工作流程就完成了，如果我们有一个CI系统，我们可以选择我们提<br>交的这个分支跑一下CI，确保不会让我们的系统挂掉。最后就是发送一条<br>pull request，这个<a href=\"https://help.github.com/articles/using-pull-requests\" target=\"_blank\" rel=\"external\">官网介绍</a>的很详细啦。</p>\n<p>最后说明一下为什么要创建分支而不直接在主分支上操作。其实主要是为了保证一个<br>干净的主分支。随时让我们可以基于这个干净的分支创建新的分支，所有的操作和修<br>改都是与主分支隔离开的。主分支只负责和upstream进行同步。如果在本地提交了有<br>问题的代码那还好，大不了就是删掉本地的库，重新再克隆一个。一旦提交到github<br>上，主分支就污染了，为了保证减少无意义的提交（revert之前的commit）就需要重<br>新fork了。</p>\n<p><a href=\"http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/\" target=\"_blank\" rel=\"external\">Effective pull requests and other good practices for teams using github</a></p>\n","categories":[],"tags":["blog","git"]},{"title":"about","url":"https://vincenthou.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://vincenthou.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://vincenthou.github.io/css/style.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(to left, #5f2c82, #49a09d);\n  background-blend-mode: screen;\n  animation: blur 5s;\n  -webkit-animation: blur 5s;\n}\n\n.content-home .slogan {\n  color: #fff;\n}\n\n@keyframes blur\n{\n  from {\n    filter: blur(2px);\n  }\n  to {\n    filter: initial;\n  }\n}\n\n@-webkit-keyframes blur\n{\n  from {\n    -webkit-filter: blur(2px);\n  }\n  to {\n    -webkit-filter: initial;\n  }\n}\n","categories":[],"tags":[]},{"title":"link","url":"https://vincenthou.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://vincenthou.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://vincenthou.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://vincenthou.github.io/tag/index.html","content":"","categories":[],"tags":[]}]